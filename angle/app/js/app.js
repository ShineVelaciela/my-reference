/*!
 * 
 * Angle - Bootstrap Admin App + AngularJS
 * 
 * Version: 3.0.0
 * Author: @themicon_co
 * Website: http://themicon.co
 * License: https://wrapbootstrap.com/help/licenses
 * 
 */

// APP START
// ----------------------------------- 

(function() {
    'use strict';

    angular
        .module('angle', [
            'app.core',
            'app.routes',
            'app.sidebar',
            'app.navsearch',
            'app.preloader',
            'app.loadingbar',
            'app.translate',
            'app.settings',
            'app.dashboard',
            'app.icons',
            'app.flatdoc',
            'app.notify',
            'app.bootstrapui',
            'app.elements',
            'app.panels',
            'app.charts',
            'app.forms',
            'app.locale',
            'app.maps',
            'app.pages',
            'app.tables',
            'app.extras',
            'app.mailbox',
            'app.utils',
            'app.constant',
            'app.list'
        ]);
})();


(function() {
    'use strict';

    angular
        .module('app.bootstrapui', []);
})();
(function() {
    'use strict';

    angular
        .module('app.charts', []);
})();
(function() {
    'use strict';

    angular
        .module('app.colors', []);
})();
(function() {
    'use strict';

    angular
        .module('app.core', [
            'ngRoute',
            'ngAnimate',
            'ngStorage',
            'ngCookies',
            'pascalprecht.translate',
            'ui.bootstrap',
            'ui.router',
            'oc.lazyLoad',
            'cfp.loadingBar',
            'ngSanitize',
            'ngResource',
            'tmh.dynamicLocale',
            'ui.utils'
        ]);
})();
(function() {
    'use strict';

    angular
        .module('app.dashboard', []);
})();
(function() {
    'use strict';

    angular
        .module('app.elements', []);
})();
(function() {
    'use strict';

    angular
        .module('app.extras', []);
})();
(function() {
    'use strict';

    angular
        .module('app.flatdoc', []);
})();
(function() {
    'use strict';

    angular
        .module('app.forms', []);
})();
(function() {
    'use strict';

    angular
        .module('app.icons', []);
})();
(function() {
    'use strict';

    angular
        .module('app.lazyload', []);
})();
(function() {
    'use strict';

    angular
        .module('app.loadingbar', []);
})();
(function() {
    'use strict';

    angular
        .module('app.locale', []);
})();
(function() {
    'use strict';

    angular
        .module('app.mailbox', []);
})();
(function() {
    'use strict';

    angular
        .module('app.maps', []);
})();
(function() {
    'use strict';

    angular
        .module('app.navsearch', []);
})();
(function() {
    'use strict';

    angular
        .module('app.notify', []);
})();
(function() {
    'use strict';

    angular
        .module('app.pages', []);
})();
(function() {
    'use strict';

    angular
        .module('app.panels', []);
})();
(function() {
    'use strict';

    angular
        .module('app.preloader', []);
})();


(function() {
    'use strict';

    angular
        .module('app.routes', [
            'app.lazyload'
        ]);
})();
(function() {
    'use strict';

    angular
        .module('app.settings', []);
})();
(function() {
    'use strict';

    angular
        .module('app.sidebar', []);
})();
(function() {
    'use strict';

    angular
        .module('app.tables', []);
})();
(function() {
    'use strict';

    angular
        .module('app.translate', []);
})();
(function() {
    'use strict';

    angular
        .module('app.utils', [
          'app.colors'
          ]);
})();

/**=========================================================
 * Module: demo-alerts.js
 * Provides a simple demo for pagination
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('AlertDemoCtrl', AlertDemoCtrl);

    function AlertDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.alerts = [
            { type: 'danger', msg: 'Oh snap! Change a few things up and try submitting again.' },
            { type: 'warning', msg: 'Well done! You successfully read this important alert message.' }
          ];

          vm.addAlert = function() {
            vm.alerts.push({msg: 'Another alert!'});
          };

          vm.closeAlert = function(index) {
            vm.alerts.splice(index, 1);
          };
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .config(bootstrapuiConfig);

    bootstrapuiConfig.$inject = ['$tooltipProvider'];
    function bootstrapuiConfig($tooltipProvider){
      $tooltipProvider.options({appendToBody: true});
    }
})();
/**=========================================================
 * Module: demo-buttons.js
 * Provides a simple demo for buttons actions
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('ButtonsCtrl', ButtonsCtrl);

    function ButtonsCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.singleModel = 1;

          vm.radioModel = 'Middle';

          vm.checkModel = {
            left: false,
            middle: true,
            right: false
          };
        }
    }
})();

/**=========================================================
 * Module: demo-carousel.js
 * Provides a simple demo for bootstrap ui carousel
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('CarouselDemoCtrl', CarouselDemoCtrl);

    function CarouselDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.myInterval = 5000;
          
          var slides = vm.slides = [];
          vm.addSlide = function() {
            var newWidth = 800 + slides.length;
            slides.push({
              image: '//placekitten.com/' + newWidth + '/300',
              text: ['More','Extra','Lots of','Surplus'][slides.length % 2] + ' ' +
                ['Cats', 'Kittys', 'Felines', 'Cutes'][slides.length % 2]
            });
          };
          
          for (var i=0; i<2; i++) {
            vm.addSlide();
          }

        }
    }
})();

/**=========================================================
 * Module: demo-datepicker.js
 * Provides a simple demo for bootstrap datepicker
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('DatepickerDemoCtrl', DatepickerDemoCtrl);

    function DatepickerDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.today = function() {
            vm.dt = new Date();
          };
          vm.today();

          vm.clear = function () {
            vm.dt = null;
          };

          // Disable weekend selection
          vm.disabled = function(date, mode) {
            return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
          };

          vm.toggleMin = function() {
            vm.minDate = vm.minDate ? null : new Date();
          };
          vm.toggleMin();

          vm.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            vm.opened = true;
          };

          vm.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
          };

          vm.initDate = new Date('2019-10-20');
          vm.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
          vm.format = vm.formats[0];
        }
    }
})();


/**=========================================================
 * Module: modals.js
 * Provides a simple way to implement bootstrap modals from templates
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('ModalController', ModalController);

    ModalController.$inject = ['$modal'];
    function ModalController($modal) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          vm.open = function (size,type) {

            var modalInstance = $modal.open({
              templateUrl: '/myModalContent.html',
              controller: ModalInstanceCtrl,
              size: size,
                resolve: {
                    type: function(){
                        return type;
                    }
                }
            });

            var state = $('#modal-state');
            modalInstance.result.then(function () {
              state.text('Modal dismissed with OK status');
            }, function () {
              state.text('Modal dismissed with Cancel status');
            });
          };

          // Please note that $modalInstance represents a modal window (instance) dependency.
          // It is not the same as the $modal service used above.

          ModalInstanceCtrl.$inject = ['$scope', '$modalInstance','CatalogService','$stateParams','type'];
          function ModalInstanceCtrl($scope, $modalInstance,CatalogService,$stateParams,type) {
              if(!checkEmpty(type) && type == 'catalog'){
                  var promise = CatalogService.service.getCatalogs($stateParams.songId);
                  promise.then(function (res) {
                      $scope.autherComposers = res;
                     console.log(res);
                  });
              }
            $scope.ok = function () {
              $modalInstance.close('closed');
            };

            $scope.cancel = function () {
              $modalInstance.dismiss('cancel');
            };
          }
        }
    }

})();

/**=========================================================
 * Module: demo-pagination.js
 * Provides a simple demo for pagination
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('PaginationDemoCtrl', PaginationDemoCtrl);

    function PaginationDemoCtrl() {
        var vm = this;


        activate();

        ////////////////

        function activate() {
          vm.totalItems = 64;
          vm.currentPage = 4;

          vm.setPage = function (pageNo) {
            vm.currentPage = pageNo;
          };

          vm.pageChanged = function() {
            console.log('Page changed to: ' + vm.currentPage);
          };

          vm.maxSize = 5;
          vm.bigTotalItems = 175;
          vm.bigCurrentPage = 1;
        }
    }
})();

/**=========================================================
 * Module: demo-popover.js
 * Provides a simple demo for popovers
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('PopoverDemoCtrl', PopoverDemoCtrl);

    function PopoverDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.dynamicPopover = 'Hello, World!';
          vm.dynamicPopoverTitle = 'Title';
        }
    }
})();

/**=========================================================
 * Module: demo-progress.js
 * Provides a simple demo to animate progress bar
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('ProgressDemoCtrl', ProgressDemoCtrl);

    function ProgressDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.max = 200;

          vm.random = function() {
            var value = Math.floor((Math.random() * 100) + 1);
            var type;

            if (value < 25) {
              type = 'success';
            } else if (value < 50) {
              type = 'info';
            } else if (value < 75) {
              type = 'warning';
            } else {
              type = 'danger';
            }

            vm.showWarning = (type === 'danger' || type === 'warning');

            vm.dynamic = value;
            vm.type = type;
          };
          vm.random();

          vm.randomStacked = function() {
            vm.stacked = [];
            var types = ['success', 'info', 'warning', 'danger'];

            for (var i = 0, n = Math.floor((Math.random() * 4) + 1); i < n; i++) {
                var index = Math.floor((Math.random() * 4));
                vm.stacked.push({
                  value: Math.floor((Math.random() * 30) + 1),
                  type: types[index]
                });
            }
          };
          vm.randomStacked();
        }
    }
})();

/**=========================================================
 * Module: demo-rating.js
 * Provides a demo for ratings UI
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('RatingDemoCtrl', RatingDemoCtrl);

    function RatingDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.rate = 7;
          vm.max = 10;
          vm.isReadonly = false;

          vm.hoveringOver = function(value) {
            vm.overStar = value;
            vm.percent = 100 * (value / vm.max);
          };

          vm.ratingStates = [
            {stateOn: 'fa fa-check', stateOff: 'fa fa-check-circle'},
            {stateOn: 'fa fa-star', stateOff: 'fa fa-star-o'},
            {stateOn: 'fa fa-heart', stateOff: 'fa fa-ban'},
            {stateOn: 'fa fa-heart'},
            {stateOff: 'fa fa-power-off'}
          ];
        }
    }
})();

/**=========================================================
 * Module: demo-timepicker.js
 * Provides a simple demo for bootstrap ui timepicker
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('TimepickerDemoCtrl', TimepickerDemoCtrl);

    function TimepickerDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.mytime = new Date();

          vm.hstep = 1;
          vm.mstep = 15;

          vm.options = {
            hstep: [1, 2, 3],
            mstep: [1, 5, 10, 15, 25, 30]
          };

          vm.ismeridian = true;
          vm.toggleMode = function() {
            vm.ismeridian = ! vm.ismeridian;
          };

          vm.update = function() {
            var d = new Date();
            d.setHours( 14 );
            d.setMinutes( 0 );
            vm.mytime = d;
          };

          vm.changed = function () {
            console.log('Time changed to: ' + vm.mytime);
          };

          vm.clear = function() {
            vm.mytime = null;
          };
        }
    }
})();

/**=========================================================
 * Module: demo-tooltip.js
 * Provides a simple demo for tooltip
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('TooltipDemoCtrl', TooltipDemoCtrl);

    function TooltipDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.dynamicTooltip = 'Hello, World!';
          vm.dynamicTooltipText = 'dynamic';
          vm.htmlTooltip = 'I\'ve been made <b>bold</b>!';

          vm.autoplace = function (context, source) {
            //return (predictTooltipTop(source) < 0) ?  "bottom": "top";
            var pos = 'top';
            if(predictTooltipTop(source) < 0)
              pos = 'bottom';
            if(predictTooltipLeft(source) < 0)
              pos = 'right';
            return pos;
          };

            // Predicts tooltip top position 
            // based on the trigger element
            function predictTooltipTop(el) {
              var top = el.offsetTop;
              var height = 40; // asumes ~40px tooltip height

              while(el.offsetParent) {
                el = el.offsetParent;
                top += el.offsetTop;
              }
              return (top - height) - (window.pageYOffset);
            }

            // Predicts tooltip top position 
            // based on the trigger element
            function predictTooltipLeft(el) {
              var left = el.offsetLeft;
              var width = el.offsetWidth;

              while(el.offsetParent) {
                el = el.offsetParent;
                left += el.offsetLeft;
              }
              return (left - width) - (window.pageXOffset);
            }
        }
    }
})();

/**=========================================================
 * Module: demo-typeahead.js
 * Provides a simple demo for typeahead
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('TypeaheadCtrl', TypeaheadCtrl);

    TypeaheadCtrl.$inject = ['$http'];
    function TypeaheadCtrl($http) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          vm.selected = undefined;
          vm.states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Dakota', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];

          // Any function returning a promise object can be used to load values asynchronously
          vm.getLocation = function(val) {
            return $http.get('//maps.googleapis.com/maps/api/geocode/json', {
              params: {
                address: val,
                sensor: false
              }
            }).then(function(res){
              var addresses = [];
              angular.forEach(res.data.results, function(item){
                /*jshint -W106*/
                addresses.push(item.formatted_address);
              });
              return addresses;
            });
          };

          vm.statesWithFlags = [{'name':'Alabama','flag':'5/5c/Flag_of_Alabama.svg/45px-Flag_of_Alabama.svg.png'},{'name':'Alaska','flag':'e/e6/Flag_of_Alaska.svg/43px-Flag_of_Alaska.svg.png'},{'name':'Arizona','flag':'9/9d/Flag_of_Arizona.svg/45px-Flag_of_Arizona.svg.png'},{'name':'Arkansas','flag':'9/9d/Flag_of_Arkansas.svg/45px-Flag_of_Arkansas.svg.png'},{'name':'California','flag':'0/01/Flag_of_California.svg/45px-Flag_of_California.svg.png'},{'name':'Colorado','flag':'4/46/Flag_of_Colorado.svg/45px-Flag_of_Colorado.svg.png'},{'name':'Connecticut','flag':'9/96/Flag_of_Connecticut.svg/39px-Flag_of_Connecticut.svg.png'},{'name':'Delaware','flag':'c/c6/Flag_of_Delaware.svg/45px-Flag_of_Delaware.svg.png'},{'name':'Florida','flag':'f/f7/Flag_of_Florida.svg/45px-Flag_of_Florida.svg.png'},{'name':'Georgia','flag':'5/54/Flag_of_Georgia_%28U.S._state%29.svg/46px-Flag_of_Georgia_%28U.S._state%29.svg.png'},{'name':'Hawaii','flag':'e/ef/Flag_of_Hawaii.svg/46px-Flag_of_Hawaii.svg.png'},{'name':'Idaho','flag':'a/a4/Flag_of_Idaho.svg/38px-Flag_of_Idaho.svg.png'},{'name':'Illinois','flag':'0/01/Flag_of_Illinois.svg/46px-Flag_of_Illinois.svg.png'},{'name':'Indiana','flag':'a/ac/Flag_of_Indiana.svg/45px-Flag_of_Indiana.svg.png'},{'name':'Iowa','flag':'a/aa/Flag_of_Iowa.svg/44px-Flag_of_Iowa.svg.png'},{'name':'Kansas','flag':'d/da/Flag_of_Kansas.svg/46px-Flag_of_Kansas.svg.png'},{'name':'Kentucky','flag':'8/8d/Flag_of_Kentucky.svg/46px-Flag_of_Kentucky.svg.png'},{'name':'Louisiana','flag':'e/e0/Flag_of_Louisiana.svg/46px-Flag_of_Louisiana.svg.png'},{'name':'Maine','flag':'3/35/Flag_of_Maine.svg/45px-Flag_of_Maine.svg.png'},{'name':'Maryland','flag':'a/a0/Flag_of_Maryland.svg/45px-Flag_of_Maryland.svg.png'},{'name':'Massachusetts','flag':'f/f2/Flag_of_Massachusetts.svg/46px-Flag_of_Massachusetts.svg.png'},{'name':'Michigan','flag':'b/b5/Flag_of_Michigan.svg/45px-Flag_of_Michigan.svg.png'},{'name':'Minnesota','flag':'b/b9/Flag_of_Minnesota.svg/46px-Flag_of_Minnesota.svg.png'},{'name':'Mississippi','flag':'4/42/Flag_of_Mississippi.svg/45px-Flag_of_Mississippi.svg.png'},{'name':'Missouri','flag':'5/5a/Flag_of_Missouri.svg/46px-Flag_of_Missouri.svg.png'},{'name':'Montana','flag':'c/cb/Flag_of_Montana.svg/45px-Flag_of_Montana.svg.png'},{'name':'Nebraska','flag':'4/4d/Flag_of_Nebraska.svg/46px-Flag_of_Nebraska.svg.png'},{'name':'Nevada','flag':'f/f1/Flag_of_Nevada.svg/45px-Flag_of_Nevada.svg.png'},{'name':'New Hampshire','flag':'2/28/Flag_of_New_Hampshire.svg/45px-Flag_of_New_Hampshire.svg.png'},{'name':'New Jersey','flag':'9/92/Flag_of_New_Jersey.svg/45px-Flag_of_New_Jersey.svg.png'},{'name':'New Mexico','flag':'c/c3/Flag_of_New_Mexico.svg/45px-Flag_of_New_Mexico.svg.png'},{'name':'New York','flag':'1/1a/Flag_of_New_York.svg/46px-Flag_of_New_York.svg.png'},{'name':'North Carolina','flag':'b/bb/Flag_of_North_Carolina.svg/45px-Flag_of_North_Carolina.svg.png'},{'name':'North Dakota','flag':'e/ee/Flag_of_North_Dakota.svg/38px-Flag_of_North_Dakota.svg.png'},{'name':'Ohio','flag':'4/4c/Flag_of_Ohio.svg/46px-Flag_of_Ohio.svg.png'},{'name':'Oklahoma','flag':'6/6e/Flag_of_Oklahoma.svg/45px-Flag_of_Oklahoma.svg.png'},{'name':'Oregon','flag':'b/b9/Flag_of_Oregon.svg/46px-Flag_of_Oregon.svg.png'},{'name':'Pennsylvania','flag':'f/f7/Flag_of_Pennsylvania.svg/45px-Flag_of_Pennsylvania.svg.png'},{'name':'Rhode Island','flag':'f/f3/Flag_of_Rhode_Island.svg/32px-Flag_of_Rhode_Island.svg.png'},{'name':'South Carolina','flag':'6/69/Flag_of_South_Carolina.svg/45px-Flag_of_South_Carolina.svg.png'},{'name':'South Dakota','flag':'1/1a/Flag_of_South_Dakota.svg/46px-Flag_of_South_Dakota.svg.png'},{'name':'Tennessee','flag':'9/9e/Flag_of_Tennessee.svg/46px-Flag_of_Tennessee.svg.png'},{'name':'Texas','flag':'f/f7/Flag_of_Texas.svg/45px-Flag_of_Texas.svg.png'},{'name':'Utah','flag':'f/f6/Flag_of_Utah.svg/45px-Flag_of_Utah.svg.png'},{'name':'Vermont','flag':'4/49/Flag_of_Vermont.svg/46px-Flag_of_Vermont.svg.png'},{'name':'Virginia','flag':'4/47/Flag_of_Virginia.svg/44px-Flag_of_Virginia.svg.png'},{'name':'Washington','flag':'5/54/Flag_of_Washington.svg/46px-Flag_of_Washington.svg.png'},{'name':'West Virginia','flag':'2/22/Flag_of_West_Virginia.svg/46px-Flag_of_West_Virginia.svg.png'},{'name':'Wisconsin','flag':'2/22/Flag_of_Wisconsin.svg/45px-Flag_of_Wisconsin.svg.png'},{'name':'Wyoming','flag':'b/bc/Flag_of_Wyoming.svg/43px-Flag_of_Wyoming.svg.png'}];

        }
    }
})();

/**=========================================================
 * Module: chartist.js
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('ChartistController', ChartistController);

    function ChartistController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // Line chart
          // ----------------------------------- 

          vm.lineData = {
            labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
            series: [
              [12, 9, 7, 8, 5],
              [2, 1, 3.5, 7, 3],
              [1, 3, 4, 5, 6]
            ]
          };

          vm.lineOptions = {
            fullWidth: true,
            height: 220,
            chartPadding: {
              right: 40
            }
          };

          // Bar bipolar
          // ----------------------------------- 

          vm.barBipolarOptions = {
            high: 10,
            low: -10,
            height: 220,
            axisX: {
              labelInterpolationFnc: function(value, index) {
                return index % 2 === 0 ? value : null;
              }
            }
          };

          vm.barBipolarData = {
            labels: ['W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10'],
            series: [
              [1, 2, 4, 8, 6, -2, -1, -4, -6, -2]
            ]
          };


          // Bar horizontal
          // ----------------------------------- 

          vm.barHorizontalData = {
            labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
            series: [
              [5, 4, 3, 7, 5, 10, 3],
              [3, 2, 9, 5, 4, 6, 4]
            ]
          };

          vm.barHorizontalOptions = {
            seriesBarDistance: 10,
            reverseData: true,
            horizontalBars: true,
            height: 220,
            axisY: {
              offset: 70
            }
          };

          // Smil Animations
          // ----------------------------------- 

          // Let's put a sequence number aside so we can use it in the event callbacks
          var seq = 0,
            delays = 80,
            durations = 500;

          vm.smilData = {
            labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
            series: [
              [12, 9, 7, 8, 5, 4, 6, 2, 3, 3, 4, 6],
              [4,  5, 3, 7, 3, 5, 5, 3, 4, 4, 5, 5],
              [5,  3, 4, 5, 6, 3, 3, 4, 5, 6, 3, 4],
              [3,  4, 5, 6, 7, 6, 4, 5, 6, 7, 6, 3]
            ]
          };

          vm.smilOptions = {
            low: 0,
            height: 260
          };

          vm.smilEvents = {
            created: function() {
              seq = 0;
            },
            draw: function(data) {
              seq++;

              if(data.type === 'line') {
                // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
                data.element.animate({
                  opacity: {
                    // The delay when we like to start the animation
                    begin: seq * delays + 1000,
                    // Duration of the animation
                    dur: durations,
                    // The value where the animation should start
                    from: 0,
                    // The value where it should end
                    to: 1
                  }
                });
              } else if(data.type === 'label' && data.axis === 'x') {
                data.element.animate({
                  y: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.y + 100,
                    to: data.y,
                    // We can specify an easing function from Chartist.Svg.Easing
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'label' && data.axis === 'y') {
                data.element.animate({
                  x: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 100,
                    to: data.x,
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'point') {
                data.element.animate({
                  x1: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                  },
                  x2: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                  },
                  opacity: {
                    begin: seq * delays,
                    dur: durations,
                    from: 0,
                    to: 1,
                    easing: 'easeOutQuart'
                  }
                });
              } 
            }
          };


          // SVG PATH animation
          // ----------------------------------- 

          vm.pathData = {
            labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            series: [
              [1, 5, 2, 5, 4, 3],
              [2, 3, 4, 8, 1, 2],
              [5, 4, 3, 2, 1, 0.5]
            ]
          };

          vm.pathOptions = {
            low: 0,
            showArea: true,
            showPoint: false,
            fullWidth: true,
            height: 260
          };

          vm.pathEvents = {
            draw: function(data) {
              if(data.type === 'line' || data.type === 'area') {
                data.element.animate({
                  d: {
                    begin: 2000 * data.index,
                    dur: 2000,
                    from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),
                    to: data.path.clone().stringify(),
                    easing: Chartist.Svg.Easing.easeOutQuint
                  }
                });
              }
            }
          };

        }
    }
})();


/**=========================================================
 * Module: chart.controller.js
 * Controller for ChartJs
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('ChartJSController', ChartJSController);

    ChartJSController.$inject = ['Colors'];
    function ChartJSController(Colors) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // random values for demo
          var rFactor = function(){ return Math.round(Math.random()*100); };

          // Line chart
          // ----------------------------------- 

          vm.lineData = {
              labels : ['January','February','March','April','May','June','July'],
              datasets : [
                {
                  label: 'My First dataset',
                  fillColor : 'rgba(114,102,186,0.2)',
                  strokeColor : 'rgba(114,102,186,1)',
                  pointColor : 'rgba(114,102,186,1)',
                  pointStrokeColor : '#fff',
                  pointHighlightFill : '#fff',
                  pointHighlightStroke : 'rgba(114,102,186,1)',
                  data : [rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor()]
                },
                {
                  label: 'My Second dataset',
                  fillColor : 'rgba(35,183,229,0.2)',
                  strokeColor : 'rgba(35,183,229,1)',
                  pointColor : 'rgba(35,183,229,1)',
                  pointStrokeColor : '#fff',
                  pointHighlightFill : '#fff',
                  pointHighlightStroke : 'rgba(35,183,229,1)',
                  data : [rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor()]
                }
              ]
            };


          vm.lineOptions = {
            scaleShowGridLines : true,
            scaleGridLineColor : 'rgba(0,0,0,.05)',
            scaleGridLineWidth : 1,
            bezierCurve : true,
            bezierCurveTension : 0.4,
            pointDot : true,
            pointDotRadius : 4,
            pointDotStrokeWidth : 1,
            pointHitDetectionRadius : 20,
            datasetStroke : true,
            datasetStrokeWidth : 2,
            datasetFill : true,
          };


          // Bar chart
          // ----------------------------------- 

          vm.barData = {
              labels : ['January','February','March','April','May','June','July'],
              datasets : [
                {
                  fillColor : Colors.byName('info'),
                  strokeColor : Colors.byName('info'),
                  highlightFill: Colors.byName('info'),
                  highlightStroke: Colors.byName('info'),
                  data : [rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor()]
                },
                {
                  fillColor : Colors.byName('primary'),
                  strokeColor : Colors.byName('primary'),
                  highlightFill : Colors.byName('primary'),
                  highlightStroke : Colors.byName('primary'),
                  data : [rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor()]
                }
              ]
          };
          
          vm.barOptions = {
            scaleBeginAtZero : true,
            scaleShowGridLines : true,
            scaleGridLineColor : 'rgba(0,0,0,.05)',
            scaleGridLineWidth : 1,
            barShowStroke : true,
            barStrokeWidth : 2,
            barValueSpacing : 5,
            barDatasetSpacing : 1,
          };


          //  Doughnut chart
          // ----------------------------------- 
          
          vm.doughnutData = [
                {
                  value: 300,
                  color: Colors.byName('purple'),
                  highlight: Colors.byName('purple'),
                  label: 'Purple'
                },
                {
                  value: 50,
                  color: Colors.byName('info'),
                  highlight: Colors.byName('info'),
                  label: 'Info'
                },
                {
                  value: 100,
                  color: Colors.byName('yellow'),
                  highlight: Colors.byName('yellow'),
                  label: 'Yellow'
                }
              ];

          vm.doughnutOptions = {
            segmentShowStroke : true,
            segmentStrokeColor : '#fff',
            segmentStrokeWidth : 2,
            percentageInnerCutout : 85,
            animationSteps : 100,
            animationEasing : 'easeOutBounce',
            animateRotate : true,
            animateScale : false
          };

          // Pie chart
          // ----------------------------------- 

          vm.pieData =[
                {
                  value: 300,
                  color: Colors.byName('purple'),
                  highlight: Colors.byName('purple'),
                  label: 'Purple'
                },
                {
                  value: 40,
                  color: Colors.byName('yellow'),
                  highlight: Colors.byName('yellow'),
                  label: 'Yellow'
                },
                {
                  value: 120,
                  color: Colors.byName('info'),
                  highlight: Colors.byName('info'),
                  label: 'Info'
                }
              ];

          vm.pieOptions = {
            segmentShowStroke : true,
            segmentStrokeColor : '#fff',
            segmentStrokeWidth : 2,
            percentageInnerCutout : 0, // Setting this to zero convert a doughnut into a Pie
            animationSteps : 100,
            animationEasing : 'easeOutBounce',
            animateRotate : true,
            animateScale : false
          };

          // Polar chart
          // ----------------------------------- 
          
          vm.polarData = [
                {
                  value: 300,
                  color: Colors.byName('pink'),
                  highlight: Colors.byName('pink'),
                  label: 'Red'
                },
                {
                  value: 50,
                  color: Colors.byName('purple'),
                  highlight: Colors.byName('purple'),
                  label: 'Green'
                },
                {
                  value: 100,
                  color: Colors.byName('pink'),
                  highlight: Colors.byName('pink'),
                  label: 'Yellow'
                },
                {
                  value: 140,
                  color: Colors.byName('purple'),
                  highlight: Colors.byName('purple'),
                  label: 'Grey'
                },
              ];

          vm.polarOptions = {
            scaleShowLabelBackdrop : true,
            scaleBackdropColor : 'rgba(255,255,255,0.75)',
            scaleBeginAtZero : true,
            scaleBackdropPaddingY : 1,
            scaleBackdropPaddingX : 1,
            scaleShowLine : true,
            segmentShowStroke : true,
            segmentStrokeColor : '#fff',
            segmentStrokeWidth : 2,
            animationSteps : 100,
            animationEasing : 'easeOutBounce',
            animateRotate : true,
            animateScale : false
          };


          // Radar chart
          // ----------------------------------- 

          vm.radarData = {
            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],
            datasets: [
              {
                label: 'My First dataset',
                fillColor: 'rgba(114,102,186,0.2)',
                strokeColor: 'rgba(114,102,186,1)',
                pointColor: 'rgba(114,102,186,1)',
                pointStrokeColor: '#fff',
                pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(114,102,186,1)',
                data: [65,59,90,81,56,55,40]
              },
              {
                label: 'My Second dataset',
                fillColor: 'rgba(151,187,205,0.2)',
                strokeColor: 'rgba(151,187,205,1)',
                pointColor: 'rgba(151,187,205,1)',
                pointStrokeColor: '#fff',
                pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(151,187,205,1)',
                data: [28,48,40,19,96,27,100]
              }
            ]
          };

          vm.radarOptions = {
            scaleShowLine : true,
            angleShowLineOut : true,
            scaleShowLabels : false,
            scaleBeginAtZero : true,
            angleLineColor : 'rgba(0,0,0,.1)',
            angleLineWidth : 1,
            /*jshint -W109*/
            pointLabelFontFamily : "'Arial'",
            pointLabelFontStyle : 'bold',
            pointLabelFontSize : 10,
            pointLabelFontColor : '#565656',
            pointDot : true,
            pointDotRadius : 3,
            pointDotStrokeWidth : 1,
            pointHitDetectionRadius : 20,
            datasetStroke : true,
            datasetStrokeWidth : 2,
            datasetFill : true
          };
        }
    }
})();

/**=========================================================
 * Module: chart.js
 * Wrapper directive for chartJS. 
 * Based on https://gist.github.com/AndreasHeiberg/9837868
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        /* Aliases for various chart types */
        .directive('linechart',     chartJS('Line')      )
        .directive('barchart',      chartJS('Bar')       )
        .directive('radarchart',    chartJS('Radar')     )
        .directive('polarchart',    chartJS('PolarArea') )
        .directive('piechart',      chartJS('Pie')       )
        .directive('doughnutchart', chartJS('Doughnut')  )
        .directive('donutchart',    chartJS('Doughnut')  )
        ;

    function chartJS(type) {
        return function() {
            return {
                restrict: 'A',
                scope: {
                    data: '=',
                    options: '=',
                    id: '@',
                    width: '=',
                    height: '=',
                    resize: '=',
                    chart: '@',
                    segments: '@',
                    responsive: '=',
                    tooltip: '=',
                    legend: '='
                },
                link: function ($scope, $elem) {
                    var ctx = $elem[0].getContext('2d');
                    var autosize = false;

                    $scope.size = function () {
                        if ($scope.width <= 0) {
                            $elem.width($elem.parent().width());
                            ctx.canvas.width = $elem.width();
                        } else {
                            ctx.canvas.width = $scope.width || ctx.canvas.width;
                            autosize = true;
                        }

                        if($scope.height <= 0){
                            $elem.height($elem.parent().height());
                            ctx.canvas.height = ctx.canvas.width / 2;
                        } else {
                            ctx.canvas.height = $scope.height || ctx.canvas.height;
                            autosize = true;
                        }
                    };

                    $scope.$watch('data', function (newVal) {
                        if(chartCreated)
                            chartCreated.destroy();

                        // if data not defined, exit
                        if (!newVal) {
                            return;
                        }
                        if ($scope.chart) { type = $scope.chart; }

                        if(autosize){
                            $scope.size();
                            chart = new Chart(ctx);
                        }

                        if($scope.responsive || $scope.resize)
                            $scope.options.responsive = true;

                        if($scope.responsive !== undefined)
                            $scope.options.responsive = $scope.responsive;

                        chartCreated = chart[type]($scope.data, $scope.options);
                        chartCreated.update();
                        if($scope.legend)
                            angular.element($elem[0]).parent().after( chartCreated.generateLegend() );
                    }, true);

                    $scope.$watch('tooltip', function (newVal) {
                        if (chartCreated)
                            chartCreated.draw();
                        if(newVal===undefined || !chartCreated.segments)
                            return;
                        if(!isFinite(newVal) || newVal >= chartCreated.segments.length || newVal < 0)
                            return;
                        var activeSegment = chartCreated.segments[newVal];
                        activeSegment.save();
                        activeSegment.fillColor = activeSegment.highlightColor;
                        chartCreated.showTooltip([activeSegment]);
                        activeSegment.restore();
                    }, true);

                    $scope.size();
                    var chart = new Chart(ctx);
                    var chartCreated;
                }
            };
        };
    }
})();





/**=========================================================
 * Module: classy-loader.js
 * Enable use of classyloader directly from data attributes
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .directive('classyloader', classyloader);

    classyloader.$inject = ['$timeout', 'Utils', '$window'];
    function classyloader ($timeout, Utils, $window) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          var $scroller       = $($window),
              inViewFlagClass = 'js-is-in-view'; // a classname to detect when a chart has been triggered after scroll

          // run after interpolation  
          $timeout(function(){
      
            var $element = $(element),
                options  = $element.data();
            
            // At lease we need a data-percentage attribute
            if(options) {
              if( options.triggerInView ) {

                $scroller.scroll(function() {
                  checkLoaderInVIew($element, options);
                });
                // if the element starts already in view
                checkLoaderInVIew($element, options);
              }
              else
                startLoader($element, options);
            }

          }, 0);

          function checkLoaderInVIew(element, options) {
            var offset = -20;
            if( ! element.hasClass(inViewFlagClass) &&
                Utils.isInView(element, {topoffset: offset}) ) {
              startLoader(element, options);
            }
          }
          function startLoader(element, options) {
            element.ClassyLoader(options).addClass(inViewFlagClass);
          }
        }
    }

})();

(function() {
    'use strict';

    angular
        .module('app.charts')
        .service('ChartData', ChartData);

    ChartData.$inject = ['$resource'];
    function ChartData($resource) {
        this.load = load;

        ////////////////
      
        var opts = {
            get: { method: 'GET', isArray: true }
          };
        function load(source) {
          return $resource(source, {}, opts).get();
        }
    }
})();

/**=========================================================
 * Module: flot-chart.js
 * Setup options and data for flot chart directive
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('FlotChartController', FlotChartController);

    FlotChartController.$inject = ['$scope', 'ChartData', '$timeout'];
    function FlotChartController($scope, ChartData, $timeout) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // BAR
          // ----------------------------------- 
          vm.barData = ChartData.load('server/chart/bar.json');
          vm.barOptions = {
              series: {
                  bars: {
                      align: 'center',
                      lineWidth: 0,
                      show: true,
                      barWidth: 0.6,
                      fill: 0.9
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickColor: '#eee'
              },
              shadowSize: 0
          };

          // BAR STACKED
          // ----------------------------------- 
          vm.barStackeData = ChartData.load('server/chart/barstacked.json');
          vm.barStackedOptions = {
              series: {
                  stack: true,
                  bars: {
                      align: 'center',
                      lineWidth: 0,
                      show: true,
                      barWidth: 0.6,
                      fill: 0.9
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 200, // optional: use it for a clear represetation
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickColor: '#eee'
              },
              shadowSize: 0
          };

          // SPLINE
          // ----------------------------------- 
          vm.splineData = ChartData.load('server/chart/spline.json');
          vm.splineOptions = {
              series: {
                  lines: {
                      show: false
                  },
                  points: {
                      show: true,
                      radius: 4
                  },
                  splines: {
                      show: true,
                      tension: 0.4,
                      lineWidth: 1,
                      fill: 0.5
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 150, // optional: use it for a clear represetation
                  tickColor: '#eee',
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickFormatter: function (v) {
                      return v/* + ' visitors'*/;
                  }
              },
              shadowSize: 0
          };

          // AREA
          // ----------------------------------- 
          vm.areaData = ChartData.load('server/chart/area.json');
          vm.areaOptions = {
              series: {
                  lines: {
                      show: true,
                      fill: 0.8
                  },
                  points: {
                      show: true,
                      radius: 4
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  tickColor: '#eee',
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickFormatter: function (v) {
                      return v + ' visitors';
                  }
              },
              shadowSize: 0
          };

          // LINE
          // ----------------------------------- 
          vm.lineData = ChartData.load('server/chart/line.json');
          vm.lineOptions = {
              series: {
                  lines: {
                      show: true,
                      fill: 0.01
                  },
                  points: {
                      show: true,
                      radius: 4
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#eee',
                  mode: 'categories'
              },
              yaxis: {
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickColor: '#eee'
              },
              shadowSize: 0
          };

          // PIE
          // ----------------------------------- 
          vm.pieData = ChartData.load('server/chart/pie.json');
          vm.pieOptions = {
              series: {
                  pie: {
                      show: true,
                      innerRadius: 0,
                      label: {
                          show: true,
                          radius: 0.8,
                          formatter: function (label, series) {
                              return '<div class="flot-pie-label">' +
                              //label + ' : ' +
                              Math.round(series.percent) +
                              '%</div>';
                          },
                          background: {
                              opacity: 0.8,
                              color: '#222'
                          }
                      }
                  }
              }
          };

          // DONUT
          // ----------------------------------- 
          vm.donutData = ChartData.load('server/chart/donut.json');
          vm.donutOptions = {
              series: {
                  pie: {
                      show: true,
                      innerRadius: 0.5 // This makes the donut shape
                  }
              }
          };

          // REALTIME
          // ----------------------------------- 
          vm.realTimeOptions = {
              series: {
                lines: { show: true, fill: true, fillColor:  { colors: ['#a0e0f3', '#23b7e5'] } },
                shadowSize: 0 // Drawing is faster without shadows
              },
              grid: {
                  show:false,
                  borderWidth: 0,
                  minBorderMargin: 20,
                  labelMargin: 10
              },
              xaxis: {
                tickFormatter: function() {
                    return '';
                }
              },
              yaxis: {
                  min: 0,
                  max: 110
              },
              legend: {
                  show: true
              },
              colors: ['#23b7e5']
          };

          // Generate random data for realtime demo
          var data = [], totalPoints = 300;
            
          update();

          function getRandomData() {
            if (data.length > 0)
              data = data.slice(1);
            // Do a random walk
            while (data.length < totalPoints) {
              var prev = data.length > 0 ? data[data.length - 1] : 50,
                y = prev + Math.random() * 10 - 5;
              if (y < 0) {
                y = 0;
              } else if (y > 100) {
                y = 100;
              }
              data.push(y);
            }
            // Zip the generated y values with the x values
            var res = [];
            for (var i = 0; i < data.length; ++i) {
              res.push([i, data[i]]);
            }
            return [res];
          }
          function update() {
            vm.realTimeData = getRandomData();
            $timeout(update, 30);
          }
          // end random data generation


          // PANEL REFRESH EVENTS
          // ----------------------------------- 

          $scope.$on('panel-refresh', function(event, id) {
            
            console.log('Simulating chart refresh during 3s on #'+id);

            // Instead of timeout you can request a chart data
            $timeout(function(){
              
              // directive listen for to remove the spinner 
              // after we end up to perform own operations
              $scope.$broadcast('removeSpinner', id);
              
              console.log('Refreshed #' + id);

            }, 3000);

          });


          // PANEL DISMISS EVENTS
          // ----------------------------------- 

          // Before remove panel
          $scope.$on('panel-remove', function(event, id, deferred){
            
            console.log('Panel #' + id + ' removing');
            
            // Here is obligatory to call the resolve() if we pretend to remove the panel finally
            // Not calling resolve() will NOT remove the panel
            // It's up to your app to decide if panel should be removed or not
            deferred.resolve();
          
          });

          // Panel removed ( only if above was resolved() )
          $scope.$on('panel-removed', function(event, id){

            console.log('Panel #' + id + ' removed');

          });

        }
    }
})();

/**=========================================================
 * Module: flot.js
 * Initializes the Flot chart plugin and handles data refresh
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .directive('flot', flot);

    flot.$inject = ['$http', '$timeout'];
    function flot ($http, $timeout) {

        var directive = {
          restrict: 'EA',
          template: '<div></div>',
          scope: {
            dataset: '=?',
            options: '=',
            series: '=',
            callback: '=',
            src: '='
          },
          link: link
        };
        return directive;

        function link(scope, element, attrs) {
          var height, plot, plotArea, width;
          var heightDefault = 220;

          plot = null;

          width = attrs.width || '100%';
          height = attrs.height || heightDefault;

          plotArea = $(element.children()[0]);
          plotArea.css({
            width: width,
            height: height
          });

          function init() {
            var plotObj;
            if(!scope.dataset || !scope.options) return;
            plotObj = $.plot(plotArea, scope.dataset, scope.options);
            scope.$emit('plotReady', plotObj);
            if (scope.callback) {
              scope.callback(plotObj, scope);
            }

            return plotObj;
          }

          function onDatasetChanged(dataset) {
            if (plot) {
              plot.setData(dataset);
              plot.setupGrid();
              return plot.draw();
            } else {
              plot = init();
              onSerieToggled(scope.series);
              return plot;
            }
          }
          scope.$watchCollection('dataset', onDatasetChanged, true);

          function onSerieToggled (series) {
            if( !plot || !series ) return;
            var someData = plot.getData();
            for(var sName in series) {
              angular.forEach(series[sName], toggleFor(sName));
            }
            
            plot.setData(someData);
            plot.draw();
            
            function toggleFor(sName) {
              return function (s, i){
                if(someData[i] && someData[i][sName])
                  someData[i][sName].show = s;
              };
            }
          }
          scope.$watch('series', onSerieToggled, true);
          
          function onSrcChanged(src) {

            if( src ) {

              $http.get(src)
                .success(function (data) {

                  $timeout(function(){
                    scope.dataset = data;
                  });

              }).error(function(){
                $.error('Flot chart: Bad request.');
              });
              
            }
          }
          scope.$watch('src', onSrcChanged);

        }
    }


})();

/**=========================================================
 * Module: morris.js
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('ChartMorrisController', ChartMorrisController);

    ChartMorrisController.$inject = ['$timeout', 'Colors'];
    function ChartMorrisController($timeout, Colors) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
         vm.chartdata = [
              { y: '2006', a: 100, b: 90 },
              { y: '2007', a: 75,  b: 65 },
              { y: '2008', a: 50,  b: 40 },
              { y: '2009', a: 75,  b: 65 },
              { y: '2010', a: 50,  b: 40 },
              { y: '2011', a: 75,  b: 65 },
              { y: '2012', a: 100, b: 90 }
          ];

          /* test data update
          $timeout(function(){
            vm.chartdata[0].a = 50;
            vm.chartdata[0].b = 50;
          }, 3000); */

          vm.donutdata = [
            {label: 'Download Sales', value: 12},
            {label: 'In-Store Sales',value: 30},
            {label: 'Mail-Order Sales', value: 20}
          ];

          vm.donutOptions = {
            Colors: [ Colors.byName('danger'), Colors.byName('yellow'), Colors.byName('warning') ],
            resize: true
          };

          vm.barOptions = {
            xkey: 'y',
            ykeys: ['a', 'b'],
            labels: ['Series A', 'Series B'],
            xLabelMargin: 2,
            barColors: [ Colors.byName('info'), Colors.byName('danger') ],
            resize: true
          };

          vm.lineOptions = {
            xkey: 'y',
            ykeys: ['a', 'b'],
            labels: ['Serie A', 'Serie B'],
            lineColors: ['#31C0BE', '#7a92a3'],
            resize: true
          };

          vm.areaOptions = {
            xkey: 'y',
            ykeys: ['a', 'b'],
            labels: ['Serie A', 'Serie B'],
            lineColors: [ Colors.byName('purple'), Colors.byName('info') ],
            resize: true
          };

        }
    }
})();

/**=========================================================
 * Module: morris.js
 * AngularJS Directives for Morris Charts
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .directive('morrisBar',   morrisChart('Bar')   )
        .directive('morrisDonut', morrisChart('Donut') )
        .directive('morrisLine',  morrisChart('Line')  )
        .directive('morrisArea',  morrisChart('Area')  );

    function morrisChart(type) {
      return function () {
        return {
          restrict: 'EA',
          scope: {
            morrisData: '=',
            morrisOptions: '='
          },
          link: function($scope, element) {
            // start ready to watch for changes in data
            $scope.$watch('morrisData', function(newVal) {
              if (newVal) {
                $scope.morrisInstance.setData(newVal);
                $scope.morrisInstance.redraw();
              }
            }, true);
            // the element that contains the chart
            $scope.morrisOptions.element = element;
            // If data defined copy to options
            if($scope.morrisData)
              $scope.morrisOptions.data = $scope.morrisData;
            // Init chart
            $scope.morrisInstance = new Morris[type]($scope.morrisOptions);

          }
        };
      };
    }

})();

/**=========================================================
 * Module: rickshaw.js
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('ChartRickshawController', ChartRickshawController);

    function ChartRickshawController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          vm.renderers = [{
                  id: 'area',
                  name: 'Area'
              }, {
                  id: 'line',
                  name: 'Line'
              }, {
                  id: 'bar',
                  name: 'Bar'
              }, {
                  id: 'scatterplot',
                  name: 'Scatterplot'
              }];

          vm.palettes = [
              'spectrum14',
              'spectrum2000',
              'spectrum2001',
              'colorwheel',
              'cool',
              'classic9',
              'munin'
          ];

          vm.rendererChanged = function(id) {
              vm['options' + id] = {
                  renderer: vm['renderer' + id].id
              };
          };

          vm.paletteChanged = function(id) {
              vm['features' + id] = {
                  palette: vm['palette' + id]
              };
          };

          vm.changeSeriesData = function(id) {
              var seriesList = [];
              for (var i = 0; i < 3; i++) {
                  var series = {
                      name: 'Series ' + (i + 1),
                      data: []
                  };
                  for (var j = 0; j < 10; j++) {
                      series.data.push({x: j, y: Math.random() * 20});
                  }
                  seriesList.push(series);
                  vm['series' + id][i] = series;
              }
              //vm['series' + id] = seriesList;
          };

          vm.series0 = [];

          vm.options0 = {
            renderer: 'area'
          };

          vm.renderer0 = vm.renderers[0];
          vm.palette0 = vm.palettes[0];

          vm.rendererChanged(0);
          vm.paletteChanged(0);
          vm.changeSeriesData(0);  

          // Graph 2

          var seriesData = [ [], [], [] ];
          var random = new Rickshaw.Fixtures.RandomData(150);

          for (var i = 0; i < 150; i++) {
            random.addData(seriesData);
          }

          vm.series2 = [
            {
              color: '#c05020',
              data: seriesData[0],
              name: 'New York'
            }, {
              color: '#30c020',
              data: seriesData[1],
              name: 'London'
            }, {
              color: '#6060c0',
              data: seriesData[2],
              name: 'Tokyo'
            }
          ];

          vm.options2 = {
            renderer: 'area'
          };

        }
    }
})();

/**=========================================================
 * Module: sparkline.js
 * SparkLines Mini Charts
 =========================================================*/
 
(function() {
    'use strict';

    angular
        .module('app.charts')
        .directive('sparkline', sparkline);

    function sparkline () {
        var directive = {
            restrict: 'EA',
            scope: {
              'sparkline': '='
            },
            controller: Controller
        };
        return directive;

    }
    Controller.$inject = ['$scope', '$element', '$timeout', '$window'];
    function Controller($scope, $element, $timeout, $window) {
      var runSL = function(){
        initSparLine();
      };

      $timeout(runSL);
  
      function initSparLine() {
        var options = $scope.sparkline,
            data = $element.data();
        
        if(!options) // if no scope options, try with data attributes
          options = data;
        else
          if(data) // data attributes overrides scope options
            options = angular.extend({}, options, data);

        options.type = options.type || 'bar'; // default chart is bar
        options.disableHiddenCheck = true;

        $element.sparkline('html', options);

        if(options.resize) {
          $($window).resize(function(){
            $element.sparkline('html', options);
          });
        }
      }

    }
    

})();

(function() {
    'use strict';

    angular
        .module('app.colors')
        .constant('APP_COLORS', {
          'primary':                '#5d9cec',
          'success':                '#27c24c',
          'info':                   '#23b7e5',
          'warning':                '#ff902b',
          'danger':                 '#f05050',
          'inverse':                '#131e26',
          'green':                  '#37bc9b',
          'pink':                   '#f532e5',
          'purple':                 '#7266ba',
          'dark':                   '#3a3f51',
          'yellow':                 '#fad732',
          'gray-darker':            '#232735',
          'gray-dark':              '#3a3f51',
          'gray':                   '#dde6e9',
          'gray-light':             '#e4eaec',
          'gray-lighter':           '#edf1f2'
        })
        ;
})();
/**=========================================================
 * Module: colors.js
 * Services to retrieve global colors
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.colors')
        .service('Colors', Colors);

    Colors.$inject = ['APP_COLORS'];
    function Colors(APP_COLORS) {
        this.byName = byName;

        ////////////////

        function byName(name) {
          return (APP_COLORS[name] || '#fff');
        }
    }

})();

(function() {
    'use strict';

    angular
        .module('app.core')
        .config(coreConfig);

    coreConfig.$inject = ['$controllerProvider', '$compileProvider', '$filterProvider', '$provide', '$httpProvider'];
    function coreConfig($controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider){
      
      var core = angular.module('app.core');
      // registering components after bootstrap
      core.controller = $controllerProvider.register;
      core.directive  = $compileProvider.directive;
      core.filter     = $filterProvider.register;
      core.factory    = $provide.factory;
      core.service    = $provide.service;
      core.constant   = $provide.constant;
      core.value      = $provide.value;

      $httpProvider.defaults.useXDomain = true;
      delete $httpProvider.defaults.headers.common['X-Requested-With'];
      $httpProvider.interceptors.push('authInterceptorService');

    }

})();
/**=========================================================
 * Module: constants.js
 * Define constants to inject across the application
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.core')
        .constant('APP_MEDIAQUERY', {
          'desktopLG':             1200,
          'desktop':                992,
          'tablet':                 768,
          'mobile':                 480
        })
      ;

})();
(function() {
    'use strict';

    angular
        .module('app.core')
        .run(appRun);

    appRun.$inject = ['$rootScope', '$state', '$stateParams',  '$window', '$templateCache', 'Colors', '$localStorage', 'permissions','$location'];
    
    function appRun($rootScope, $state, $stateParams, $window, $templateCache, Colors, $localStorage, permissions,$location) {
      // if(!$localStorage.loginUserInfo)
      //     return $location.path('/page/login');
      //判断是否已经登陆，初始化权限列表
      if($localStorage.isAuthenticated){
          permissions.setPermissions($localStorage.loginUserInfo.permissions);
      }else{
          $localStorage.false;
          $state.go('page.login');
      }

      // Set reference to access them from any scope
      $rootScope.$state = $state;
      $rootScope.$stateParams = $stateParams;
      $rootScope.$storage = $window.localStorage;

      // Uncomment this to disable template cache
      /*$rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
          if (typeof(toState) !== 'undefined'){
            $templateCache.remove(toState.templateUrl);
          }
      });*/

      // Allows to use branding color with interpolation
      // {{ colorByName('primary') }}
      $rootScope.colorByName = Colors.byName;

      // cancel click event easily
      $rootScope.cancel = function($event) {
        $event.stopPropagation();
      };

      // Hooks Example
      // ----------------------------------- 

      // Hook not found
      $rootScope.$on('$stateNotFound',
        function(event, unfoundState/*, fromState, fromParams*/) {
            console.log(unfoundState.to); // "lazy.state"
            console.log(unfoundState.toParams); // {a:1, b:2}
            console.log(unfoundState.options); // {inherit:false} + default options
        });
      // Hook error
      $rootScope.$on('$stateChangeError',
        function(event, toState, toParams, fromState, fromParams, error){
          console.log(error);
        });
      // Hook success
      $rootScope.$on('$stateChangeSuccess',
        function(/*event, toState, toParams, fromState, fromParams*/) {
          // display new view from top
          $window.scrollTo(0, 0);
          // Save the route title
          $rootScope.currTitle = $state.current.title;
        });

      // Load a title dynamically
      $rootScope.currTitle = $state.current.title;
      $rootScope.pageTitle = function() {
        var title = $rootScope.app.name + ' - ' + ($rootScope.currTitle || $rootScope.app.description);
        document.title = title;
        return title;
      };

    }

})();


(function() {
    'use strict';

    angular
        .module('app.dashboard')
        .controller('DashboardController', DashboardController);

    DashboardController.$inject = ['$scope', 'ChartData', '$timeout'];
    function DashboardController($scope, ChartData, $timeout) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // SPLINE
          // ----------------------------------- 
          vm.splineData = ChartData.load('server/chart/spline.json');
          vm.splineOptions = {
              series: {
                  lines: {
                      show: false
                  },
                  points: {
                      show: true,
                      radius: 4
                  },
                  splines: {
                      show: true,
                      tension: 0.4,
                      lineWidth: 1,
                      fill: 0.5
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 150, // optional: use it for a clear represetation
                  tickColor: '#eee',
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickFormatter: function (v) {
                      return v/* + ' visitors'*/;
                  }
              },
              shadowSize: 0
          };


          // PANEL REFRESH EVENTS
          // ----------------------------------- 

          $scope.$on('panel-refresh', function(event, id) {
            
            console.log('Simulating chart refresh during 3s on #'+id);

            // Instead of timeout you can request a chart data
            $timeout(function(){
              
              // directive listen for to remove the spinner 
              // after we end up to perform own operations
              $scope.$broadcast('removeSpinner', id);
              
              console.log('Refreshed #' + id);

            }, 3000);

          });


          // PANEL DISMISS EVENTS
          // ----------------------------------- 

          // Before remove panel
          $scope.$on('panel-remove', function(event, id, deferred){
            
            console.log('Panel #' + id + ' removing');
            
            // Here is obligatory to call the resolve() if we pretend to remove the panel finally
            // Not calling resolve() will NOT remove the panel
            // It's up to your app to decide if panel should be removed or not
            deferred.resolve();
          
          });

          // Panel removed ( only if above was resolved() )
          $scope.$on('panel-removed', function(event, id){

            console.log('Panel #' + id + ' removed');

          });

        }
    }
})();
(function() {
    'use strict';

    angular
        .module('app.dashboard')
        .controller('DashboardV2Controller', DashboardV2Controller);

    DashboardV2Controller.$inject = ['$rootScope', '$scope', '$state'];
    function DashboardV2Controller($rootScope, $scope, $state) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          
          // Change layout mode
          if( $state.includes('app-h') ) {
            // Setup layout horizontal for demo
            $rootScope.app.layout.horizontal = true;
            $scope.$on('$destroy', function(){
                $rootScope.app.layout.horizontal = false;
            });            
          }
          else {
            $rootScope.app.layout.isCollapsed = true;
          }

          // BAR STACKED
          // ----------------------------------- 
          vm.barStackedOptions = {
              series: {
                  stack: true,
                  bars: {
                      align: 'center',
                      lineWidth: 0,
                      show: true,
                      barWidth: 0.6,
                      fill: 0.9
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 200, // optional: use it for a clear represetation
                  position: ($rootScope.app.layout.isRTL ? 'right' : 'left'),
                  tickColor: '#eee'
              },
              shadowSize: 0
          };

          // SPLINE
          // ----------------------------------- 

          vm.splineOptions = {
              series: {
                  lines: {
                      show: false
                  },
                  points: {
                      show: true,
                      radius: 4
                  },
                  splines: {
                      show: true,
                      tension: 0.4,
                      lineWidth: 1,
                      fill: 0.5
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 150, // optional: use it for a clear represetation
                  tickColor: '#eee',
                  position: ($rootScope.app.layout.isRTL ? 'right' : 'left'),
                  tickFormatter: function (v) {
                      return v/* + ' visitors'*/;
                  }
              },
              shadowSize: 0
          };
        }
    }
})();
(function() {
    'use strict';

    angular
        .module('app.dashboard')
        .controller('DashboardV3Controller', DashboardV3Controller);

    DashboardV3Controller.$inject = ['$rootScope'];
    function DashboardV3Controller($rootScope) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // SPLINE
          // ----------------------------------- 

          vm.splineOptions = {
              series: {
                  lines: {
                      show: false
                  },
                  points: {
                      show: true,
                      radius: 4
                  },
                  splines: {
                      show: true,
                      tension: 0.4,
                      lineWidth: 1,
                      fill: 0.5
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 150, // optional: use it for a clear represetation
                  tickColor: '#eee',
                  position: ($rootScope.app.layout.isRTL ? 'right' : 'left'),
                  tickFormatter: function (v) {
                      return v/* + ' visitors'*/;
                  }
              },
              shadowSize: 0
          };


          vm.seriesData = {
            'CA': 11100,   // Canada
            'DE': 2510,    // Germany
            'FR': 3710,    // France
            'AU': 5710,    // Australia
            'GB': 8310,    // Great Britain
            'RU': 9310,    // Russia
            'BR': 6610,    // Brazil
            'IN': 7810,    // India
            'CN': 4310,    // China
            'US': 839,     // USA
            'SA': 410      // Saudi Arabia
          };
          
          vm.markersData = [
            { latLng:[41.90, 12.45],  name:'Vatican City'          },
            { latLng:[43.73, 7.41],   name:'Monaco'                },
            { latLng:[-0.52, 166.93], name:'Nauru'                 },
            { latLng:[-8.51, 179.21], name:'Tuvalu'                },
            { latLng:[7.11,171.06],   name:'Marshall Islands'      },
            { latLng:[17.3,-62.73],   name:'Saint Kitts and Nevis' },
            { latLng:[3.2,73.22],     name:'Maldives'              },
            { latLng:[35.88,14.5],    name:'Malta'                 },
            { latLng:[41.0,-71.06],   name:'New England'           },
            { latLng:[12.05,-61.75],  name:'Grenada'               },
            { latLng:[13.16,-59.55],  name:'Barbados'              },
            { latLng:[17.11,-61.85],  name:'Antigua and Barbuda'   },
            { latLng:[-4.61,55.45],   name:'Seychelles'            },
            { latLng:[7.35,134.46],   name:'Palau'                 },
            { latLng:[42.5,1.51],     name:'Andorra'               }
          ];
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.elements')
        .controller('AngularCarouselController', AngularCarouselController);

    function AngularCarouselController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.colors = ['#fc0003', '#f70008', '#f2000d', '#ed0012', '#e80017', '#e3001c', '#de0021', '#d90026', '#d4002b', '#cf0030', '#c90036', '#c4003b', '#bf0040', '#ba0045', '#b5004a', '#b0004f', '#ab0054', '#a60059', '#a1005e', '#9c0063', '#960069', '#91006e', '#8c0073', '#870078', '#82007d', '#7d0082', '#780087', '#73008c', '#6e0091', '#690096', '#63009c', '#5e00a1', '#5900a6', '#5400ab', '#4f00b0', '#4a00b5', '#4500ba', '#4000bf', '#3b00c4', '#3600c9', '#3000cf', '#2b00d4', '#2600d9', '#2100de', '#1c00e3', '#1700e8', '#1200ed', '#0d00f2', '#0800f7', '#0300fc'];

          function getSlide(target, style) {
              var i = target.length;
              return {
                  id: (i + 1),
                  label: 'slide #' + (i + 1),
                  img: 'http://lorempixel.com/1200/500/' + style + '/' + ((i + 1) % 10) ,
                  color: vm.colors[ (i*10) % vm.colors.length],
                  odd: (i % 2 === 0)
              };
          }

          function addSlide(target, style) {
              target.push(getSlide(target, style));
          }

          vm.carouselIndex = 3;
          vm.carouselIndex2 = 0;
          vm.carouselIndex2 = 1;
          vm.carouselIndex3 = 5;
          vm.carouselIndex4 = 5;

          function addSlides(target, style, qty) {
              for (var i=0; i < qty; i++) {
                  addSlide(target, style);
              }
          }

          // 1st ngRepeat demo
          vm.slides = [];
          addSlides(vm.slides, 'sports', 50);

          // 2nd ngRepeat demo
          vm.slides2 = [];
          addSlides(vm.slides2, 'sports', 10);

          // 3rd ngRepeat demo
          vm.slides3 = [];
          addSlides(vm.slides3, 'people', 50);

          // 4th ngRepeat demo
          vm.slides4 = [];
          addSlides(vm.slides4, 'city', 50);


          // 5th ngRepeat demo
          vm.slides6 = [];
          vm.carouselIndex6 = 0;
          addSlides(vm.slides6, 'sports', 10);
          vm.addSlide = function(at) {
              if(at==='head') {
                  vm.slides6.unshift(getSlide(vm.slides6, 'people'));
              } else {
                  vm.slides6.push(getSlide(vm.slides6, 'people'));
              }
          };
        }
    }
})();

/**=========================================================
 * Module: demo-dialog.js
 * Demo for multiple ngDialog Usage
 * - ngDialogProvider for default values not supported 
 *   using lazy loader. Include plugin in base.js instead.
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.elements')
        .controller('DialogIntroCtrl', DialogIntroCtrl)
        .controller('DialogMainCtrl', DialogMainCtrl)
        .controller('InsideCtrl', InsideCtrl)
        .controller('SecondModalCtrl', SecondModalCtrl);

    DialogIntroCtrl.$inject = ['$scope', 'ngDialog', 'tpl'];
    // Called from the route state. 'tpl' is resolved before
    function DialogIntroCtrl($scope, ngDialog, tpl) {
        
        activate();

        ////////////////

        function activate() {
          // share with other controllers
          $scope.tpl = tpl;
          // open dialog window
          ngDialog.open({
            template: tpl.path,
            // plain: true,
            className: 'ngdialog-theme-default'
          });
        }
    }

    DialogMainCtrl.$inject = ['$scope', '$rootScope', 'ngDialog'];
    // Loads from view
    function DialogMainCtrl($scope, $rootScope, ngDialog) {

        activate();

        ////////////////

        function activate() {
          $rootScope.jsonData = '{"foo": "bar"}';
          $rootScope.theme = 'ngdialog-theme-default';

          $scope.directivePreCloseCallback = function (value) {
            if(confirm('Close it? MainCtrl.Directive. (Value = ' + value + ')')) {
              return true;
            }
            return false;
          };

          $scope.preCloseCallbackOnScope = function (value) {
            if(confirm('Close it? MainCtrl.OnScope (Value = ' + value + ')')) {
              return true;
            }
            return false;
          };

          $scope.open = function () {
            ngDialog.open({ template: 'firstDialogId', controller: 'InsideCtrl', data: {foo: 'some data'} });
          };

          $scope.openDefault = function () {
            ngDialog.open({
              template: 'firstDialogId',
              controller: 'InsideCtrl',
              className: 'ngdialog-theme-default'
            });
          };

          $scope.openDefaultWithPreCloseCallbackInlined = function () {
            ngDialog.open({
              template: 'firstDialogId',
              controller: 'InsideCtrl',
              className: 'ngdialog-theme-default',
              preCloseCallback: function(value) {
                if (confirm('Close it?  (Value = ' + value + ')')) {
                  return true;
                }
                return false;
              }
            });
          };

          $scope.openConfirm = function () {
            ngDialog.openConfirm({
              template: 'modalDialogId',
              className: 'ngdialog-theme-default'
            }).then(function (value) {
              console.log('Modal promise resolved. Value: ', value);
            }, function (reason) {
              console.log('Modal promise rejected. Reason: ', reason);
            });
          };

          $scope.openConfirmWithPreCloseCallbackOnScope = function () {
            ngDialog.openConfirm({
              template: 'modalDialogId',
              className: 'ngdialog-theme-default',
              preCloseCallback: 'preCloseCallbackOnScope',
              scope: $scope
            }).then(function (value) {
              console.log('Modal promise resolved. Value: ', value);
            }, function (reason) {
              console.log('Modal promise rejected. Reason: ', reason);
            });
          };

          $scope.openConfirmWithPreCloseCallbackInlinedWithNestedConfirm = function () {
            ngDialog.openConfirm({
              template: 'dialogWithNestedConfirmDialogId',
              className: 'ngdialog-theme-default',
              preCloseCallback: function(/*value*/) {

                var nestedConfirmDialog = ngDialog.openConfirm({
                  template:
                      '<p>Are you sure you want to close the parent dialog?</p>' +
                      '<div>' +
                        '<button type="button" class="btn btn-default" ng-click="closeThisDialog(0)">No' +
                        '<button type="button" class="btn btn-primary" ng-click="confirm(1)">Yes' +
                      '</button></div>',
                  plain: true,
                  className: 'ngdialog-theme-default'
                });

                return nestedConfirmDialog;
              },
              scope: $scope
            })
            .then(function(value){
              console.log('resolved:' + value);
              // Perform the save here
            }, function(value){
              console.log('rejected:' + value);

            });
          };

          $scope.openInlineController = function () {
            $rootScope.theme = 'ngdialog-theme-default';

            ngDialog.open({
              template: 'withInlineController',
              controller: ['$scope', '$timeout', function ($scope, $timeout) {
                var counter = 0;
                var timeout;
                function count() {
                  $scope.exampleExternalData = 'Counter ' + (counter++);
                  timeout = $timeout(count, 450);
                }
                count();
                $scope.$on('$destroy', function () {
                  $timeout.cancel(timeout);
                });
              }],
              className: 'ngdialog-theme-default'
            });
          };

          $scope.openTemplate = function () {
            $scope.value = true;

            ngDialog.open({
              template: $scope.tpl.path,
              className: 'ngdialog-theme-default',
              scope: $scope
            });
          };

          $scope.openTemplateNoCache = function () {
            $scope.value = true;

            ngDialog.open({
              template: $scope.tpl.path,
              className: 'ngdialog-theme-default',
              scope: $scope,
              cache: false
            });
          };

          $scope.openTimed = function () {
            var dialog = ngDialog.open({
              template: '<p>Just passing through!</p>',
              plain: true,
              closeByDocument: false,
              closeByEscape: false
            });
            setTimeout(function () {
              dialog.close();
            }, 2000);
          };

          $scope.openNotify = function () {
            var dialog = ngDialog.open({
              template:
                '<p>You can do whatever you want when I close, however that happens.</p>' +
                '<div><button type="button" class="btn btn-primary" ng-click="closeThisDialog(1)">Close Me</button></div>',
              plain: true
            });
            dialog.closePromise.then(function (data) {
              console.log('ngDialog closed' + (data.value === 1 ? ' using the button' : '') + ' and notified by promise: ' + data.id);
            });
          };

          $scope.openWithoutOverlay = function () {
            ngDialog.open({
              template: '<h2>Notice that there is no overlay!</h2>',
              className: 'ngdialog-theme-default',
              plain: true,
              overlay: false
            });
          };

          $rootScope.$on('ngDialog.opened', function (e, $dialog) {
            console.log('ngDialog opened: ' + $dialog.attr('id'));
          });

          $rootScope.$on('ngDialog.closed', function (e, $dialog) {
            console.log('ngDialog closed: ' + $dialog.attr('id'));
          });

          $rootScope.$on('ngDialog.closing', function (e, $dialog) {
            console.log('ngDialog closing: ' + $dialog.attr('id'));
          });
        }
    
    } // DialogMainCtrl


    InsideCtrl.$inject = ['$scope', 'ngDialog'];
    function InsideCtrl($scope, ngDialog) {

        activate();

        ////////////////

        function activate() {
          $scope.dialogModel = {
            message : 'message from passed scope'
          };
          $scope.openSecond = function () {
            ngDialog.open({
              template: '<p class="lead m0"><a href="" ng-click="closeSecond()">Close all by click here!</a></h3>',
              plain: true,
              closeByEscape: false,
              controller: 'SecondModalCtrl'
            });
          };
        }
    }

    SecondModalCtrl.$inject = ['$scope', 'ngDialog'];
    function SecondModalCtrl($scope, ngDialog) {

        activate();

        ////////////////

        function activate() {
          $scope.closeSecond = function () {
            ngDialog.close();
          };
        }

    }


})();




/**=========================================================
 * Module: calendar-ui.js
 * This script handle the calendar demo with draggable 
 * events and events creations
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.elements')
        .controller('InfiniteScrollController', InfiniteScrollController)
        .factory('datasource', datasource);

    function InfiniteScrollController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.images = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

          vm.loadMore = function() {
            var last = vm.images[vm.images.length - 1];
            for(var i = 1; i <= 10; i++) {
              vm.images.push(last + i);
            }
          };
        }
    }
    
    datasource.$inject = ['$log', '$timeout'];
    function datasource(console, $timeout) {

        var get = function(index, count, success) {
            return $timeout(function() {
                var i, result, _i, _ref;
                result = [];
                for (i = _i = index, _ref = index + count - 1; index <= _ref ? _i <= _ref : _i >= _ref; i = index <= _ref ? ++_i : --_i) {
                    result.push('item #' + i);
                }
                return success(result);
            }, 100);
        };
        return {
            get: get
        };
    }

})();

/**=========================================================
 * Module: masonry-deck.js
 * Demo for Angular Deck
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.elements')
        .controller('MasonryDeckController', MasonryDeckController)
        .directive('imageloaded', imageloaded); // required by demo

    MasonryDeckController.$inejct = ['RouteHelpers'];
    function MasonryDeckController(RouteHelpers) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          vm.basepath = RouteHelpers.basepath;

          vm.photos = [
              {id: 'photo-1', name: 'Awesome photo', src: 'http://lorempixel.com/400/300/abstract'},
              {id: 'photo-2', name: 'Great photo', src: 'http://lorempixel.com/450/400/city'},
              {id: 'photo-3', name: 'Strange photo', src: 'http://lorempixel.com/400/300/people'},
              {id: 'photo-4', name: 'A photo?', src: 'http://lorempixel.com/400/300/transport'},
              {id: 'photo-5', name: 'What a photo', src: 'http://lorempixel.com/450/300/fashion'},
              {id: 'photo-6', name: 'Silly photo', src: 'http://lorempixel.com/400/300/technics'},
              {id: 'photo-7', name: 'Weird photo', src: 'http://lorempixel.com/410/350/sports'},
              {id: 'photo-8', name: 'Modern photo', src: 'http://lorempixel.com/400/300/nightlife'},
              {id: 'photo-9', name: 'Classical photo', src: 'http://lorempixel.com/400/300/nature'},
              {id: 'photo-10', name: 'Dynamic photo', src: 'http://lorempixel.com/420/300/abstract'},
              {id: 'photo-11', name: 'Neat photo', src: 'http://lorempixel.com/400/300/sports'},
              {id: 'photo-12', name: 'Bumpy photo', src: 'http://lorempixel.com/400/300/nightlife'},
              {id: 'photo-13', name: 'Brilliant photo', src: 'http://lorempixel.com/400/380/nature'},
              {id: 'photo-14', name: 'Excellent photo', src: 'http://lorempixel.com/480/300/technics'},
              {id: 'photo-15', name: 'Gorgeous photo', src: 'http://lorempixel.com/400/300/sports'},
              {id: 'photo-16', name: 'Lovely photo', src: 'http://lorempixel.com/400/300/nightlife'},
              {id: 'photo-17', name: 'A "wow" photo', src: 'http://lorempixel.com/400/300/nature'},
              {id: 'photo-18', name: 'Bodacious photo', src: 'http://lorempixel.com/400/300/abstract'}
          ];
        }
    }
    MasonryDeckController.$inject = ["RouteHelpers"];

    // Add class to img element when source is loaded
    function imageloaded () {
        // Copyright(c) 2013 André König <akoenig@posteo.de>
        // MIT Licensed
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs) {
          var cssClass = attrs.loadedclass;

          element.bind('load', function () {
              angular.element(element).addClass(cssClass);
          });
        }
    }

})();



/**=========================================================
 * Module: access-login.js
 * Demo for login api
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.elements')
        .controller('AbnTestController', AbnTestController);

    AbnTestController.$inject = ['$timeout', '$resource'];
    function AbnTestController($timeout, $resource) {
        var vm = this;

        activate();

        ////////////////

        /*jshint -W106*/
        function activate() {
          vm.my_tree_handler = function(branch) {

            vm.output = 'You selected: ' + branch.label;

            if (branch.data && branch.data.description) {
              vm.output += '(' + branch.data.description + ')';
              return vm.output;
            }
          };

          // onSelect event handlers
          var apple_selected = function(branch) {
            vm.output = 'APPLE! : ' + branch.label;
            return vm.output;
          };

          var treedata_avm = [
            {
              label: 'Animal',
              children: [
                {
                  label: 'Dog',
                  data: {
                    description: 'man\'s best friend'
                  }
                }, {
                  label: 'Cat',
                  data: {
                    description: 'Felis catus'
                  }
                }, {
                  label: 'Hippopotamus',
                  data: {
                    description: 'hungry, hungry'
                  }
                }, {
                  label: 'Chicken',
                  children: ['White Leghorn', 'Rhode Island Red', 'Jersey Giant']
                }
              ]
            }, {
              label: 'Vegetable',
              data: {
                definition: 'A plant or part of a plant used as food, typically as accompaniment to meat or fish, such as a cabbage, potato, carrot, or bean.',
                data_can_contain_anything: true
              },
              onSelect: function(branch) {
                vm.output = 'Vegetable: ' + branch.data.definition;
                return vm.output;
              },
              children: [
                {
                  label: 'Oranges'
                }, {
                  label: 'Apples',
                  children: [
                    {
                      label: 'Granny Smith',
                      onSelect: apple_selected
                    }, {
                      label: 'Red Delicous',
                      onSelect: apple_selected
                    }, {
                      label: 'Fuji',
                      onSelect: apple_selected
                    }
                  ]
                }
              ]
            }, {
              label: 'Mineral',
              children: [
                {
                  label: 'Rock',
                  children: ['Igneous', 'Sedimentary', 'Metamorphic']
                }, {
                  label: 'Metal',
                  children: ['Aluminum', 'Steel', 'Copper']
                }, {
                  label: 'Plastic',
                  children: [
                    {
                      label: 'Thermoplastic',
                      children: ['polyethylene', 'polypropylene', 'polystyrene', ' polyvinyl chloride']
                    }, {
                      label: 'Thermosetting Polymer',
                      children: ['polyester', 'polyurethane', 'vulcanized rubber', 'bakelite', 'urea-formaldehyde']
                    }
                  ]
                }
              ]
            }
          ];
          
          var treedata_geography = [
            {
              label: 'North America',
              children: [
                {
                  label: 'Canada',
                  children: ['Toronto', 'Vancouver']
                }, {
                  label: 'USA',
                  children: ['New York', 'Los Angeles']
                }, {
                  label: 'Mexico',
                  children: ['Mexico City', 'Guadalajara']
                }
              ]
            }, {
              label: 'South America',
              children: [
                {
                  label: 'Venezuela',
                  children: ['Caracas', 'Maracaibo']
                }, {
                  label: 'Brazil',
                  children: ['Sao Paulo', 'Rio de Janeiro']
                }, {
                  label: 'Argentina',
                  children: ['Buenos Aires', 'Cordoba']
                }
              ]
            }
          ];

          vm.my_data = treedata_avm;
          vm.try_changing_the_tree_data = function() {
            if (vm.my_data === treedata_avm) {
              vm.my_data = treedata_geography;
            } else {
              vm.my_data = treedata_avm;
            }
            return vm.my_data;
          };
          
          var tree;
          // This is our API control variable
          vm.my_tree = tree = {};
          vm.try_async_load = function() {
            
            vm.my_data = [];
            vm.doing_async = true;
            
            // Request tree data via $resource
            var remoteTree = $resource('server/treedata.json');
            
            return remoteTree.get(function(res){
              
              vm.my_data = res.data;

              vm.doing_async = false;
            
              return tree.expand_all();
            
            // we must return a promise so the plugin 
            // can watch when it's resolved
            }).$promise;
          };
          
          // Adds a new branch to the tree
          vm.try_adding_a_branch = function() {
            var b;
            b = tree.get_selected_branch();
            return tree.add_branch(b, {
              label: 'New Branch',
              data: {
                something: 42,
                'else': 43
              }
            });
          };

        }
    }
})();


/**=========================================================
 * Module: nestable.js
 * Nestable controller
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.elements')
        .controller('NestableController', NestableController);

    function NestableController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.items =  [
            {
              item: {text: 'a'},
              children: []
            },
            {
              item: {text: 'b'},
              children: [
                {
                  item: {text: 'c'},
                  children: []
                },
                {
                  item: {text: 'd'},
                  children: []
                }
              ]
            },
            {
              item: {text: 'e'},
              children: []
            },
            {
              item: {text: 'f'},
              children: []
            }
          ];

          vm.items2 =  [
            {
              item: {text: '1'},
              children: []
            },
            {
              item: {text: '2'},
              children: [
                {
                  item: {text: '3'},
                  children: []
                },
                {
                  item: {text: '4'},
                  children: []
                }
              ]
            },
            {
              item: {text: '5'},
              children: []
            },
            {
              item: {text: '6'},
              children: []
            }
          ];

        }
    }
})();

/**=========================================================
 * Module: scroll.js
 * Make a content box scrollable
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.elements')
        .directive('scrollable', scrollable);

    function scrollable () {
        var directive = {
            link: link,
            restrict: 'EA'
        };
        return directive;

        function link(scope, element, attrs) {
          var defaultHeight = 250;
          element.slimScroll({
              height: (attrs.height || defaultHeight)
          });
        }
    }

})();

/**=========================================================
 * Module: sortable.js
 * Sortable controller
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.elements')
        .controller('SortableController', SortableController);

    SortableController.$inject = ['$scope'];
    function SortableController($scope) {
        // doesn't support controllerAs syntax https://github.com/voidberg/html5sortable/issues/86

        activate();

        ////////////////

        function activate() {
          // Single List
          $scope.data1 = [
            { id: 1, name: 'Donald Hoffman' },
            { id: 2, name: 'Wallace Barrett' },
            { id: 3, name: 'Marsha Hicks' },
            { id: 4, name: 'Roland Brown' }
          ];

          $scope.add = function () {
            $scope.data1.push({id: $scope.data1.length + 1, name: 'Earl Knight'});
          };

          $scope.sortableCallback = function (sourceModel, destModel, start, end) {
            console.log(start + ' -> ' + end);
          };
          
          $scope.sortableOptions = {
              placeholder: '<div class="box-placeholder p0 m0"><div></div></div>',
              forcePlaceholderSize: true
          };
        }
    }

})();

/**=========================================================
 * Module: sweetalert.js
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.elements')
        .controller('SweetAlertController', SweetAlertController);

    SweetAlertController.$inject = ['SweetAlert'];
    function SweetAlertController(SweetAlert) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.demo1 = function() {
            SweetAlert.swal('Here\'s a message');
          };

          vm.demo2 = function() {
            SweetAlert.swal('Here\'s a message!', 'It\'s pretty, isn\'t it?');
          };

          vm.demo3 = function() {
            SweetAlert.swal('Good job!', 'You clicked the button!', 'success');
          };

          vm.demo4 = function() {
            SweetAlert.swal({   
              title: 'Are you sure?',   
              text: 'Your will not be able to recover this imaginary file!',   
              type: 'warning',   
              showCancelButton: true,   
              confirmButtonColor: '#DD6B55',   
              confirmButtonText: 'Yes, delete it!',
              closeOnConfirm: false
            },  function(){  
              SweetAlert.swal('Booyah!');
            });
          };

          vm.demo5 = function() {
            SweetAlert.swal({   
              title: 'Are you sure?',   
              text: 'Your will not be able to recover this imaginary file!',   
              type: 'warning',   
              showCancelButton: true,   
              confirmButtonColor: '#DD6B55',   
              confirmButtonText: 'Yes, delete it!',   
              cancelButtonText: 'No, cancel plx!',   
              closeOnConfirm: false,   
              closeOnCancel: false 
            }, function(isConfirm){  
              if (isConfirm) {     
                SweetAlert.swal('Deleted!', 'Your imaginary file has been deleted.', 'success');   
              } else {     
                SweetAlert.swal('Cancelled', 'Your imaginary file is safe :)', 'error');   
              } 
            });
          };

          vm.demo6 = function() {
            SweetAlert.swal({   
              title: 'Sweet!',   
              text: 'Here\'s a custom image.',   
              imageUrl: 'http://oitozero.com/img/avatar.jpg' 
            });
          };
        }
    }
})();

/**=========================================================
 * Module: demo-toaster.js
 * Demos for toaster notifications
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.elements')
        .controller('ToasterDemoCtrl', ToasterDemoCtrl);

    ToasterDemoCtrl.$inject = ['toaster'];
    function ToasterDemoCtrl(toaster) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.toaster = {
              type:  'success',
              title: 'Title',
              text:  'Message'
          };

          vm.pop = function() {
            toaster.pop(vm.toaster.type, vm.toaster.title, vm.toaster.text);
          };
        }
    }
})();

/**=========================================================
 * Module: tour.js
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.elements')
        .controller('TourCtrl', TourCtrl);

    TourCtrl.$inject = ['$scope'];
    function TourCtrl($scope) {

        activate();

        ////////////////

        function activate() {
          // BootstrapTour is not compatible with z-index based layout
          // so adding position:static for this case makes the browser
          // to ignore the property
          var section = angular.element('.wrapper > section');
          section.css({'position': 'static'});
          // finally restore on destroy and reuse the value declared in stylesheet
          $scope.$on('$destroy', function(){
            section.css({'position': ''});
          });
        }
    }
})();

/**=========================================================
 * Module: article.js
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.extras')
        .controller('ArticleController', ArticleController);

    function ArticleController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.htmlContent = 'Article content...';

          vm.postDemo = {};
          vm.postDemo.tags = ['coding', 'less'];
          vm.availableTags = ['coding', 'less', 'sass', 'angularjs', 'node', 'expressJS'];
          vm.postDemo.categories = ['JAVASCRIPT','WEB'];
          vm.availableCategories = ['JAVASCRIPT','WEB', 'BOOTSTRAP', 'SERVER', 'HTML5', 'CSS'];

          vm.reviewers = [
            { name: 'Adam',      email: 'adam@email.com',      age: 10 },
            { name: 'Amalie',    email: 'amalie@email.com',    age: 12 },
            { name: 'Wladimir',  email: 'wladimir@email.com',  age: 30 },
            { name: 'Samantha',  email: 'samantha@email.com',  age: 31 },
            { name: 'Estefanía', email: 'estefanía@email.com', age: 16 },
            { name: 'Natasha',   email: 'natasha@email.com',   age: 54 },
            { name: 'Nicole',    email: 'nicole@email.com',    age: 43 },
            { name: 'Adrian',    email: 'adrian@email.com',    age: 21 }
          ];


          vm.alerts = [
            { type: 'info', msg: 'There is an autosaved version of this article that is more recent than the version below. <a href="#" class="text-white">Restore</a>' }
          ];

          vm.closeAlert = function(index) {
            vm.alerts.splice(index, 1);
          };
        }
    }
})();

/**=========================================================
 * Module: calendar-ui.js
 * This script handle the calendar demo with draggable 
 * events and events creations
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.extras')
        .directive('calendar', calendar);

    calendar.$inject = ['$rootScope'];
    function calendar ($rootScope) {
        var directive = {
            link: link,
            restrict: 'EA'
        };
        return directive;

        function link(scope, element) {
          
          if(!$.fn.fullCalendar) return;
          
          // The element that will display the calendar
          var calendar = element;

          var demoEvents = createDemoEvents();

          initExternalEvents(calendar);

          initCalendar(calendar, demoEvents, $rootScope.app.layout.isRTL);
        }
    }


    // global shared var to know what we are dragging
    var draggingEvent = null;


    /**
     * ExternalEvent object
     * @param jQuery Object elements Set of element as jQuery objects
     */
    function ExternalEvent(elements) {
        
        if (!elements) return;
        
        elements.each(function() {
            var $this = $(this);
            // create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
            // it doesn't need to have a start or end
            var calendarEventObject = {
                title: $.trim($this.text()) // use the element's text as the event title
            };

            // store the Event Object in the DOM element so we can get to it later
            $this.data('calendarEventObject', calendarEventObject);

            // make the event draggable using jQuery UI
            $this.draggable({
                zIndex: 1070,
                revert: true, // will cause the event to go back to its
                revertDuration: 0  //  original position after the drag
            });

        });
    }

    /**
     * Invoke full calendar plugin and attach behavior
     * @param  jQuery [calElement] The calendar dom element wrapped into jQuery
     * @param  EventObject [events] An object with the event list to load when the calendar displays
     */
    function initCalendar(calElement, events, isRTL) {

        // check to remove elements from the list
        var removeAfterDrop = $('#remove-after-drop');

        calElement.fullCalendar({
            isRTL: isRTL,
            header: {
                left:   'prev,next today',
                center: 'title',
                right:  'month,agendaWeek,agendaDay'
            },
            buttonIcons: { // note the space at the beginning
                prev:    ' fa fa-caret-left',
                next:    ' fa fa-caret-right'
            },
            buttonText: {
                today: 'today',
                month: 'month',
                week:  'week',
                day:   'day'
            },
            editable: true,
            droppable: true, // this allows things to be dropped onto the calendar 
            drop: function(date, allDay) { // this function is called when something is dropped
                
                var $this = $(this),
                    // retrieve the dropped element's stored Event Object
                    originalEventObject = $this.data('calendarEventObject');

                // if something went wrong, abort
                if(!originalEventObject) return;

                // clone the object to avoid multiple events with reference to the same object
                var clonedEventObject = $.extend({}, originalEventObject);

                // assign the reported date
                clonedEventObject.start = date;
                clonedEventObject.allDay = allDay;
                clonedEventObject.backgroundColor = $this.css('background-color');
                clonedEventObject.borderColor = $this.css('border-color');

                // render the event on the calendar
                // the last `true` argument determines if the event "sticks" 
                // (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
                calElement.fullCalendar('renderEvent', clonedEventObject, true);
                
                // if necessary remove the element from the list
                if(removeAfterDrop.is(':checked')) {
                  $this.remove();
                }
            },
            eventDragStart: function (event/*, js, ui*/) {
              draggingEvent = event;
            },
            // This array is the events sources
            events: events
        });
    }

    /**
     * Inits the external events panel
     * @param  jQuery [calElement] The calendar dom element wrapped into jQuery
     */
    function initExternalEvents(calElement){
      // Panel with the external events list
      var externalEvents = $('.external-events');

      // init the external events in the panel
      new ExternalEvent(externalEvents.children('div'));

      // External event color is danger-red by default
      var currColor = '#f6504d';
      // Color selector button
      var eventAddBtn = $('.external-event-add-btn');
      // New external event name input
      var eventNameInput = $('.external-event-name');
      // Color switchers
      var eventColorSelector = $('.external-event-color-selector .circle');

      // Trash events Droparea 
      $('.external-events-trash').droppable({
        accept:       '.fc-event',
        activeClass:  'active',
        hoverClass:   'hovered',
        tolerance:    'touch',
        drop: function(event, ui) {
          
          // You can use this function to send an ajax request
          // to remove the event from the repository
          
          if(draggingEvent) {
            var eid = draggingEvent.id || draggingEvent._id;
            // Remove the event
            calElement.fullCalendar('removeEvents', eid);
            // Remove the dom element
            ui.draggable.remove();
            // clear
            draggingEvent = null;
          }
        }
      });

      eventColorSelector.click(function(e) {
          e.preventDefault();
          var $this = $(this);

          // Save color
          currColor = $this.css('background-color');
          // De-select all and select the current one
          eventColorSelector.removeClass('selected');
          $this.addClass('selected');
      });

      eventAddBtn.click(function(e) {
          e.preventDefault();
          
          // Get event name from input
          var val = eventNameInput.val();
          // Dont allow empty values
          if ($.trim(val) === '') return;
          
          // Create new event element
          var newEvent = $('<div/>').css({
                              'background-color': currColor,
                              'border-color':     currColor,
                              'color':            '#fff'
                          })
                          .html(val);

          // Prepends to the external events list
          externalEvents.prepend(newEvent);
          // Initialize the new event element
          new ExternalEvent(newEvent);
          // Clear input
          eventNameInput.val('');
      });
    }

    /**
     * Creates an array of events to display in the first load of the calendar
     * Wrap into this function a request to a source to get via ajax the stored events
     * @return Array The array with the events
     */
    function createDemoEvents() {
      // Date for the calendar events (dummy data)
      var date = new Date();
      var d = date.getDate(),
          m = date.getMonth(),
          y = date.getFullYear();

      return  [
                {
                    title: 'All Day Event',
                    start: new Date(y, m, 1),
                    backgroundColor: '#f56954', //red 
                    borderColor: '#f56954' //red
                },
                {
                    title: 'Long Event',
                    start: new Date(y, m, d - 5),
                    end: new Date(y, m, d - 2),
                    backgroundColor: '#f39c12', //yellow
                    borderColor: '#f39c12' //yellow
                },
                {
                    title: 'Meeting',
                    start: new Date(y, m, d, 10, 30),
                    allDay: false,
                    backgroundColor: '#0073b7', //Blue
                    borderColor: '#0073b7' //Blue
                },
                {
                    title: 'Lunch',
                    start: new Date(y, m, d, 12, 0),
                    end: new Date(y, m, d, 14, 0),
                    allDay: false,
                    backgroundColor: '#00c0ef', //Info (aqua)
                    borderColor: '#00c0ef' //Info (aqua)
                },
                {
                    title: 'Birthday Party',
                    start: new Date(y, m, d + 1, 19, 0),
                    end: new Date(y, m, d + 1, 22, 30),
                    allDay: false,
                    backgroundColor: '#00a65a', //Success (green)
                    borderColor: '#00a65a' //Success (green)
                },
                {
                    title: 'Open Google',
                    start: new Date(y, m, 28),
                    end: new Date(y, m, 29),
                    url: '//google.com/',
                    backgroundColor: '#3c8dbc', //Primary (light-blue)
                    borderColor: '#3c8dbc' //Primary (light-blue)
                }
            ];
    }

})();

(function() {
    'use strict';

    angular
        .module('app.extras')
        .service('LoadTreeService', LoadTreeService);

    LoadTreeService.$inject = ['$resource'];
    function LoadTreeService($resource) {
        // Loads the list of files to populate the treeview
        return $resource('server/editor/filetree.json');
    }

})();
/**=========================================================
 * Module: code-editor.js
 * Codemirror code editor controller
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.extras')
        .controller('CodeEditorController', CodeEditorController);

    CodeEditorController.$inject = ['$rootScope', '$scope', '$http', '$ocLazyLoad', 'filetree'];
    function CodeEditorController($rootScope, $scope, $http, $ocLazyLoad, filetree) {
        var vm = this;

        layout();
        activate();

        ////////////////
        /*jshint -W106*/
        function layout() {
          // Setup the layout mode 
          $rootScope.app.useFullLayout = true;
          $rootScope.app.hiddenFooter = true;
          $rootScope.app.layout.isCollapsed = true;
          
          // Restore layout for demo
          $scope.$on('$destroy', function(){
              $rootScope.app.useFullLayout = false;
              $rootScope.app.hiddenFooter = false;
          });

        }

        function activate() {

          // Set the tree data into the scope
          vm.filetree_data = filetree;

          // Available themes
          vm.editorThemes = ['3024-day','3024-night','ambiance-mobile','ambiance','base16-dark','base16-light','blackboard','cobalt','eclipse','elegant','erlang-dark','lesser-dark','mbo','mdn-like','midnight','monokai','neat','neo','night','paraiso-dark','paraiso-light','pastel-on-dark','rubyblue','solarized','the-matrix','tomorrow-night-eighties','twilight','vibrant-ink','xq-dark','xq-light'];

          vm.editorOpts = {
            mode: 'javascript',
            lineNumbers: true,
            matchBrackets: true,
            theme: 'mbo',
            viewportMargin: Infinity
          };

          vm.refreshEditor = 0;

          // Load dinamically the stylesheet for the selected theme
          // You can use ozLazyLoad to load also the mode js based 
          // on the file extension that is loaded (see handle_filetree)
          vm.loadTheme = function() {
            var BASE = 'vendor/codemirror/theme/';
            $ocLazyLoad.load(BASE + vm.editorOpts.theme + '.css');
            vm.refreshEditor = !vm.refreshEditor;
          };
          // load default theme
          vm.loadTheme(vm.editorOpts.theme);
          // Add some initial text
          vm.code = '// Open a file from the left menu \n' +
                        '// It will be requested to the server and loaded into the editor\n' +
                        '// Also try adding a New File from the toolbar\n';


          // Tree

          var selectedBranch;
          vm.handle_filetree = function(branch) {
            
            selectedBranch = branch;

            var basePath = 'server/editor/';
            var isFolder = !!branch.children.length;

            console.log('You selected: ' + branch.label + ' - isFolder? ' + isFolder);

            if ( ! isFolder ) {

              $http
                .get( basePath + branch.path )
                .success(function(response){
                  
                  console.log('Loaded.. ' + branch.path);
                  // set the new code into the editor
                  vm.code = response;
                  
                  vm.editorOpts.mode = detectMode(branch.path);
                  console.log( 'Mode is: ' + vm.editorOpts.mode);

                });
            }
          };

          function detectMode(file) {
            var ext = file.split('.');
            ext = ext ? ext[ext.length - 1] : '';
            switch (ext) {
              case 'html':  return 'htmlmixed';
              case 'css':   return 'css';
              default:      return 'javascript';
            }
          }

          var tree;
          tree = vm.filetree = {};

          // Adds a new branch to the tree
          vm.new_filetree = function() {
            var b;
            b = tree.get_selected_branch();

            // if we select a leaf -> select the parent folder
            if ( b && b.children.length === 0 ) {
              b = tree.get_parent_branch(b);
            }
            
            return tree.add_branch(b, {
              'label': 'another.html',
              'path': 'source/another.html'
            });
          };
        }
    }
})();


(function() {
    'use strict';

    angular
        .module('app.extras')
        .controller('TodoController', TodoController);

    TodoController.$inject = ['$filter'];
    function TodoController($filter) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
           vm.items = [
            {
              todo: {title: 'Meeting with Mark at 7am.', description: 'Pellentesque convallis mauris eu elit imperdiet quis eleifend quam aliquet. '},
              complete: true
            },
            {
              todo: {title: 'Call Sonya. Talk about the new project.', description: ''},
              complete: false
            },
            {
              todo: {title: 'Find a new place for vacations', description: ''},
              complete: false
            }
            ];
          
          vm.editingTodo = false;
          vm.todo = {};

          vm.addTodo = function() {
            
            if( vm.todo.title === '' ) return;
            if( !vm.todo.description ) vm.todo.description = '';
            
            if( vm.editingTodo ) {
              vm.todo = {};
              vm.editingTodo = false;
            }
            else {
              vm.items.push({todo: angular.copy(vm.todo), complete: false});
              vm.todo.title = '';
              vm.todo.description = '';
            }
          };
          
          vm.editTodo = function(index, $event) {
            $event.preventDefault();
            $event.stopPropagation();
            vm.todo = vm.items[index].todo;
            vm.editingTodo = true;
          };

          vm.removeTodo = function(index/*, $event*/) {
            vm.items.splice(index, 1);
          };
          
          vm.clearAll = function() {
            vm.items = [];
          };

          vm.totalCompleted = function() {
            return $filter('filter')(vm.items, function(item){
              return item.complete;
            }).length;
          };

          vm.totalPending = function() {
            return $filter('filter')(vm.items, function(item){
              return !item.complete;
            }).length;
          };

        }
    }
})();

/**=========================================================
 * Module: word-cloud.js
 * Controller for jqCloud
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.extras')
        .controller('WordCloudController', WordCloudController);

    function WordCloudController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          vm.words = [
              {
                text: 'Lorem',
                weight: 13
                //link: 'http://themicon.co'
              }, {
                text: 'Ipsum',
                weight: 10.5
              }, {
                text: 'Dolor',
                weight: 9.4
              }, {
                text: 'Sit',
                weight: 8
              }, {
                text: 'Amet',
                weight: 6.2
              }, {
                text: 'Consectetur',
                weight: 5
              }, {
                text: 'Adipiscing',
                weight: 5
              }, {
                text: 'Sit',
                weight: 8
              }, {
                text: 'Amet',
                weight: 6.2
              }, {
                text: 'Consectetur',
                weight: 5
              }, {
                text: 'Adipiscing',
                weight: 5
              }
          ];
        }
    }
})();

/**=========================================================
 * Module: flatdoc.js
 * Creates the flatdoc markup and initializes the plugin
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.flatdoc')
        .directive('flatdoc', flatdoc);

    function flatdoc () {

        var directive = {
            template: '<div role="flatdoc"><div role="flatdoc-menu"></div><div role="flatdoc-content"></div></div>',
            link: link,
            restrict: 'EA'
        };
        return directive;

        function link(scope, element, attrs) {
          Flatdoc.run({
            fetcher: Flatdoc.file(attrs.src)
          });
          
          var $root = $('html, body');
          $(document).on('flatdoc:ready', function() {
            var docMenu = $('[role="flatdoc-menu"]');
            docMenu.find('a').on('click', function(e) {
              e.preventDefault(); e.stopPropagation();
              
              var $this = $(this);
              
              docMenu.find('a.active').removeClass('active');
              $this.addClass('active');

              $root.animate({
                    scrollTop: $(this.getAttribute('href')).offset().top - ($('.topnavbar').height() + 10)
                }, 800);
            });

          });
        }
    }


})();

/**=========================================================
 * Module: filestyle.js
 * Initializes the fielstyle plugin
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.forms')
        .directive('filestyle', filestyle);

    function filestyle () {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          var options = element.data();
          
          // old usage support
          options.classInput = element.data('classinput') || options.classInput;
          
          element.filestyle(options);
        }
    }

})();

/**=========================================================
 * Module: form-imgcrop.js
 * Image crop controller
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.forms')
        .controller('ImageCropController', ImageCropController);

    ImageCropController.$inject = ['$scope'];
    function ImageCropController($scope) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.reset = function() {
            vm.myImage        = '';
            vm.myCroppedImage = '';
            vm.imgcropType    = 'square';
          };

          vm.reset();

          var handleFileSelect=function(evt) {
            var file=evt.currentTarget.files[0];
            var reader = new FileReader();
            reader.onload = function (evt) {
              $scope.$apply(function(/*$scope*/){
                vm.myImage=evt.target.result;
              });
            };
            if(file)
              reader.readAsDataURL(file);
          };
          
          angular.element(document.querySelector('#fileInput')).on('change',handleFileSelect);
        }
    }
})();

/**=========================================================
 * Module: FormValidationController
 * Input validation with UI Validate
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.forms')
        .controller('FormValidationController', FormValidationController);

    function FormValidationController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.notBlackListed = function(value) {
            var blacklist = ['some@mail.com','another@email.com'];
            return blacklist.indexOf(value) === -1;
          };

          vm.words = function(value) {
            return value && value.split(' ').length;
          };

          vm.submitted = false;
          vm.validateInput = function(name, type) {
            var input = vm.formValidate[name];
            return (input.$dirty || vm.submitted) && input.$error[type];
          };

          // Submit form
          vm.submitForm = function() {
            vm.submitted = true;
            if (vm.formValidate.$valid) {
              console.log('Submitted!!');
            } else {
              console.log('Not valid!!');
              return false;
            }
          };
        }
    }
})();

/**=========================================================
 * Module: form-wizard.js
 * Handles form wizard plugin and validation
 =========================================================*/


(function() {
    'use strict';

    angular
        .module('app.forms')
        .directive('formWizard', formWizard);

    formWizard.$inject = ['$parse'];
    function formWizard ($parse) {
        var directive = {
            link: link,
            restrict: 'A',
            scope: true
        };
        return directive;

        function link(scope, element, attrs) {
          var validate = $parse(attrs.validateSteps)(scope),
              wiz = new Wizard(attrs.steps, !!validate, element);
          scope.wizard = wiz.init();
        }

        function Wizard (quantity, validate, element) {
          
          var self = this;
          self.quantity = parseInt(quantity,10);
          self.validate = validate;
          self.element = element;
          
          self.init = function() {
            self.createsteps(self.quantity);
            self.go(1); // always start at fist step
            return self;
          };

          self.go = function(step) {
            
            if ( angular.isDefined(self.steps[step]) ) {

              if(self.validate && step !== 1) {
                var form = $(self.element),
                    group = form.children().children('div').get(step - 2);

                if (false === form.parsley().validate( group.id )) {
                  return false;
                }
              }

              self.cleanall();
              self.steps[step] = true;
            }
          };

          self.active = function(step) {
            return !!self.steps[step];
          };

          self.cleanall = function() {
            for(var i in self.steps){
              self.steps[i] = false;
            }
          };

          self.createsteps = function(q) {
            self.steps = [];
            for(var i = 1; i <= q; i++) self.steps[i] = false;
          };

        }
    }


})();

/**=========================================================
 * Module: form-xeditable.js
 * Form xEditable controller
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.forms')
        .controller('FormxEditableController', FormxEditableController);

    FormxEditableController.$inject = ['$scope', 'editableOptions', 'editableThemes', '$filter', '$http'];
    function FormxEditableController($scope, editableOptions, editableThemes, $filter, $http) {
        var vm = this;
        vm.title = 'Controller';

        activate();

        ////////////////

        function activate() {

          editableOptions.theme = 'bs3';

          editableThemes.bs3.inputClass = 'input-sm';
          editableThemes.bs3.buttonsClass = 'btn-sm';
          editableThemes.bs3.submitTpl = '<button type="submit" class="btn btn-success"><span class="fa fa-check"></span></button>';
          editableThemes.bs3.cancelTpl = '<button type="button" class="btn btn-default" ng-click="$form.$cancel()">'+
                                           '<span class="fa fa-times text-muted"></span>'+
                                         '</button>';

          vm.user = {
            email: 'email@example.com',
            tel: '123-45-67',
            number: 29,
            range: 10,
            url: 'http://example.com',
            search: 'blabla',
            color: '#6a4415',
            date: null,
            time: new Date(),
            datetime: null,
            month: null,
            week: null,
            desc: 'Sed pharetra euismod dolor, id feugiat ante volutpat eget. '
          };

          // Local select
          // ----------------------------------- 

          vm.user2 = {
            status: 2
          };

          vm.statuses = [
            {value: 1, text: 'status1'},
            {value: 2, text: 'status2'},
            {value: 3, text: 'status3'},
            {value: 4, text: 'status4'}
          ];

          vm.showStatus = function() {
            var selected = $filter('filter')(vm.statuses, {value: vm.user2.status});
            return (vm.user2.status && selected.length) ? selected[0].text : 'Not set';
          };

          // select remote
          // ----------------------------------- 

          vm.user3 = {
            id: 4,
            text: 'admin' // original value
          };

          vm.groups = [];

          vm.loadGroups = function() {
            return vm.groups.length ? null : $http.get('server/xeditable-groups.json').success(function(data) {
              vm.groups = data;
            });
          };

          $scope.$watch('user3.id', function(newVal, oldVal) {
            if (newVal !== oldVal) {
              var selected = $filter('filter')(vm.groups, {id: vm.user3.id});
              vm.user3.text = selected.length ? selected[0].text : null;
            }
          });

          // Typeahead
          // ----------------------------------- 

          vm.user4 = {
            state: 'Arizona'
          };

          vm.states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Dakota', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];

        }
    }
})();


(function() {
    'use strict';

    angular
        .module('app.forms')
        .controller('FormDemoCtrl', FormDemoCtrl);

    FormDemoCtrl.$inject = ['$resource'];
    function FormDemoCtrl($resource) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          // the following allow to request array $resource instead of object (default)
          var actions = {'get': {method: 'GET', isArray: true}};
          
          // Tags inputs
          // ----------------------------------- 
          var Cities = $resource('server/cities.json', {}, actions);

          Cities.get(function(data){

              vm.cities = data;

          });
          // for non ajax form just fill the scope variable
          // vm.cities = ['Amsterdam','Washington','Sydney','Beijing','Cairo'];

          // Slider demo values
          vm.slider1 = 5;
          vm.slider2 = 10;
          vm.slider3 = 15;
          vm.slider4 = 20;
          vm.slider5 = 25;
          vm.slider6 = 30;
          vm.slider7 = 10;
          vm.slider8 = [250,750];

          // Chosen data
          // ----------------------------------- 

          var States = $resource('server/chosen-states.json', {},  {'query':    {method:'GET', isArray:true} });

          vm.states = States.query();


          vm.alertSubmit = function(){
            alert('Form submitted!');
            return false;
          };

          // Angular wysiwyg 
          // ----------------------------------- 

          vm.wysiwygContent = '<p> Write something here.. </p>';

          // Text Angular (wysiwyg)
          // ----------------------------------- 
          
          vm.htmlContent = '<h2>Try me!</h2><p>textAngular is a super cool WYSIWYG Text Editor directive for AngularJS</p><p><b>Features:</b></p><ol><li>Automatic Seamless Two-Way-Binding</li><li style="color: blue;">Super Easy <b>Theming</b> Options</li><li>Simple Editor Instance Creation</li><li>Safely Parses Html for Custom Toolbar Icons</li><li>Doesn&apos;t Use an iFrame</li><li>Works with Firefox, Chrome, and IE8+</li></ol><p><a href="https://github.com/fraywing/textAngular">Source</a> </p>';

        }
    }
})();

/**=========================================================
 * Module: masked,js
 * Initializes the masked inputs
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.forms')
        .directive('masked', masked);

    function masked () {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          var $elem = $(element);
          if($.fn.inputmask)
            $elem.inputmask();
        }
    }

})();

/**
 * AngularJS default filter with the following expression:
 * "person in people | filter: {name: $select.search, age: $select.search}"
 * performs a AND between 'name: $select.search' and 'age: $select.search'.
 * We want to perform a OR.
 */

(function() {
    'use strict';

    angular
        .module('app.forms')
        .filter('propsFilter', propsFilter);

    function propsFilter() {
        return filterFilter;

        ////////////////
        function filterFilter(items, props) {
          var out = [];

          if (angular.isArray(items)) {
            items.forEach(function(item) {
              var itemMatches = false;

              var keys = Object.keys(props);
              for (var i = 0; i < keys.length; i++) {
                var prop = keys[i];
                var text = props[prop].toLowerCase();
                if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
                  itemMatches = true;
                  break;
                }
              }

              if (itemMatches) {
                out.push(item);
              }
            });
          } else {
            // Let the output be the input untouched
            out = items;
          }

          return out;
        }
    }

})();
/**=========================================================
 * Module: tags-input.js
 * Initializes the tag inputs plugin
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.forms')
        .directive('tagsinput', tagsinput);

    tagsinput.$inject = ['$timeout'];
    function tagsinput ($timeout) {
        var directive = {
            link: link,
            require: 'ngModel',
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs, ngModel) {
          element.on('itemAdded itemRemoved', function(){
            // check if view value is not empty and is a string
            // and update the view from string to an array of tags
            if(ngModel.$viewValue && ngModel.$viewValue.split) {
              ngModel.$setViewValue( ngModel.$viewValue.split(',') );
              ngModel.$render();
            }
          });

          $timeout(function(){
            element.tagsinput();
          });
        }
    }

})();

/**=========================================================
 * Module: uiselect.js
 * uiSelect controller
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.forms')
        .controller('uiSelectController', uiSelectController);

    uiSelectController.$inject = ['$scope', '$http'];
    function uiSelectController($scope, $http) {
        /* jshint validthis:true */
        var vm = this;

        activate();

        ////////////////

        function activate() {

          vm.disabled = undefined;

          vm.enable = function() {
            vm.disabled = false;
          };

          vm.disable = function() {
            vm.disabled = true;
          };

          vm.clear = function() {
            vm.person.selected = undefined;
            vm.address.selected = undefined;
            vm.country.selected = undefined;
          };

          vm.person = {};
          vm.people = [
            { name: 'Adam',      email: 'adam@email.com',      age: 10 },
            { name: 'Amalie',    email: 'amalie@email.com',    age: 12 },
            { name: 'Wladimir',  email: 'wladimir@email.com',  age: 30 },
            { name: 'Samantha',  email: 'samantha@email.com',  age: 31 },
            { name: 'Estefanía', email: 'estefanía@email.com', age: 16 },
            { name: 'Natasha',   email: 'natasha@email.com',   age: 54 },
            { name: 'Nicole',    email: 'nicole@email.com',    age: 43 },
            { name: 'Adrian',    email: 'adrian@email.com',    age: 21 }
          ];

          vm.address = {};
          vm.refreshAddresses = function(address) {
            var params = {address: address, sensor: false};
            return $http.get(
              'http://maps.googleapis.com/maps/api/geocode/json',
              {params: params}
            ).then(function(response) {
              vm.addresses = response.data.results;
            });
          };

          vm.country = {};
          vm.countries = [ // Taken from https://gist.github.com/unceus/6501985
            {name: 'Afghanistan', code: 'AF'},
            {name: 'Åland Islands', code: 'AX'},
            {name: 'Albania', code: 'AL'},
            {name: 'Algeria', code: 'DZ'},
            {name: 'American Samoa', code: 'AS'},
            {name: 'Andorra', code: 'AD'},
            {name: 'Angola', code: 'AO'},
            {name: 'Anguilla', code: 'AI'},
            {name: 'Antarctica', code: 'AQ'},
            {name: 'Antigua and Barbuda', code: 'AG'},
            {name: 'Argentina', code: 'AR'},
            {name: 'Armenia', code: 'AM'},
            {name: 'Aruba', code: 'AW'},
            {name: 'Australia', code: 'AU'},
            {name: 'Austria', code: 'AT'},
            {name: 'Azerbaijan', code: 'AZ'},
            {name: 'Bahamas', code: 'BS'},
            {name: 'Bahrain', code: 'BH'},
            {name: 'Bangladesh', code: 'BD'},
            {name: 'Barbados', code: 'BB'},
            {name: 'Belarus', code: 'BY'},
            {name: 'Belgium', code: 'BE'},
            {name: 'Belize', code: 'BZ'},
            {name: 'Benin', code: 'BJ'},
            {name: 'Bermuda', code: 'BM'},
            {name: 'Bhutan', code: 'BT'},
            {name: 'Bolivia', code: 'BO'},
            {name: 'Bosnia and Herzegovina', code: 'BA'},
            {name: 'Botswana', code: 'BW'},
            {name: 'Bouvet Island', code: 'BV'},
            {name: 'Brazil', code: 'BR'},
            {name: 'British Indian Ocean Territory', code: 'IO'},
            {name: 'Brunei Darussalam', code: 'BN'},
            {name: 'Bulgaria', code: 'BG'},
            {name: 'Burkina Faso', code: 'BF'},
            {name: 'Burundi', code: 'BI'},
            {name: 'Cambodia', code: 'KH'},
            {name: 'Cameroon', code: 'CM'},
            {name: 'Canada', code: 'CA'},
            {name: 'Cape Verde', code: 'CV'},
            {name: 'Cayman Islands', code: 'KY'},
            {name: 'Central African Republic', code: 'CF'},
            {name: 'Chad', code: 'TD'},
            {name: 'Chile', code: 'CL'},
            {name: 'China', code: 'CN'},
            {name: 'Christmas Island', code: 'CX'},
            {name: 'Cocos (Keeling) Islands', code: 'CC'},
            {name: 'Colombia', code: 'CO'},
            {name: 'Comoros', code: 'KM'},
            {name: 'Congo', code: 'CG'},
            {name: 'Congo, The Democratic Republic of the', code: 'CD'},
            {name: 'Cook Islands', code: 'CK'},
            {name: 'Costa Rica', code: 'CR'},
            {name: 'Cote D\'Ivoire', code: 'CI'},
            {name: 'Croatia', code: 'HR'},
            {name: 'Cuba', code: 'CU'},
            {name: 'Cyprus', code: 'CY'},
            {name: 'Czech Republic', code: 'CZ'},
            {name: 'Denmark', code: 'DK'},
            {name: 'Djibouti', code: 'DJ'},
            {name: 'Dominica', code: 'DM'},
            {name: 'Dominican Republic', code: 'DO'},
            {name: 'Ecuador', code: 'EC'},
            {name: 'Egypt', code: 'EG'},
            {name: 'El Salvador', code: 'SV'},
            {name: 'Equatorial Guinea', code: 'GQ'},
            {name: 'Eritrea', code: 'ER'},
            {name: 'Estonia', code: 'EE'},
            {name: 'Ethiopia', code: 'ET'},
            {name: 'Falkland Islands (Malvinas)', code: 'FK'},
            {name: 'Faroe Islands', code: 'FO'},
            {name: 'Fiji', code: 'FJ'},
            {name: 'Finland', code: 'FI'},
            {name: 'France', code: 'FR'},
            {name: 'French Guiana', code: 'GF'},
            {name: 'French Polynesia', code: 'PF'},
            {name: 'French Southern Territories', code: 'TF'},
            {name: 'Gabon', code: 'GA'},
            {name: 'Gambia', code: 'GM'},
            {name: 'Georgia', code: 'GE'},
            {name: 'Germany', code: 'DE'},
            {name: 'Ghana', code: 'GH'},
            {name: 'Gibraltar', code: 'GI'},
            {name: 'Greece', code: 'GR'},
            {name: 'Greenland', code: 'GL'},
            {name: 'Grenada', code: 'GD'},
            {name: 'Guadeloupe', code: 'GP'},
            {name: 'Guam', code: 'GU'},
            {name: 'Guatemala', code: 'GT'},
            {name: 'Guernsey', code: 'GG'},
            {name: 'Guinea', code: 'GN'},
            {name: 'Guinea-Bissau', code: 'GW'},
            {name: 'Guyana', code: 'GY'},
            {name: 'Haiti', code: 'HT'},
            {name: 'Heard Island and Mcdonald Islands', code: 'HM'},
            {name: 'Holy See (Vatican City State)', code: 'VA'},
            {name: 'Honduras', code: 'HN'},
            {name: 'Hong Kong', code: 'HK'},
            {name: 'Hungary', code: 'HU'},
            {name: 'Iceland', code: 'IS'},
            {name: 'India', code: 'IN'},
            {name: 'Indonesia', code: 'ID'},
            {name: 'Iran, Islamic Republic Of', code: 'IR'},
            {name: 'Iraq', code: 'IQ'},
            {name: 'Ireland', code: 'IE'},
            {name: 'Isle of Man', code: 'IM'},
            {name: 'Israel', code: 'IL'},
            {name: 'Italy', code: 'IT'},
            {name: 'Jamaica', code: 'JM'},
            {name: 'Japan', code: 'JP'},
            {name: 'Jersey', code: 'JE'},
            {name: 'Jordan', code: 'JO'},
            {name: 'Kazakhstan', code: 'KZ'},
            {name: 'Kenya', code: 'KE'},
            {name: 'Kiribati', code: 'KI'},
            {name: 'Korea, Democratic People\'s Republic of', code: 'KP'},
            {name: 'Korea, Republic of', code: 'KR'},
            {name: 'Kuwait', code: 'KW'},
            {name: 'Kyrgyzstan', code: 'KG'},
            {name: 'Lao People\'s Democratic Republic', code: 'LA'},
            {name: 'Latvia', code: 'LV'},
            {name: 'Lebanon', code: 'LB'},
            {name: 'Lesotho', code: 'LS'},
            {name: 'Liberia', code: 'LR'},
            {name: 'Libyan Arab Jamahiriya', code: 'LY'},
            {name: 'Liechtenstein', code: 'LI'},
            {name: 'Lithuania', code: 'LT'},
            {name: 'Luxembourg', code: 'LU'},
            {name: 'Macao', code: 'MO'},
            {name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK'},
            {name: 'Madagascar', code: 'MG'},
            {name: 'Malawi', code: 'MW'},
            {name: 'Malaysia', code: 'MY'},
            {name: 'Maldives', code: 'MV'},
            {name: 'Mali', code: 'ML'},
            {name: 'Malta', code: 'MT'},
            {name: 'Marshall Islands', code: 'MH'},
            {name: 'Martinique', code: 'MQ'},
            {name: 'Mauritania', code: 'MR'},
            {name: 'Mauritius', code: 'MU'},
            {name: 'Mayotte', code: 'YT'},
            {name: 'Mexico', code: 'MX'},
            {name: 'Micronesia, Federated States of', code: 'FM'},
            {name: 'Moldova, Republic of', code: 'MD'},
            {name: 'Monaco', code: 'MC'},
            {name: 'Mongolia', code: 'MN'},
            {name: 'Montserrat', code: 'MS'},
            {name: 'Morocco', code: 'MA'},
            {name: 'Mozambique', code: 'MZ'},
            {name: 'Myanmar', code: 'MM'},
            {name: 'Namibia', code: 'NA'},
            {name: 'Nauru', code: 'NR'},
            {name: 'Nepal', code: 'NP'},
            {name: 'Netherlands', code: 'NL'},
            {name: 'Netherlands Antilles', code: 'AN'},
            {name: 'New Caledonia', code: 'NC'},
            {name: 'New Zealand', code: 'NZ'},
            {name: 'Nicaragua', code: 'NI'},
            {name: 'Niger', code: 'NE'},
            {name: 'Nigeria', code: 'NG'},
            {name: 'Niue', code: 'NU'},
            {name: 'Norfolk Island', code: 'NF'},
            {name: 'Northern Mariana Islands', code: 'MP'},
            {name: 'Norway', code: 'NO'},
            {name: 'Oman', code: 'OM'},
            {name: 'Pakistan', code: 'PK'},
            {name: 'Palau', code: 'PW'},
            {name: 'Palestinian Territory, Occupied', code: 'PS'},
            {name: 'Panama', code: 'PA'},
            {name: 'Papua New Guinea', code: 'PG'},
            {name: 'Paraguay', code: 'PY'},
            {name: 'Peru', code: 'PE'},
            {name: 'Philippines', code: 'PH'},
            {name: 'Pitcairn', code: 'PN'},
            {name: 'Poland', code: 'PL'},
            {name: 'Portugal', code: 'PT'},
            {name: 'Puerto Rico', code: 'PR'},
            {name: 'Qatar', code: 'QA'},
            {name: 'Reunion', code: 'RE'},
            {name: 'Romania', code: 'RO'},
            {name: 'Russian Federation', code: 'RU'},
            {name: 'Rwanda', code: 'RW'},
            {name: 'Saint Helena', code: 'SH'},
            {name: 'Saint Kitts and Nevis', code: 'KN'},
            {name: 'Saint Lucia', code: 'LC'},
            {name: 'Saint Pierre and Miquelon', code: 'PM'},
            {name: 'Saint Vincent and the Grenadines', code: 'VC'},
            {name: 'Samoa', code: 'WS'},
            {name: 'San Marino', code: 'SM'},
            {name: 'Sao Tome and Principe', code: 'ST'},
            {name: 'Saudi Arabia', code: 'SA'},
            {name: 'Senegal', code: 'SN'},
            {name: 'Serbia and Montenegro', code: 'CS'},
            {name: 'Seychelles', code: 'SC'},
            {name: 'Sierra Leone', code: 'SL'},
            {name: 'Singapore', code: 'SG'},
            {name: 'Slovakia', code: 'SK'},
            {name: 'Slovenia', code: 'SI'},
            {name: 'Solomon Islands', code: 'SB'},
            {name: 'Somalia', code: 'SO'},
            {name: 'South Africa', code: 'ZA'},
            {name: 'South Georgia and the South Sandwich Islands', code: 'GS'},
            {name: 'Spain', code: 'ES'},
            {name: 'Sri Lanka', code: 'LK'},
            {name: 'Sudan', code: 'SD'},
            {name: 'Suriname', code: 'SR'},
            {name: 'Svalbard and Jan Mayen', code: 'SJ'},
            {name: 'Swaziland', code: 'SZ'},
            {name: 'Sweden', code: 'SE'},
            {name: 'Switzerland', code: 'CH'},
            {name: 'Syrian Arab Republic', code: 'SY'},
            {name: 'Taiwan, Province of China', code: 'TW'},
            {name: 'Tajikistan', code: 'TJ'},
            {name: 'Tanzania, United Republic of', code: 'TZ'},
            {name: 'Thailand', code: 'TH'},
            {name: 'Timor-Leste', code: 'TL'},
            {name: 'Togo', code: 'TG'},
            {name: 'Tokelau', code: 'TK'},
            {name: 'Tonga', code: 'TO'},
            {name: 'Trinidad and Tobago', code: 'TT'},
            {name: 'Tunisia', code: 'TN'},
            {name: 'Turkey', code: 'TR'},
            {name: 'Turkmenistan', code: 'TM'},
            {name: 'Turks and Caicos Islands', code: 'TC'},
            {name: 'Tuvalu', code: 'TV'},
            {name: 'Uganda', code: 'UG'},
            {name: 'Ukraine', code: 'UA'},
            {name: 'United Arab Emirates', code: 'AE'},
            {name: 'United Kingdom', code: 'GB'},
            {name: 'United States', code: 'US'},
            {name: 'United States Minor Outlying Islands', code: 'UM'},
            {name: 'Uruguay', code: 'UY'},
            {name: 'Uzbekistan', code: 'UZ'},
            {name: 'Vanuatu', code: 'VU'},
            {name: 'Venezuela', code: 'VE'},
            {name: 'Vietnam', code: 'VN'},
            {name: 'Virgin Islands, British', code: 'VG'},
            {name: 'Virgin Islands, U.S.', code: 'VI'},
            {name: 'Wallis and Futuna', code: 'WF'},
            {name: 'Western Sahara', code: 'EH'},
            {name: 'Yemen', code: 'YE'},
            {name: 'Zambia', code: 'ZM'},
            {name: 'Zimbabwe', code: 'ZW'}
          ];


          // Multiple
          vm.someGroupFn = function (item){

            if (item.name[0] >= 'A' && item.name[0] <= 'M')
                return 'From A - M';

            if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                return 'From N - Z';

          };

          vm.counter = 0;
          vm.someFunction = function (item, model){
            vm.counter++;
            vm.eventResult = {item: item, model: model};
          };

          vm.availableColors = ['Red','Green','Blue','Yellow','Magenta','Maroon','Umbra','Turquoise'];

          vm.multipleDemo = {};
          vm.multipleDemo.colors = ['Blue','Red'];
          vm.multipleDemo.selectedPeople = [vm.people[5], vm.people[4]];
          vm.multipleDemo.selectedPeopleWithGroupBy = [vm.people[8], vm.people[6]];
          vm.multipleDemo.selectedPeopleSimple = ['samantha@email.com','wladimir@email.com'];
        }
    }

})();

/**=========================================================
 * Module: upload.js
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.forms')
        .controller('FileUploadController', FileUploadController);

    FileUploadController.$inject = ['FileUploader'];
    function FileUploadController(FileUploader) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          var uploader = vm.uploader = new FileUploader({
              url: 'server/upload.php'
          });

          // FILTERS

          uploader.filters.push({
              name: 'customFilter',
              fn: function(/*item, options*/) {
                  return this.queue.length < 10;
              }
          });

          // CALLBACKS

          uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
              console.info('onWhenAddingFileFailed', item, filter, options);
          };
          uploader.onAfterAddingFile = function(fileItem) {
              console.info('onAfterAddingFile', fileItem);
          };
          uploader.onAfterAddingAll = function(addedFileItems) {
              console.info('onAfterAddingAll', addedFileItems);
          };
          uploader.onBeforeUploadItem = function(item) {
              console.info('onBeforeUploadItem', item);
          };
          uploader.onProgressItem = function(fileItem, progress) {
              console.info('onProgressItem', fileItem, progress);
          };
          uploader.onProgressAll = function(progress) {
              console.info('onProgressAll', progress);
          };
          uploader.onSuccessItem = function(fileItem, response, status, headers) {
              console.info('onSuccessItem', fileItem, response, status, headers);
          };
          uploader.onErrorItem = function(fileItem, response, status, headers) {
              console.info('onErrorItem', fileItem, response, status, headers);
          };
          uploader.onCancelItem = function(fileItem, response, status, headers) {
              console.info('onCancelItem', fileItem, response, status, headers);
          };
          uploader.onCompleteItem = function(fileItem, response, status, headers) {
              console.info('onCompleteItem', fileItem, response, status, headers);
          };
          uploader.onCompleteAll = function() {
              console.info('onCompleteAll');
          };

          console.info('uploader', uploader);
        }
    }
})();

/**=========================================================
 * Module: validate-form.js
 * Initializes the validation plugin Parsley
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.forms')
        .directive('validateForm', validateForm);

    function validateForm () {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          var $elem = $(element);
          if($.fn.parsley)
            $elem.parsley();
        }
    }

})();

/**=========================================================
 * Module: skycons.js
 * Include any animated weather icon from Skycons
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.icons')
        .directive('skycon', skycon);

    function skycon () {

        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs) {
          var skycons = new Skycons({'color': (attrs.color || 'white')});

          element.html('<canvas width="' + attrs.width + '" height="' + attrs.height + '"></canvas>');

          skycons.add(element.children()[0], attrs.skycon);

          skycons.play();
        }
    }

})();

(function() {
    'use strict';

    angular
        .module('app.lazyload')
        .config(lazyloadConfig);

    lazyloadConfig.$inject = ['$ocLazyLoadProvider', 'APP_REQUIRES'];
    function lazyloadConfig($ocLazyLoadProvider, APP_REQUIRES){

      // Lazy Load modules configuration
      $ocLazyLoadProvider.config({
        debug: false,
        events: true,
        modules: APP_REQUIRES.modules
      });

    }
})();
(function() {
    'use strict';

    angular
        .module('app.lazyload')
        .constant('APP_REQUIRES', {
          // jQuery based and standalone scripts
          scripts: {
            'whirl':              ['vendor/whirl/dist/whirl.css'],
            'classyloader':       ['vendor/jquery-classyloader/js/jquery.classyloader.min.js'],
            'animo':              ['vendor/animo.js/animo.js'],
            'fastclick':          ['vendor/fastclick/lib/fastclick.js'],
            'modernizr':          ['vendor/modernizr/modernizr.js'],
            'animate':            ['vendor/animate.css/animate.min.css'],
            'skycons':            ['vendor/skycons/skycons.js'],
            'icons':              ['vendor/fontawesome/css/font-awesome.min.css',
                                   'vendor/simple-line-icons/css/simple-line-icons.css'],
            'weather-icons':      ['vendor/weather-icons/css/weather-icons.min.css'],
            'sparklines':         ['app/vendor/sparklines/jquery.sparkline.min.js'],
            'wysiwyg':            ['vendor/bootstrap-wysiwyg/bootstrap-wysiwyg.js',
                                   'vendor/bootstrap-wysiwyg/external/jquery.hotkeys.js'],
            'slimscroll':         ['vendor/slimScroll/jquery.slimscroll.min.js'],
            'screenfull':         ['vendor/screenfull/dist/screenfull.js'],
            'vector-map':         ['vendor/ika.jvectormap/jquery-jvectormap-1.2.2.min.js',
                                   'vendor/ika.jvectormap/jquery-jvectormap-1.2.2.css'],
            'vector-map-maps':    ['vendor/ika.jvectormap/jquery-jvectormap-world-mill-en.js',
                                   'vendor/ika.jvectormap/jquery-jvectormap-us-mill-en.js'],
            'loadGoogleMapsJS':   ['app/vendor/gmap/load-google-maps.js'],
            'flot-chart':         ['vendor/Flot/jquery.flot.js'],
            'flot-chart-plugins': ['vendor/flot.tooltip/js/jquery.flot.tooltip.min.js',
                                   'vendor/Flot/jquery.flot.resize.js',
                                   'vendor/Flot/jquery.flot.pie.js',
                                   'vendor/Flot/jquery.flot.time.js',
                                   'vendor/Flot/jquery.flot.categories.js',
                                   'vendor/flot-spline/js/jquery.flot.spline.min.js'],
                                  // jquery core and widgets
            'jquery-ui':          ['vendor/jquery-ui/ui/core.js',
                                   'vendor/jquery-ui/ui/widget.js'],
                                   // loads only jquery required modules and touch support
            'jquery-ui-widgets':  ['vendor/jquery-ui/ui/core.js',
                                   'vendor/jquery-ui/ui/widget.js',
                                   'vendor/jquery-ui/ui/mouse.js',
                                   'vendor/jquery-ui/ui/draggable.js',
                                   'vendor/jquery-ui/ui/droppable.js',
                                   'vendor/jquery-ui/ui/sortable.js',
                                   'vendor/jqueryui-touch-punch/jquery.ui.touch-punch.min.js'],
            'moment' :            ['vendor/moment/min/moment-with-locales.min.js'],
            'inputmask':          ['vendor/jquery.inputmask/dist/jquery.inputmask.bundle.min.js'],
            'flatdoc':            ['vendor/flatdoc/flatdoc.js'],
            'codemirror':         ['vendor/codemirror/lib/codemirror.js',
                                   'vendor/codemirror/lib/codemirror.css'],
            // modes for common web files
            'codemirror-modes-web': ['vendor/codemirror/mode/javascript/javascript.js',
                                     'vendor/codemirror/mode/xml/xml.js',
                                     'vendor/codemirror/mode/htmlmixed/htmlmixed.js',
                                     'vendor/codemirror/mode/css/css.js'],
            'taginput' :          ['vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.css',
                                   'vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js'],
            'filestyle':          ['vendor/bootstrap-filestyle/src/bootstrap-filestyle.js'],
            'parsley':            ['vendor/parsleyjs/dist/parsley.min.js'],
            'fullcalendar':       ['vendor/fullcalendar/dist/fullcalendar.min.js',
                                   'vendor/fullcalendar/dist/fullcalendar.css'],
            'gcal':               ['vendor/fullcalendar/dist/gcal.js'],
            'chartjs':            ['vendor/Chart.js/Chart.js'],
            'morris':             ['vendor/raphael/raphael.js',
                                   'vendor/morris.js/morris.js',
                                   'vendor/morris.js/morris.css'],
            'loaders.css':          ['vendor/loaders.css/loaders.css'],
            'spinkit':              ['vendor/spinkit/css/spinkit.css']
          },
          // Angular based script (use the right module name)
          modules: [
            {name: 'toaster',                   files: ['vendor/angularjs-toaster/toaster.js',
                                                       'vendor/angularjs-toaster/toaster.css']},
            {name: 'localytics.directives',     files: ['vendor/chosen_v1.2.0/chosen.jquery.min.js',
                                                       'vendor/chosen_v1.2.0/chosen.min.css',
                                                       'vendor/angular-chosen-localytics/chosen.js']},
            {name: 'ngDialog',                  files: ['vendor/ngDialog/js/ngDialog.min.js',
                                                       'vendor/ngDialog/css/ngDialog.min.css',
                                                       'vendor/ngDialog/css/ngDialog-theme-default.min.css'] },
            {name: 'ngWig',                     files: ['vendor/ngWig/dist/ng-wig.min.js'] },
            {name: 'ngTable',                   files: ['vendor/ng-table/dist/ng-table.min.js',
                                                        'vendor/ng-table/dist/ng-table.min.css']},
            {name: 'ngTableExport',             files: ['vendor/ng-table-export/ng-table-export.js']},
            {name: 'angularBootstrapNavTree',   files: ['vendor/angular-bootstrap-nav-tree/dist/abn_tree_directive.js',
                                                        'vendor/angular-bootstrap-nav-tree/dist/abn_tree.css']},
            {name: 'htmlSortable',              files: ['vendor/html.sortable/dist/html.sortable.js',
                                                        'vendor/html.sortable/dist/html.sortable.angular.js']},
            {name: 'xeditable',                 files: ['vendor/angular-xeditable/dist/js/xeditable.js',
                                                        'vendor/angular-xeditable/dist/css/xeditable.css']},
            {name: 'angularFileUpload',         files: ['vendor/angular-file-upload/angular-file-upload.js']},
            {name: 'ngImgCrop',                 files: ['vendor/ng-img-crop/compile/unminified/ng-img-crop.js',
                                                        'vendor/ng-img-crop/compile/unminified/ng-img-crop.css']},
            {name: 'ui.select',                 files: ['vendor/angular-ui-select/dist/select.js',
                                                        'vendor/angular-ui-select/dist/select.css']},
            {name: 'ui.codemirror',             files: ['vendor/angular-ui-codemirror/ui-codemirror.js']},
            {name: 'angular-carousel',          files: ['vendor/angular-carousel/dist/angular-carousel.css',
                                                        'vendor/angular-carousel/dist/angular-carousel.js']},
            {name: 'ngGrid',                    files: ['vendor/ng-grid/build/ng-grid.min.js',
                                                        'vendor/ng-grid/ng-grid.css' ]},
            {name: 'infinite-scroll',           files: ['vendor/ngInfiniteScroll/build/ng-infinite-scroll.js']},
            {name: 'ui.bootstrap-slider',       files: ['vendor/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js',
                                                        'vendor/seiyria-bootstrap-slider/dist/css/bootstrap-slider.min.css',
                                                        'vendor/angular-bootstrap-slider/slider.js']},
            {name: 'ui.grid',                   files: ['vendor/angular-ui-grid/ui-grid.min.css',
                                                        'vendor/angular-ui-grid/ui-grid.min.js']},
            {name: 'textAngular',               files: ['vendor/textAngular/dist/textAngular.css',
                                                        'vendor/textAngular/dist/textAngular-rangy.min.js',
                                                        'vendor/textAngular/dist/textAngular-sanitize.js',
                                                        'vendor/textAngular/src/globals.js',
                                                        'vendor/textAngular/src/factories.js',
                                                        'vendor/textAngular/src/DOM.js',
                                                        'vendor/textAngular/src/validators.js',
                                                        'vendor/textAngular/src/taBind.js',
                                                        'vendor/textAngular/src/main.js',
                                                        'vendor/textAngular/dist/textAngularSetup.js'
                                                        ], serie: true},
            {name: 'angular-rickshaw',          files: ['vendor/d3/d3.min.js',
                                                        'vendor/rickshaw/rickshaw.js',
                                                        'vendor/rickshaw/rickshaw.min.css',
                                                        'vendor/angular-rickshaw/rickshaw.js'], serie: true},
            {name: 'angular-chartist',          files: ['vendor/chartist/dist/chartist.min.css',
                                                        'vendor/chartist/dist/chartist.js',
                                                        'vendor/angular-chartist.js/dist/angular-chartist.js'], serie: true},
            {name: 'ui.map',                    files: ['vendor/angular-ui-map/ui-map.js']},
            {name: 'datatables',                files: ['vendor/datatables/media/css/jquery.dataTables.css',
                                                        'vendor/datatables/media/js/jquery.dataTables.js',
                                                        'vendor/angular-datatables/dist/angular-datatables.js'], serie: true},
            {name: 'angular-jqcloud',           files: ['vendor/jqcloud2/dist/jqcloud.css',
                                                        'vendor/jqcloud2/dist/jqcloud.js',
                                                        'vendor/angular-jqcloud/angular-jqcloud.js']},
            {name: 'angularGrid',               files: ['vendor/ag-grid/dist/angular-grid.css',
                                                        'vendor/ag-grid/dist/angular-grid.js',
                                                        'vendor/ag-grid/dist/theme-dark.css',
                                                        'vendor/ag-grid/dist/theme-fresh.css']},
            {name: 'ng-nestable',               files: ['vendor/ng-nestable/src/angular-nestable.js',
                                                        'vendor/nestable/jquery.nestable.js']},
            {name: 'akoenig.deckgrid',          files: ['vendor/angular-deckgrid/angular-deckgrid.js']},
            {name: 'oitozero.ngSweetAlert',     files: ['vendor/sweetalert/dist/sweetalert.css',
                                                        'vendor/sweetalert/dist/sweetalert.min.js',
                                                        'vendor/angular-sweetalert/SweetAlert.js']},
            {name: 'bm.bsTour',                 files: ['vendor/bootstrap-tour/build/css/bootstrap-tour.css',
                                                        'vendor/bootstrap-tour/build/js/bootstrap-tour-standalone.js',
                                                        'vendor/angular-bootstrap-tour/dist/angular-bootstrap-tour.js'], serie: true},
            {name: 'ngGallery',                 files: ['vendor/angular-ui-gallery/ngGallery.css',
                                                        'vendor/angular-ui-gallery/screen.css',
                                                        'vendor/angular-ui-gallery/ngGallery.js'], serie: true},
            {name: 'ztree',                     files: ['vendor/jquery.ztree/jquery.ztree.all-3.5.js','vendor/jquery.ztree/zTreeStyle/zTreeStyle.css'], serie: true},
            {name: 'calender',                     files: ['vendor/calendar/calendar.js',
                                                            'vendor/calendar/lang/cn.js',
                                                            'vendor/calendar/jscal2.css','vendor/calendar/border-radius.css','vendor/calendar/win2k.css'], serie: true},
            {name: 'lightbox2',                     files: ['vendor/lightbox2/js/lightbox.min.js',
                                                            'vendor/lightbox2/css/lightbox.min.css'], serie: true}
          ]
        })
        ;

})();

(function() {
    'use strict';

    angular
        .module('app.loadingbar')
        .config(loadingbarConfig)
        ;
    loadingbarConfig.$inject = ['cfpLoadingBarProvider'];
    function loadingbarConfig(cfpLoadingBarProvider){
      cfpLoadingBarProvider.includeBar = true;
      cfpLoadingBarProvider.includeSpinner = true;
      cfpLoadingBarProvider.latencyThreshold = 500;
      cfpLoadingBarProvider.parentSelector = '.wrapper > section';
    }
})();
(function() {
    'use strict';

    angular
        .module('app.loadingbar')
        .run(loadingbarRun)
        ;
    loadingbarRun.$inject = ['$rootScope', '$timeout', 'cfpLoadingBar'];
    function loadingbarRun($rootScope, $timeout, cfpLoadingBar){

      // Loading bar transition
      // ----------------------------------- 
      var thBar;
      $rootScope.$on('$stateChangeStart', function() {
          if($('.wrapper > section').length) // check if bar container exists
            thBar = $timeout(function() {
              cfpLoadingBar.start();
            }, 0); // sets a latency Threshold
      });
      $rootScope.$on('$stateChangeSuccess', function(event) {
          event.targetScope.$watch('$viewContentLoaded', function () {
            $timeout.cancel(thBar);
            cfpLoadingBar.complete();
          });
      });

    }

})();
(function() {
    'use strict';

    angular
        .module('app.locale')
        .config(localeConfig)
        ;
    localeConfig.$inject = ['tmhDynamicLocaleProvider'];
    function localeConfig(tmhDynamicLocaleProvider){
  
      tmhDynamicLocaleProvider.localeLocationPattern('vendor/angular-i18n/angular-locale_{{locale}}.js');
      // tmhDynamicLocaleProvider.useStorage('$cookieStore');

    }
})();
/**=========================================================
 * Module: locale.js
 * Demo for locale settings
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.locale')
        .controller('LocalizationController', LocalizationController);

    LocalizationController.$inject = ['$rootScope', 'tmhDynamicLocale', '$locale'];
    function LocalizationController($rootScope, tmhDynamicLocale, $locale) {

        activate();

        ////////////////

        function activate() {
          $rootScope.availableLocales = {
            'en': 'English',
            'es': 'Spanish',
            'de': 'German',
            'fr': 'French',
            'ar': 'Arabic',
            'ja': 'Japanese',
            'ko': 'Korean',
            'zh': 'Chinese'};
          
          $rootScope.model = {selectedLocale: 'en'};
          
          $rootScope.$locale = $locale;
          
          $rootScope.changeLocale = tmhDynamicLocale.set;
        }
    }
})();

/**=========================================================
 * Module: demo-pagination.js
 * Provides a simple demo for pagination
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.mailbox')
        .controller('MailboxController', MailboxController);

    function MailboxController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.folders = [
            {name: 'Inbox',   folder: 'inbox',   alert: 42, icon: 'fa-inbox' },
            {name: 'Starred', folder: 'starred', alert: 10, icon: 'fa-star' },
            {name: 'Sent',    folder: 'sent',    alert: 0,  icon: 'fa-paper-plane-o' },
            {name: 'Draft',   folder: 'draft',   alert: 5,  icon: 'fa-edit' },
            {name: 'Trash',   folder: 'trash',   alert: 0,  icon: 'fa-trash'}
          ];

          vm.labels = [
            {name: 'Red',     color: 'danger'},
            {name: 'Pink',    color: 'pink'},
            {name: 'Blue',    color: 'info'},
            {name: 'Yellow',  color: 'warning'}
          ];

          vm.mail = {
            cc: false,
            bcc: false
          };
          // Mailbox editr initial content
          vm.content = '<p>Type something..</p>';
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.mailbox')
        .controller('MailFolderController', MailFolderController);

    MailFolderController.$inject = ['mails', '$stateParams'];
    function MailFolderController(mails, $stateParams) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          
          vm.folder = {};
          // no filter for inbox
          vm.folder.folder = $stateParams.folder === 'inbox' ? '' : $stateParams.folder;

          mails.all().then(function(mails){
            vm.mails = mails;
          });
        }
    }
})();

// A RESTful factory for retrieving mails from json file

(function() {
    'use strict';

    angular
        .module('app.mailbox')
        .factory('mails', mails);

    mails.$inject = ['$http'];
    function mails($http) {
        var service = {
            all: all,
            get: get
        };
        return service;

        ////////////////
        
        function readMails() {
          var path = 'server/mails.json';
          return $http.get(path).then(function (resp) {
            return resp.data.mails;
          });
        }

        function all() {
          return readMails();
        }

        function get(id) {
          return readMails().then(function(mails){
            for (var i = 0; i < mails.length; i++) {
              if (+mails[i].id === +id) return mails[i];
            }
            return null;
          });
        }
    }
})();


(function() {
    'use strict';

    angular
        .module('app.mailbox')
        .controller('MailViewController', MailViewController);

    MailViewController.$inject = ['mails', '$stateParams'];
    function MailViewController(mails, $stateParams) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          mails.get($stateParams.mid).then(function(mail){
            vm.mail = mail;
          });
        }
    }
})();

/**=========================================================
 * Module: modals.js
 * Provides a simple way to implement bootstrap modals from templates
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.maps')
        .controller('ModalGmapController', ModalGmapController);

    ModalGmapController.$inject = ['$modal'];
    function ModalGmapController($modal) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          vm.open = function (size) {

            //var modalInstance = 
            $modal.open({
              templateUrl: '/myModalContent.html',
              controller: ModalInstanceCtrl,
              size: size
            });
          };

          // Please note that $modalInstance represents a modal window (instance) dependency.
          // It is not the same as the $modal service used above.
          
          ModalInstanceCtrl.$inject = ['$scope', '$modalInstance', '$timeout'];
          function ModalInstanceCtrl($scope, $modalInstance, $timeout) {

            $modalInstance.opened.then(function () {
              var position = new google.maps.LatLng(33.790807, -117.835734);

              $scope.mapOptionsModal = {
                zoom: 14,
                center: position,
                mapTypeId: google.maps.MapTypeId.ROADMAP
              };

              // we use timeout to wait maps to be ready before add a markers
              $timeout(function(){
                // 1. Add a marker at the position it was initialized
                new google.maps.Marker({
                  map: $scope.myMapModal,
                  position: position
                });
                // 2. Trigger a resize so the map is redrawed 
                google.maps.event.trigger($scope.myMapModal, 'resize');
                // 3. Move to the center if it is misaligned
                $scope.myMapModal.panTo(position);
              });

            });

            $scope.ok = function () {
              $modalInstance.close('closed');
            };

            $scope.cancel = function () {
              $modalInstance.dismiss('cancel');
            };

          }
          
        }
    }

})();


(function() {
    'use strict';

    angular
        .module('app.maps')
        .controller('GMapController', GMapController);

    GMapController.$inject = ['$timeout'];
    function GMapController($timeout) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          var position = [
              new google.maps.LatLng(33.790807, -117.835734),
              new google.maps.LatLng(33.790807, -117.835734),
              new google.maps.LatLng(33.790807, -117.835734),
              new google.maps.LatLng(33.790807, -117.835734),
              new google.maps.LatLng(33.787453, -117.835858)
            ];
          
          vm.addMarker = addMarker;
          // we use timeout to wait maps to be ready before add a markers
          $timeout(function(){
            addMarker(vm.myMap1, position[0]);
            addMarker(vm.myMap2, position[1]);
            addMarker(vm.myMap3, position[2]);
            addMarker(vm.myMap5, position[3]);
          });

          vm.mapOptions1 = {
            zoom: 14,
            center: position[0],
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            scrollwheel: false
          };

          vm.mapOptions2 = {
            zoom: 19,
            center: position[1],
            mapTypeId: google.maps.MapTypeId.ROADMAP
          };

          vm.mapOptions3 = {
            zoom: 14,
            center: position[2],
            mapTypeId: google.maps.MapTypeId.SATELLITE
          };

          vm.mapOptions4 = {
            zoom: 14,
            center: position[3],
            mapTypeId: google.maps.MapTypeId.ROADMAP
          };

          // for multiple markers
          $timeout(function(){
            addMarker(vm.myMap4, position[3]);
            addMarker(vm.myMap4, position[4]);
          });

          // custom map style
          var MapStyles = [{'featureType':'water','stylers':[{'visibility':'on'},{'color':'#bdd1f9'}]},{'featureType':'all','elementType':'labels.text.fill','stylers':[{'color':'#334165'}]},{featureType:'landscape',stylers:[{color:'#e9ebf1'}]},{featureType:'road.highway',elementType:'geometry',stylers:[{color:'#c5c6c6'}]},{featureType:'road.arterial',elementType:'geometry',stylers:[{color:'#fff'}]},{featureType:'road.local',elementType:'geometry',stylers:[{color:'#fff'}]},{featureType:'transit',elementType:'geometry',stylers:[{color:'#d8dbe0'}]},{featureType:'poi',elementType:'geometry',stylers:[{color:'#cfd5e0'}]},{featureType:'administrative',stylers:[{visibility:'on'},{lightness:33}]},{featureType:'poi.park',elementType:'labels',stylers:[{visibility:'on'},{lightness:20}]},{featureType:'road',stylers:[{color:'#d8dbe0',lightness:20}]}];
          vm.mapOptions5 = {
            zoom: 14,
            center: position[3],
            styles: MapStyles,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            scrollwheel: false
          };

          ///////////////
          
          function addMarker(map, position) {
            return new google.maps.Marker({
              map: map,
              position: position
            });
          }

        }
    }
})();

/**=========================================================
 * Module: vector-map.js.js
 * Init jQuery Vector Map plugin
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.maps')
        .directive('vectorMap', vectorMap);

    vectorMap.$inject = ['VectorMap'];
    function vectorMap (VectorMap) {
        var directive = {
            link: link,
            restrict: 'EA',
            scope: {
              seriesData: '=',
              markersData: '='
            }
        };
        return directive;

        function link(scope, element, attrs) {
          
          var defaultColors = {
              markerColor:  '#23b7e5',      // the marker points
              bgColor:      'transparent',      // the background
              scaleColors:  ['#878c9a'],    // the color of the region in the serie
              regionFill:   '#bbbec6'       // the base region color
          };

          var mapHeight   = attrs.height || '300',
              options     = {
                markerColor:  attrs.markerColor  || defaultColors.markerColor,
                bgColor:      attrs.bgColor      || defaultColors.bgColor,
                scale:        attrs.scale        || 1,
                scaleColors:  attrs.scaleColors  || defaultColors.scaleColors,
                regionFill:   attrs.regionFill   || defaultColors.regionFill,
                mapName:      attrs.mapName      || 'world_mill_en'
              };
          
          element.css('height', mapHeight);
          
          VectorMap.init( element , options, scope.seriesData, scope.markersData);
        }
    }

})();

/**=========================================================
 * Module: vector-map.js
 * Services to initialize vector map plugin
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.maps')
        .service('VectorMap', VectorMap);

    function VectorMap() {
        this.init = init;

        ////////////////

        function init($element, opts, series, markers) {
          $element.vectorMap({
            map:             opts.mapName,
            backgroundColor: opts.bgColor,
            zoomMin:         1,
            zoomMax:         8,
            zoomOnScroll:    false,
            regionStyle: {
              initial: {
                'fill':           opts.regionFill,
                'fill-opacity':   1,
                'stroke':         'none',
                'stroke-width':   1.5,
                'stroke-opacity': 1
              },
              hover: {
                'fill-opacity': 0.8
              },
              selected: {
                fill: 'blue'
              },
              selectedHover: {
              }
            },
            focusOn:{ x:0.4, y:0.6, scale: opts.scale},
            markerStyle: {
              initial: {
                fill: opts.markerColor,
                stroke: opts.markerColor
              }
            },
            onRegionLabelShow: function(e, el, code) {
              if ( series && series[code] )
                el.html(el.html() + ': ' + series[code] + ' visitors');
            },
            markers: markers,
            series: {
                regions: [{
                    values: series,
                    scale: opts.scaleColors,
                    normalizeFunction: 'polynomial'
                }]
            },
          });
        }
    }
})();

/**=========================================================
 * Module: vmaps,js
 * jVector Maps support
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.maps')
        .controller('VectorMapController', VectorMapController);

    function VectorMapController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.seriesData = {
            'CA': 11100,   // Canada
            'DE': 2510,    // Germany
            'FR': 3710,    // France
            'AU': 5710,    // Australia
            'GB': 8310,    // Great Britain
            'RU': 9310,    // Russia
            'BR': 6610,    // Brazil
            'IN': 7810,    // India
            'CN': 4310,    // China
            'US': 839,     // USA
            'SA': 410      // Saudi Arabia
          };
          
          vm.markersData = [
            { latLng:[41.90, 12.45],  name:'Vatican City'          },
            { latLng:[43.73, 7.41],   name:'Monaco'                },
            { latLng:[-0.52, 166.93], name:'Nauru'                 },
            { latLng:[-8.51, 179.21], name:'Tuvalu'                },
            { latLng:[7.11,171.06],   name:'Marshall Islands'      },
            { latLng:[17.3,-62.73],   name:'Saint Kitts and Nevis' },
            { latLng:[3.2,73.22],     name:'Maldives'              },
            { latLng:[35.88,14.5],    name:'Malta'                 },
            { latLng:[41.0,-71.06],   name:'New England'           },
            { latLng:[12.05,-61.75],  name:'Grenada'               },
            { latLng:[13.16,-59.55],  name:'Barbados'              },
            { latLng:[17.11,-61.85],  name:'Antigua and Barbuda'   },
            { latLng:[-4.61,55.45],   name:'Seychelles'            },
            { latLng:[7.35,134.46],   name:'Palau'                 },
            { latLng:[42.5,1.51],     name:'Andorra'               }
          ];
        }
    }
})();

/**=========================================================
 * Module: navbar-search.js
 * Navbar search toggler * Auto dismiss on ESC key
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.navsearch')
        .directive('searchOpen', searchOpen)
        .directive('searchDismiss', searchDismiss);

    //
    // directives definition
    // 
    
    function searchOpen () {
        var directive = {
            controller: searchOpenController,
            restrict: 'A'
        };
        return directive;

    }

    function searchDismiss () {
        var directive = {
            controller: searchDismissController,
            restrict: 'A'
        };
        return directive;
        
    }

    //
    // Contrller definition
    // 
    
    searchOpenController.$inject = ['$scope', '$element', 'NavSearch'];
    function searchOpenController ($scope, $element, NavSearch) {
      $element
        .on('click', function (e) { e.stopPropagation(); })
        .on('click', NavSearch.toggle);
    }

    searchDismissController.$inject = ['$scope', '$element', 'NavSearch'];
    function searchDismissController ($scope, $element, NavSearch) {
      
      var inputSelector = '.navbar-form input[type="text"]';

      $(inputSelector)
        .on('click', function (e) { e.stopPropagation(); })
        .on('keyup', function(e) {
          if (e.keyCode === 27) // ESC
            NavSearch.dismiss();
        });
        
      // click anywhere closes the search
      $(document).on('click', NavSearch.dismiss);
      // dismissable options
      $element
        .on('click', function (e) { e.stopPropagation(); })
        .on('click', NavSearch.dismiss);
    }

})();


/**=========================================================
 * Module: nav-search.js
 * Services to share navbar search functions
 =========================================================*/
 
(function() {
    'use strict';

    angular
        .module('app.navsearch')
        .service('NavSearch', NavSearch);

    function NavSearch() {
        this.toggle = toggle;
        this.dismiss = dismiss;

        ////////////////

        var navbarFormSelector = 'form.navbar-form';

        function toggle() {
          var navbarForm = $(navbarFormSelector);

          navbarForm.toggleClass('open');
          
          var isOpen = navbarForm.hasClass('open');
          
          navbarForm.find('input')[isOpen ? 'focus' : 'blur']();
        }

        function dismiss() {
          $(navbarFormSelector)
            .removeClass('open') // Close control
            .find('input[type="text"]').blur() // remove focus
            .val('') // Empty input
            ;
        }        
    }
})();

/**=========================================================
 * Module: demo-notify.js
 * Provides a simple demo for notify
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.notify')
        .controller('NotifyDemoCtrl', NotifyDemoCtrl);

    NotifyDemoCtrl.$inject = ['Notify', '$timeout'];
    function NotifyDemoCtrl(Notify, $timeout) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.msgHtml = '<em class="fa fa-check"></em> Message with icon..';

          vm.notifyMsg = 'Some messages here..';
          vm.notifyOpts = {
            status: 'danger',
            pos: 'bottom-center'
          };

          // Service usage example
          $timeout(function(){
            
            Notify.alert( 
                'This is a custom message from notify..', 
                {status: 'success'}
            );
          
          }, 500);
        }
    }
})();

/**=========================================================
 * Module: notify.js
 * Directive for notify plugin
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.notify')
        .directive('notify', notify);

    notify.$inject = ['$window', 'Notify'];
    function notify ($window, Notify) {

        var directive = {
            link: link,
            restrict: 'A',
            scope: {
              options: '=',
              message: '='
            }
        };
        return directive;

        function link(scope, element) {

          element.on('click', function (e) {
            e.preventDefault();
            Notify.alert(scope.message, scope.options);
          });
        }

    }

})();


/**=========================================================
 * Module: notify.js
 * Create a notifications that fade out automatically.
 * Based on Notify addon from UIKit (http://getuikit.com/docs/addons_notify.html)
 =========================================================*/

(function() {
    'use strict';
    angular
        .module('app.notify')
        .service('Notify', Notify);

    Notify.$inject = ['$timeout'];
    function Notify($timeout) {

        this.alert = notifyAlert;

        ////////////////

        function notifyAlert(msg, opts) {
            if ( msg ) {
                $timeout(function(){
                    $.notify(msg, opts || {});
                });
            }
        }
    }

})();

/**
 * Notify Addon definition as jQuery plugin
 * Adapted version to work with Bootstrap classes
 * More information http://getuikit.com/docs/addons_notify.html
 */
(function($){
    'use strict';
    var containers = {},
        messages   = {},
        notify     =  function(options){
            if ($.type(options) === 'string') {
                options = { message: options };
            }
            if (arguments[1]) {
                options = $.extend(options, $.type(arguments[1]) === 'string' ? {status:arguments[1]} : arguments[1]);
            }
            return (new Message(options)).show();
        },
        closeAll  = function(group, instantly){
            var id;
            if(group) {
                for(id in messages) { if(group===messages[id].group) messages[id].close(instantly); }
            } else {
                for(id in messages) { messages[id].close(instantly); }
            }
        };
    var Message = function(options){
        // var $this = this;
        this.options = $.extend({}, Message.defaults, options);
        this.uuid    = 'ID'+(new Date().getTime())+'RAND'+(Math.ceil(Math.random() * 100000));
        this.element = $([
            // @geedmo: alert-dismissable enables bs close icon
            '<div class="uk-notify-message alert-dismissable">',
                '<a class="close">&times;</a>',
                '<div>'+this.options.message+'</div>',
            '</div>'
        ].join('')).data('notifyMessage', this);
        // status
        if (this.options.status) {
            this.element.addClass('alert alert-'+this.options.status);
            this.currentstatus = this.options.status;
        }
        this.group = this.options.group;
        messages[this.uuid] = this;
        if(!containers[this.options.pos]) {
            containers[this.options.pos] = $('<div class="uk-notify uk-notify-'+this.options.pos+'"></div>').appendTo('body').on('click', '.uk-notify-message', function(){
                $(this).data('notifyMessage').close();
            });
        }
    };
    $.extend(Message.prototype, {
        uuid: false,
        element: false,
        timout: false,
        currentstatus: '',
        group: false,
        show: function() {
            if (this.element.is(':visible')) return;
            var $this = this;
            containers[this.options.pos].show().prepend(this.element);
            var marginbottom = parseInt(this.element.css('margin-bottom'), 10);
            this.element.css({'opacity':0, 'margin-top': -1*this.element.outerHeight(), 'margin-bottom':0}).animate({'opacity':1, 'margin-top': 0, 'margin-bottom':marginbottom}, function(){
                if ($this.options.timeout) {
                    var closefn = function(){ $this.close(); };
                    $this.timeout = setTimeout(closefn, $this.options.timeout);
                    $this.element.hover(
                        function() { clearTimeout($this.timeout); },
                        function() { $this.timeout = setTimeout(closefn, $this.options.timeout);  }
                    );
                }
            });
            return this;
        },
        close: function(instantly) {
            var $this    = this,
                finalize = function(){
                    $this.element.remove();
                    if(!containers[$this.options.pos].children().length) {
                        containers[$this.options.pos].hide();
                    }
                    delete messages[$this.uuid];
                };
            if(this.timeout) clearTimeout(this.timeout);
            if(instantly) {
                finalize();
            } else {
                this.element.animate({'opacity':0, 'margin-top': -1* this.element.outerHeight(), 'margin-bottom':0}, function(){
                    finalize();
                });
            }
        },
        content: function(html){
            var container = this.element.find('>div');
            if(!html) {
                return container.html();
            }
            container.html(html);
            return this;
        },
        status: function(status) {
            if(!status) {
                return this.currentstatus;
            }
            this.element.removeClass('alert alert-'+this.currentstatus).addClass('alert alert-'+status);
            this.currentstatus = status;
            return this;
        }
    });
    Message.defaults = {
        message: '',
        status: 'normal',
        timeout: 5000,
        group: null,
        pos: 'top-center'
    };
    
    $.notify          = notify;
    $.notify.message  = Message;
    $.notify.closeAll = closeAll;
    
    return notify;
}(jQuery));

/**=========================================================
 * Module: access-login.js
 * Demo for login api
 =========================================================*/

(function () {
    'use strict';

    angular
        .module('app.pages', ['ab-base64'])
        .controller('LoginFormController', LoginFormController);

    LoginFormController.$inject = ['$rootScope', '$scope', '$cookieStore', '$http', '$state', '$q', '$localStorage', 'base64', 'permissions'];
    function LoginFormController($rootScope, $scope, $cookieStore, $http, $state, $q, $localStorage, base64, permissions) {
        var vm = this;

        $scope.authCompletedCB = function (fragment) {

            $scope.$apply(function () {

                if (fragment.status == '1' && fragment.gitToken != '' && fragment.ucToken != '') {
                    //根据短token去查询带有权限的token
                    $localStorage.token = fragment.ucToken;
                    $http
                        .get(uc_url + 'user/getLongToken.json')
                        .then(function (response) {
                            if (response.data.status != 1) {
                                vm.authMsg = response.data.msg;
                            } else {
                                document.cookie="kpk="+fragment.gitToken+"; path=/";
                                vm.saveToken(response);
                                // if(isPropertyEmpty(localStorage.getItem('users'))){
                                getAllUser($http,function(users){
                                    localStorage.setItem('users',JSON.stringify(users));
                                });
                                // }
                            }
                        }, function () {
                            vm.authMsg = '登陆服务发生错误，请联系管理员';
                        });
                }else{
                    vm.authMsg = '三方登陆认证失败！';
                }

            });
        }

        activate();

        ////////////////

        function activate() {
            // bind here all data from the form
            vm.account = {};
            // place the message if something goes wrong
            vm.authMsg = '';

            vm.login = function () {
                vm.authMsg = '';

                if (vm.loginForm.$valid) {

                    var loginData = {"username": vm.account.email, "password": vm.account.password};

                    $http
                        .get(uc_url + 'user/login.json?data='+JSON.stringify(loginData))
                        .then(function (response) {
                            if (response.data.status != 1) {
                                vm.authMsg = response.data.msg;
                            } else {
                                vm.saveToken(response);
                                // if(isPropertyEmpty(localStorage.getItem('users'))){
                                getAllUser($http,function(users){
                                    localStorage.setItem('users',JSON.stringify(users));
                                });
                                // }
                            }
                        }, function () {
                            vm.authMsg = '登陆服务发生错误，请联系管理员';
                        });
                }
                else {
                    vm.loginForm.account_email.$dirty = true;
                    vm.loginForm.account_password.$dirty = true;
                }
            };

            vm.gitAuthProvider = function () {

                window.$windowScope = $scope;

                var oauthWindow = window.open(uc_url + 'oauth/authorization_code.json?feedback='+encodeURIComponent(window.location.href.split('#')[0]+'authcomplete.html'), "三方登陆认证", "location=0,status=0,width=600,height=750");
            };

            vm.saveToken = function(response) {
                //登陆成功记录token
                $localStorage.token = response.data.token;
                $localStorage.isAuthenticated = true;
                var tokenArray = $localStorage.token.split('.');
                $localStorage.loginUserInfo = JSON.parse(base64.urldecode(tokenArray[1]));
                $rootScope.user = {
                    id:        $localStorage.loginUserInfo.user.id,
                    name:     $localStorage.loginUserInfo.user.name,
                    job:      $localStorage.loginUserInfo.iss,
                    picture:  $localStorage.loginUserInfo.user.avatarUrl
                };
                permissions.setPermissions($localStorage.loginUserInfo.permissions);
                //记录cookies
                document.cookie="kuid="+$localStorage.loginUserInfo.uid+"; path=/";
                $state.go('app.artist');
            };
        }
    }

})();

/**=========================================================
 * Module: access-register.js
 * Demo for register account api
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.pages')
        .controller('RegisterFormController', RegisterFormController);

    RegisterFormController.$inject = ['$http', '$state'];
    function RegisterFormController($http, $state) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          // bind here all data from the form
          vm.account = {};
          // place the message if something goes wrong
          vm.authMsg = '';
            
          vm.register = function() {
            vm.authMsg = '';

            if(vm.registerForm.$valid) {

              var dataParameter = {"username":vm.account.email,"password":vm.account.password};

              $http
                .jsonp(uc_url + 'user/register.json?callback=JSON_CALLBACK&data='+JSON.stringify(dataParameter))
                .then(function(response) {
                      console.log(response.data.status);
                  // assumes if ok, response is an object with some data, if not, a string with error
                  // customize according to your api
                  if ( response.account != 1 ) {
                      vm.authMsg = response.data.msg;
                  }else{
                    //$state.go('app.dashboard');
                  }
                }, function() {
                  vm.authMsg = 'Server Request Error';
                });
            }
            else {
              // set as dirty if the user click directly to login so we show the validation messages
              /*jshint -W106*/
              vm.registerForm.account_email.$dirty = true;
              vm.registerForm.account_password.$dirty = true;
              vm.registerForm.account_agreed.$dirty = true;
              
            }
          };
        }
    }
})();

'use strict';
angular.module('app.pages').factory('authInterceptorService', ['$q', '$injector', '$location', '$localStorage','$cookies', function ($q, $injector, $location, $localStorage,$cookies) {

    var authInterceptorServiceFactory = {};

    var _request = function (config) {

        if(checkEmpty($cookies.get('kuid'))) $location.path('/page/login'); //如果cookie不存在，重新登录
        // if(!$localStorage.loginUserInfo) $location.path('/page/login'); //如果localstorage用户不存在，重新登录

        config.headers = config.headers || {};
        var authData = $localStorage.token;
        if (authData) {
            config.headers.Authorization = authData;
        }
        return config;
    };

    var _responseError = function (rejection) {
        if (rejection.status === 401) {
            //var authService = $injector.get('authService');
            var authData = $localStorage.token;

            if (authData) {
                if (authData.useRefreshTokens) {
                    $location.path('/refresh');
                    return $q.reject(rejection);
                }
            }
            //authService.logOut();
            $location.path('/page/login');
        }
        return $q.reject(rejection);
    };

    authInterceptorServiceFactory.request = _request;
    authInterceptorServiceFactory.responseError = _responseError;

    return authInterceptorServiceFactory;
}]);
/**
 * Created by Administrator on 2016/5/23.
 */

angular.module('app.pages').directive('hasPermission', ["permissions", function(permissions) {     //根据权限字符串对页面元素进行显示和隐藏
    return {
        link: function(scope, element, attrs) {

            var value = attrs.hasPermission.trim();
            var notPermissionFlag = value[0] === '!';
            if(notPermissionFlag) {
                value = value.slice(1).trim();
            }

            function toggleVisibilityBasedOnPermission() {
                var hasPermission = permissions.hasPermission(value);

                if(hasPermission && !notPermissionFlag || !hasPermission && notPermissionFlag)
                    $(element).show();
                else
                    $(element).hide();
            }
            toggleVisibilityBasedOnPermission();
            scope.$on('permissionsChanged', toggleVisibilityBasedOnPermission);
        }
    };
}]);
/**
 * Created by hao.cheng on 2015/11/19.
 * 权限验证service
 */
angular.module('app.pages').factory('permissions', ["$rootScope", function ($rootScope) {        //service全局global变量以及方法
    $rootScope.checkb = false;
    $rootScope.choseArr = [];
    var permissionList = [];
    return {
        setPermissions: function(permissions) {
            permissionList = permissions;
            $rootScope.$broadcast('permissionsChanged')
        },
        hasPermission: function (permission) {
            if(permission == undefined)
                return false;
            permission = permission.trim();
            if (permissionList.indexOf(permission.trim()) > -1) {
                return true;
            } else {
                return false;
            }
        }
    };
}]);

//通用方法
angular.module('app.pages').factory('display',["$rootScope", function($rootScope){
    $rootScope.display = false;
    $rootScope.msg = '';
    $rootScope.date = new Date();
    return {
        setShow: function(){
            return true;
        },
        setHide: function(){
            return false;
        }
    }
}]);


angular.module('app.pages').factory('authority',["$http", "$state", function($http,$state){
    return {
        getAuth: function(type,id){
            var url = edit_auth + '/'+type+'/' + id + '.json?'+CALLBACK;
            return $http.jsonp(url).then(function(res){
                console.log(res);
                if(res.data.status == 1){
                    var url = $state.href('songEdit',{'songId':id,'auth':res.data.data.auth,'lastPage':returnLastPageTime()})
                    window.open(url,'_blank');
                }
                return res;
            });
        }
    }
}]);

/**=========================================================
 * Collapse panels * [panel-collapse]
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.panels')
        .directive('panelCollapse', panelCollapse);

    function panelCollapse () {
        var directive = {
            controller: Controller,
            restrict: 'A',
            scope: false
        };
        return directive;
    }

    Controller.$inject = ['$scope', '$element', '$timeout', '$localStorage'];
    function Controller ($scope, $element, $timeout, $localStorage) {
      var storageKeyName = 'panelState';

      // Prepare the panel to be collapsible
      var $elem   = $($element),
          parent  = $elem.closest('.panel'), // find the first parent panel
          panelId = parent.attr('id');

      // Load the saved state if exists
      var currentState = loadPanelState( panelId );
      if ( typeof currentState !== 'undefined') {
        $timeout(function(){
            $scope[panelId] = currentState; },
          10);
      }

      // bind events to switch icons
      $element.bind('click', function(e) {
        e.preventDefault();
        savePanelState( panelId, !$scope[panelId] );

      });
  
      // Controller helpers
      function savePanelState(id, state) {
        if(!id) return false;
        var data = angular.fromJson($localStorage[storageKeyName]);
        if(!data) { data = {}; }
        data[id] = state;
        $localStorage[storageKeyName] = angular.toJson(data);
      }
      function loadPanelState(id) {
        if(!id) return false;
        var data = angular.fromJson($localStorage[storageKeyName]);
        if(data) {
          return data[id];
        }
      }
    }

})();

/**=========================================================
 * Dismiss panels * [panel-dismiss]
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.panels')
        .directive('panelDismiss', panelDismiss);

    function panelDismiss () {

        var directive = {
            controller: Controller,
            restrict: 'A'
        };
        return directive;

    }

    Controller.$inject = ['$scope', '$element', '$q', 'Utils'];
    function Controller ($scope, $element, $q, Utils) {
      var removeEvent   = 'panel-remove',
          removedEvent  = 'panel-removed';

      $element.on('click', function (e) {
        e.preventDefault();

        // find the first parent panel
        var parent = $(this).closest('.panel');

        removeElement();

        function removeElement() {
          var deferred = $q.defer();
          var promise = deferred.promise;
          
          // Communicate event destroying panel
          $scope.$emit(removeEvent, parent.attr('id'), deferred);
          promise.then(destroyMiddleware);
        }

        // Run the animation before destroy the panel
        function destroyMiddleware() {
          if(Utils.support.animation) {
            parent.animo({animation: 'bounceOut'}, destroyPanel);
          }
          else destroyPanel();
        }

        function destroyPanel() {

          var col = parent.parent();
          parent.remove();
          // remove the parent if it is a row and is empty and not a sortable (portlet)
          col
            .filter(function() {
            var el = $(this);
            return (el.is('[class*="col-"]:not(.sortable)') && el.children('*').length === 0);
          }).remove();

          // Communicate event destroyed panel
          $scope.$emit(removedEvent, parent.attr('id'));

        }

      });
    }
})();



/**=========================================================
 * Refresh panels
 * [panel-refresh] * [data-spinner="standard"]
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.panels')
        .directive('panelRefresh', panelRefresh);

    function panelRefresh () {
        var directive = {
            controller: Controller,
            restrict: 'A',
            scope: false
        };
        return directive;

    }

    Controller.$inject = ['$scope', '$element'];
    function Controller ($scope, $element) {
      var refreshEvent   = 'panel-refresh',
          whirlClass     = 'whirl',
          defaultSpinner = 'standard';

      // catch clicks to toggle panel refresh
      $element.on('click', function (e) {
        e.preventDefault();

        var $this   = $(this),
            panel   = $this.parents('.panel').eq(0),
            spinner = $this.data('spinner') || defaultSpinner
            ;

        // start showing the spinner
        panel.addClass(whirlClass + ' ' + spinner);

        // Emit event when refresh clicked
        $scope.$emit(refreshEvent, panel.attr('id'));

      });

      // listen to remove spinner
      $scope.$on('removeSpinner', removeSpinner);

      // method to clear the spinner when done
      function removeSpinner (ev, id) {
        if (!id) return;
        var newid = id.charAt(0) === '#' ? id : ('#'+id);
        angular
          .element(newid)
          .removeClass(whirlClass);
      }
    }
})();



/**=========================================================
 * Module panel-tools.js
 * Directive tools to control panels. 
 * Allows collapse, refresh and dismiss (remove)
 * Saves panel state in browser storage
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.panels')
        .directive('paneltool', paneltool);

    paneltool.$inject = ['$compile', '$timeout'];
    function paneltool ($compile, $timeout) {
        var directive = {
            link: link,
            restrict: 'E',
            scope: false
        };
        return directive;

        function link(scope, element, attrs) {

          var templates = {
            /* jshint multistr: true */
            collapse:'<a href="#" panel-collapse="" tooltip="Collapse Panel" ng-click="{{panelId}} = !{{panelId}}"> \
                        <em ng-show="{{panelId}}" class="fa fa-plus"></em> \
                        <em ng-show="!{{panelId}}" class="fa fa-minus"></em> \
                      </a>',
            dismiss: '<a href="#" panel-dismiss="" tooltip="Close Panel">\
                       <em class="fa fa-times"></em>\
                     </a>',
            refresh: '<a href="#" panel-refresh="" data-spinner="{{spinner}}" tooltip="Refresh Panel">\
                       <em class="fa fa-refresh"></em>\
                     </a>'
          };

          var tools = scope.panelTools || attrs;
      
          $timeout(function() {
            element.html(getTemplate(element, tools )).show();
            $compile(element.contents())(scope);
            
            element.addClass('pull-right');
          });
  
          function getTemplate( elem, attrs ){
            var temp = '';
            attrs = attrs || {};
            if(attrs.toolCollapse)
              temp += templates.collapse.replace(/{{panelId}}/g, (elem.parent().parent().attr('id')) );
            if(attrs.toolDismiss)
              temp += templates.dismiss;
            if(attrs.toolRefresh)
              temp += templates.refresh.replace(/{{spinner}}/g, attrs.toolRefresh);
            return temp;
          }
        }// link
    } 

})();

/**=========================================================
 * Module: demo-panels.js
 * Provides a simple demo for panel actions
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.panels')
        .controller('PanelsCtrl', PanelsCtrl);

    PanelsCtrl.$inject = ['$scope', '$timeout'];
    function PanelsCtrl($scope, $timeout) {

        activate();

        ////////////////

        function activate() {

          // PANEL COLLAPSE EVENTS
          // ----------------------------------- 

          // We can use panel id name for the boolean flag to [un]collapse the panel
          $scope.$watch('panelDemo1',function(newVal){
              
              console.log('panelDemo1 collapsed: ' + newVal);

          });


          // PANEL DISMISS EVENTS
          // ----------------------------------- 

          // Before remove panel
          $scope.$on('panel-remove', function(event, id, deferred){
            
            console.log('Panel #' + id + ' removing');
            
            // Here is obligatory to call the resolve() if we pretend to remove the panel finally
            // Not calling resolve() will NOT remove the panel
            // It's up to your app to decide if panel should be removed or not
            deferred.resolve();
          
          });

          // Panel removed ( only if above was resolved() )
          $scope.$on('panel-removed', function(event, id){

            console.log('Panel #' + id + ' removed');

          });


          // PANEL REFRESH EVENTS
          // ----------------------------------- 

          $scope.$on('panel-refresh', function(event, id) {
            var secs = 3;
            
            console.log('Refreshing during ' + secs +'s #'+id);

            $timeout(function(){
              // directive listen for to remove the spinner 
              // after we end up to perform own operations
              $scope.$broadcast('removeSpinner', id);
              
              console.log('Refreshed #' + id);

            }, 3000);

          });

          // PANELS VIA NG-REPEAT
          // ----------------------------------- 

          $scope.panels = [
            {
              id: 'panelRepeat1',
              title: 'Panel Title 1',
              body: 'Nulla eget lorem leo, sit amet elementum lorem. '
            },
            {
              id: 'panelRepeat2',
              title: 'Panel Title 2',
              body: 'Nulla eget lorem leo, sit amet elementum lorem. '
            },
            {
              id: 'panelRepeat3',
              title: 'Panel Title 3',
              body: 'Nulla eget lorem leo, sit amet elementum lorem. '
            }
          ];
        }

    } //PanelsCtrl

})();


/**=========================================================
 * Drag and drop any panel based on jQueryUI portlets
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.panels')
        .directive('portlet', portlet);

    portlet.$inject = ['$timeout', '$localStorage'];
    function portlet ($timeout, $localStorage) {
      var storageKeyName = 'portletState';

      return {
        restrict: 'A',
        link: link
      };

      /////////////

      function link(scope, element) {
          
        // not compatible with jquery sortable
        if(!$.fn.sortable) return;

        element.sortable({
          connectWith:          '[portlet]', // same like directive 
          items:                'div.panel',
          handle:               '.portlet-handler',
          opacity:              0.7,
          placeholder:          'portlet box-placeholder',
          cancel:               '.portlet-cancel',
          forcePlaceholderSize: true,
          iframeFix:            false,
          tolerance:            'pointer',
          helper:               'original',
          revert:               200,
          forceHelperSize:      true,
          update:               savePortletOrder,
          create:               loadPortletOrder
        });

      }


      function savePortletOrder(event/*, ui*/) {
        var self = event.target;
        var data = angular.fromJson($localStorage[storageKeyName]);
        
        if(!data) { data = {}; }

        data[self.id] = $(self).sortable('toArray');

        if(data) {
          $timeout(function() {
            $localStorage[storageKeyName] = angular.toJson(data);
          });
        }
      }

      function loadPortletOrder(event) {
        var self = event.target;
        var data = angular.fromJson($localStorage[storageKeyName]);

        if(data) {
          
          var porletId = self.id,
              panels   = data[porletId];

          if(panels) {
            var portlet = $('#'+porletId);
            
            $.each(panels, function(index, value) {
               $('#'+value).appendTo(portlet);
            });
          }

        }
      }

    }

})();
 
(function() {
    'use strict';

    angular
        .module('app.preloader')
        .directive('preloader', preloader);

    preloader.$inject = ['$animate', '$timeout', '$q'];
    function preloader ($animate, $timeout, $q) {

        var directive = {
            restrict: 'EAC',
            template: 
              '<div class="preloader-progress">' +
                  '<div class="preloader-progress-bar" ' +
                       'ng-style="{width: loadCounter + \'%\'}"></div>' +
              '</div>'
            ,
            link: link
        };
        return directive;

        ///////

        function link(scope, el) {

          scope.loadCounter = 0;

          var counter  = 0,
              timeout;

          // disables scrollbar
          //angular.element('body').css('overflow', 'hidden');      //开场动画需要
          // ensure class is present for styling
          //el.addClass('preloader');               //开场动画需要

          appReady().then(endCounter);

          timeout = $timeout(startCounter);

          ///////

          function startCounter() {

            var remaining = 100 - counter;
            counter = counter + (0.015 * Math.pow(1 - Math.sqrt(remaining), 2));

            scope.loadCounter = parseInt(counter, 10);

            timeout = $timeout(startCounter, 20);
          }

          function endCounter() {

            $timeout.cancel(timeout);

            scope.loadCounter = 100;

            $timeout(function(){
              // animate preloader hiding
              $animate.addClass(el, 'preloader-hidden');
              // retore scrollbar
              angular.element('body').css('overflow', '');
            }, 300);
          }

          function appReady() {
            var deferred = $q.defer();
            var viewsLoaded = 0;
            // if this doesn't sync with the real app ready
            // a custom event must be used instead
            var off = scope.$on('$viewContentLoaded', function () {
              viewsLoaded ++;
              // we know there are at least two views to be loaded 
              // before the app is ready (1-index.html 2-app*.html)
              if ( viewsLoaded === 2) {
                // with resolve this fires only once
                $timeout(function(){
                  deferred.resolve();
                }, 3000);

                off();
              }

            });

            return deferred.promise;
          }

        } //link
    }

})();
/**=========================================================
 * Module: helpers.js
 * Provides helper functions for routes definition
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.routes')
        .provider('RouteHelpers', RouteHelpersProvider)
        ;

    RouteHelpersProvider.$inject = ['APP_REQUIRES'];
    function RouteHelpersProvider(APP_REQUIRES) {

      /* jshint validthis:true */
      return {
        // provider access level
        basepath: basepath,
        resolveFor: resolveFor,
        // controller access level
        $get: function() {
          return {
            basepath: basepath,
            resolveFor: resolveFor
          };
        }
      };

      // Set here the base of the relative path
      // for all app views
      function basepath(uri) {
        return 'app/views/' + uri;
      }

      // Generates a resolve object by passing script names
      // previously configured in constant.APP_REQUIRES
      function resolveFor() {
        var _args = arguments;
        return {
          deps: ['$ocLazyLoad','$q', function ($ocLL, $q) {
            // Creates a promise chain for each argument
            var promise = $q.when(1); // empty promise
            for(var i=0, len=_args.length; i < len; i ++){
              promise = andThen(_args[i]);
            }
            return promise;

            // creates promise to chain dynamically
            function andThen(_arg) {
              // also support a function that returns a promise
              if(typeof _arg === 'function')
                  return promise.then(_arg);
              else
                  return promise.then(function() {
                    // if is a module, pass the name. If not, pass the array
                    var whatToLoad = getRequired(_arg);
                    // simple error check
                    if(!whatToLoad) return $.error('Route resolve: Bad resource name [' + _arg + ']');
                    // finally, return a promise
                    return $ocLL.load( whatToLoad );
                  });
            }
            // check and returns required data
            // analyze module items with the form [name: '', files: []]
            // and also simple array of script files (for not angular js)
            function getRequired(name) {
              if (APP_REQUIRES.modules)
                  for(var m in APP_REQUIRES.modules)
                      if(APP_REQUIRES.modules[m].name && APP_REQUIRES.modules[m].name === name)
                          return APP_REQUIRES.modules[m];
              return APP_REQUIRES.scripts && APP_REQUIRES.scripts[name];
            }

          }]};
      } // resolveFor

    }


})();


/**=========================================================
 * Module: config.js
 * App routes and resources configuration
 =========================================================*/


(function() {
    'use strict';

    angular
        .module('app.routes')
        .config(routesConfig);

    routesConfig.$inject = ['$stateProvider', '$locationProvider', '$urlRouterProvider', 'RouteHelpersProvider'];
    function routesConfig($stateProvider, $locationProvider, $urlRouterProvider, helper){
        
        // Set the following to true to enable the HTML5 Mode
        // You may have to set <base> tag in index and a routing configuration in your server
        $locationProvider.html5Mode(false);

        // defaults to dashboard
        // $urlRouterProvider.otherwise('/app/dashboard');
        //  defaults to artist
        $urlRouterProvider.otherwise('/app/artist');

        // 
        // Application Routes
        // -----------------------------------   
        $stateProvider
          .state('app', {
              url: '/app',
              abstract: true,
              templateUrl: helper.basepath('app.html'),
                controller: 'AppController',
              resolve: helper.resolveFor('fastclick', 'modernizr', 'icons', 'screenfull', 'animo', 'sparklines', 'slimscroll', 'classyloader', 'toaster', 'whirl','oitozero.ngSweetAlert','ngDialog')
          })
          .state('app.dashboard', {
              url: '/dashboard',
              title: 'Dashboard',
              templateUrl: helper.basepath('dashboard.html'),
              resolve: helper.resolveFor('flot-chart','flot-chart-plugins', 'weather-icons')
          })
          .state('app.dashboard_v2', {
              url: '/dashboard_v2',
              title: 'Dashboard v2',
              templateUrl: helper.basepath('dashboard_v2.html'),
              controller: 'DashboardV2Controller',
              controllerAs: 'dash2',
              resolve: helper.resolveFor('flot-chart','flot-chart-plugins')
          })
          .state('app.dashboard_v3', {
              url: '/dashboard_v3',
              title: 'Dashboard v3',
              controller: 'DashboardV3Controller',
              controllerAs: 'dash3',
              templateUrl: helper.basepath('dashboard_v3.html'),
              resolve: helper.resolveFor('flot-chart','flot-chart-plugins', 'vector-map', 'vector-map-maps')
          })
          .state('app.widgets', {
              url: '/widgets',
              title: 'Widgets',
              templateUrl: helper.basepath('widgets.html'),
              resolve: helper.resolveFor('loadGoogleMapsJS', function() { return loadGoogleMaps(); }, 'ui.map')
          })
          .state('app.buttons', {
              url: '/buttons',
              title: 'Buttons',
              templateUrl: helper.basepath('buttons.html')
          })
          .state('app.colors', {
              url: '/colors',
              title: 'Colors',
              templateUrl: helper.basepath('colors.html')
          })
          .state('app.localization', {
              url: '/localization',
              title: 'Localization',
              templateUrl: helper.basepath('localization.html')
          })
          .state('app.infinite-scroll', {
              url: '/infinite-scroll',
              title: 'Infinite Scroll',
              templateUrl: helper.basepath('infinite-scroll.html'),
              resolve: helper.resolveFor('infinite-scroll')
          })
          .state('app.navtree', {
              url: '/navtree',
              title: 'Nav Tree',
              templateUrl: helper.basepath('nav-tree.html'),
              resolve: helper.resolveFor('angularBootstrapNavTree')
          })
          .state('app.nestable', {
              url: '/nestable',
              title: 'Nestable',
              templateUrl: helper.basepath('nestable.html'),
              resolve: helper.resolveFor('ng-nestable')
          })
          .state('app.sortable', {
              url: '/sortable',
              title: 'Sortable',
              templateUrl: helper.basepath('sortable.html'),
              resolve: helper.resolveFor('htmlSortable')
          })
          .state('app.notifications', {
              url: '/notifications',
              title: 'Notifications',
              templateUrl: helper.basepath('notifications.html')
          })
          .state('app.carousel', {
              url: '/carousel',
              title: 'Carousel',
              templateUrl: helper.basepath('carousel.html'),
              resolve: helper.resolveFor('angular-carousel')
          })
          .state('app.ngdialog', {
              url: '/ngdialog',
              title: 'ngDialog',
              templateUrl: helper.basepath('ngdialog.html'),
              resolve: angular.extend(helper.resolveFor('ngDialog'),{
                tpl: function() { return { path: helper.basepath('ngdialog-template.html') }; }
              }),
              controller: 'DialogIntroCtrl'
          })
          .state('app.sweetalert', {
            url: '/sweetalert',
            title: 'SweetAlert',
            templateUrl: helper.basepath('sweetalert.html'),
            resolve: helper.resolveFor('oitozero.ngSweetAlert')
          })
          .state('app.tour', {
            url: '/tour',
            title: 'Tour',
            templateUrl: helper.basepath('tour.html'),
            resolve: helper.resolveFor('bm.bsTour')
          })
          .state('app.interaction', {
              url: '/interaction',
              title: 'Interaction',
              templateUrl: helper.basepath('interaction.html')
          })
          .state('app.spinners', {
              url: '/spinners',
              title: 'Spinners',
              templateUrl: helper.basepath('spinners.html'),
              resolve: helper.resolveFor('loaders.css', 'spinkit')
          })
          .state('app.dropdown-animations', {
              url: '/dropdown-animations',
              title: 'Dropdown Animations',
              templateUrl: helper.basepath('dropdown-animations.html')
          })
          .state('app.panels', {
              url: '/panels',
              title: 'Panels',
              templateUrl: helper.basepath('panels.html')
          })
          .state('app.portlets', {
              url: '/portlets',
              title: 'Portlets',
              templateUrl: helper.basepath('portlets.html'),
              resolve: helper.resolveFor('jquery-ui', 'jquery-ui-widgets')
          })
          .state('app.maps-google', {
              url: '/maps-google',
              title: 'Maps Google',
              templateUrl: helper.basepath('maps-google.html'),
              resolve: helper.resolveFor('loadGoogleMapsJS', function() { return loadGoogleMaps(); }, 'ui.map')
          })
          .state('app.maps-vector', {
              url: '/maps-vector',
              title: 'Maps Vector',
              templateUrl: helper.basepath('maps-vector.html'),
              controller: 'VectorMapController',
              controllerAs: 'vmap',
              resolve: helper.resolveFor('vector-map', 'vector-map-maps')
          })
          .state('app.grid', {
              url: '/grid',
              title: 'Grid',
              templateUrl: helper.basepath('grid.html')
          })
          .state('app.grid-masonry', {
              url: '/grid-masonry',
              title: 'Grid Masonry',
              templateUrl: helper.basepath('grid-masonry.html')
          })
          .state('app.grid-masonry-deck', {
              url: '/grid-masonry-deck',
              title: 'Grid Masonry',
              templateUrl: helper.basepath('grid-masonry-deck.html'),
              resolve: helper.resolveFor('spinkit', 'akoenig.deckgrid')
          })    
          .state('app.typo', {
              url: '/typo',
              title: 'Typo',
              templateUrl: helper.basepath('typo.html')
          })
          .state('app.icons-font', {
              url: '/icons-font',
              title: 'Icons Font',
              templateUrl: helper.basepath('icons-font.html'),
              resolve: helper.resolveFor('icons')
          })
          .state('app.icons-weather', {
              url: '/icons-weather',
              title: 'Icons Weather',
              templateUrl: helper.basepath('icons-weather.html'),
              resolve: helper.resolveFor('weather-icons', 'skycons')
          })
          .state('app.form-standard', {
              url: '/form-standard',
              title: 'Form Standard',
              templateUrl: helper.basepath('form-standard.html')
          })
          .state('app.form-extended', {
              url: '/form-extended',
              title: 'Form Extended',
              templateUrl: helper.basepath('form-extended.html'),
              resolve: helper.resolveFor('codemirror', 'moment', 'taginput','inputmask','localytics.directives', 'ui.bootstrap-slider', 'ngWig', 'filestyle', 'textAngular')
          })
          .state('app.form-validation', {
              url: '/form-validation',
              title: 'Form Validation',
              templateUrl: helper.basepath('form-validation.html'),
              resolve: helper.resolveFor('ui.select', 'taginput','inputmask','localytics.directives')
          })
          .state('app.form-parsley', {
              url: '/form-parsley',
              title: 'Form Validation - Parsley',
              templateUrl: helper.basepath('form-parsley.html'),
              resolve: helper.resolveFor('parsley')
          })
          .state('app.form-wizard', {
              url: '/form-wizard',
              title: 'Form Wizard',
              templateUrl: helper.basepath('form-wizard.html'),
              resolve: helper.resolveFor('parsley')
          })
          .state('app.form-upload', {
              url: '/form-upload',
              title: 'Form upload',
              templateUrl: helper.basepath('form-upload.html'),
              resolve: helper.resolveFor('angularFileUpload', 'filestyle')
          })
          .state('app.form-xeditable', {
              url: '/form-xeditable',
              templateUrl: helper.basepath('form-xeditable.html'),
              resolve: helper.resolveFor('xeditable')
          })
          .state('app.form-imagecrop', {
              url: '/form-imagecrop',
              templateUrl: helper.basepath('form-imagecrop.html'),
              resolve: helper.resolveFor('ngImgCrop', 'filestyle')
          })
          .state('app.form-uiselect', {
              url: '/form-uiselect',
              templateUrl: helper.basepath('form-uiselect.html'),
              controller: 'uiSelectController',
              controllerAs: 'uisel',
              resolve: helper.resolveFor('ui.select')
          })
          .state('app.chart-flot', {
              url: '/chart-flot',
              title: 'Chart Flot',
              templateUrl: helper.basepath('chart-flot.html'),
              resolve: helper.resolveFor('flot-chart','flot-chart-plugins')
          })
          .state('app.chart-radial', {
              url: '/chart-radial',
              title: 'Chart Radial',
              templateUrl: helper.basepath('chart-radial.html'),
              resolve: helper.resolveFor('classyloader')
          })
          .state('app.chart-js', {
              url: '/chart-js',
              title: 'Chart JS',
              templateUrl: helper.basepath('chart-js.html'),
              resolve: helper.resolveFor('chartjs')
          })
          .state('app.chart-rickshaw', {
              url: '/chart-rickshaw',
              title: 'Chart Rickshaw',
              templateUrl: helper.basepath('chart-rickshaw.html'),
              resolve: helper.resolveFor('angular-rickshaw')
          })
          .state('app.chart-morris', {
              url: '/chart-morris',
              title: 'Chart Morris',
              templateUrl: helper.basepath('chart-morris.html'),
              resolve: helper.resolveFor('morris')
          })
          .state('app.chart-chartist', {
              url: '/chart-chartist',
              title: 'Chart Chartist',
              templateUrl: helper.basepath('chart-chartist.html'),
              resolve: helper.resolveFor('angular-chartist')
          })    
          .state('app.table-standard', {
              url: '/table-standard',
              title: 'Table Standard',
              templateUrl: helper.basepath('table-standard.html')
          })
          .state('app.table-extended', {
              url: '/table-extended',
              title: 'Table Extended',
              templateUrl: helper.basepath('table-extended.html')
          })
          .state('app.table-datatable', {
              url: '/table-datatable',
              title: 'Table Datatable',
              templateUrl: helper.basepath('table-datatable.html'),
              resolve: helper.resolveFor('datatables')
          })
          .state('app.table-xeditable', {
              url: '/table-xeditable',
              templateUrl: helper.basepath('table-xeditable.html'),
              resolve: helper.resolveFor('xeditable')
          })
          .state('app.table-ngtable', {
              url: '/table-ngtable',
              templateUrl: helper.basepath('table-ngtable.html'),
              resolve: helper.resolveFor('ngTable', 'ngTableExport')
          })
          .state('app.table-nggrid', {
              url: '/table-nggrid',
              templateUrl: helper.basepath('table-ng-grid.html'),
              resolve: helper.resolveFor('ngGrid')
          })
          .state('app.table-uigrid', {
              url: '/table-uigrid',
              templateUrl: helper.basepath('table-uigrid.html'),
              resolve: helper.resolveFor('ui.grid')
          })
          .state('app.table-angulargrid', {
              url: '/table-angulargrid',
              templateUrl: helper.basepath('table-angulargrid.html'),
              resolve: helper.resolveFor('angularGrid')
          })    
          .state('app.timeline', {
              url: '/timeline',
              title: 'Timeline',
              templateUrl: helper.basepath('timeline.html')
          })
          .state('app.calendar', {
              url: '/calendar',
              title: 'Calendar',
              templateUrl: helper.basepath('calendar.html'),
              resolve: helper.resolveFor('jquery-ui', 'jquery-ui-widgets', 'moment', 'fullcalendar')
          })
          .state('app.invoice', {
              url: '/invoice',
              title: 'Invoice',
              templateUrl: helper.basepath('invoice.html')
          })
          .state('app.search', {
              url: '/search',
              title: 'Search',
              templateUrl: helper.basepath('search.html'),
              resolve: helper.resolveFor('moment', 'localytics.directives', 'ui.bootstrap-slider')
          })
          .state('app.todo', {
              url: '/todo',
              title: 'Todo List',
              templateUrl: helper.basepath('todo.html'),
              controller: 'TodoController',
              controllerAs: 'todo'
          })
          .state('app.profile', {
              url: '/profile',
              title: 'Profile',
              templateUrl: helper.basepath('profile.html'),
              resolve: helper.resolveFor('loadGoogleMapsJS', function() { return loadGoogleMaps(); }, 'ui.map')
          })
          .state('app.code-editor', {
              url: '/code-editor',
              templateUrl: helper.basepath('code-editor.html'),
              controller: 'CodeEditorController',
              controllerAs: 'coder',
              resolve: {
                  deps: helper.resolveFor('codemirror', 'ui.codemirror', 'codemirror-modes-web', 'angularBootstrapNavTree').deps,
                  filetree: ['LoadTreeService', function (LoadTreeService) {
                      return LoadTreeService.get().$promise.then(function (res) {
                          return res.data;
                      });
                  }]
              }
          })
          .state('app.template', {
              url: '/template',
              title: 'Blank Template',
              templateUrl: helper.basepath('template.html')
          })
          .state('app.documentation', {
              url: '/documentation',
              title: 'Documentation',
              templateUrl: helper.basepath('documentation.html'),
              resolve: helper.resolveFor('flatdoc')
          })
          // Forum
          // ----------------------------------- 
          .state('app.forum', {
              url: '/forum',
              title: 'Forum',
              templateUrl: helper.basepath('forum.html')
          })
          .state('app.forum-topics', {
              url: '/forum/topics/:catid',
              title: 'Forum Topics',
              templateUrl: helper.basepath('forum-topics.html')
          })
          .state('app.forum-discussion', {
              url: '/forum/discussion/:topid',
              title: 'Forum Discussion',
              templateUrl: helper.basepath('forum-discussion.html')
          })
          // Blog
          // ----------------------------------- 
          .state('app.blog', {
              url: '/blog',
              title: 'Blog',
              templateUrl: helper.basepath('blog.html'),
              resolve: helper.resolveFor('angular-jqcloud')
          })
          .state('app.blog-post', {
              url: '/post',
              title: 'Post',
              templateUrl: helper.basepath('blog-post.html'),
              resolve: helper.resolveFor('angular-jqcloud')
          })
          .state('app.articles', {
              url: '/articles',
              title: 'Articles',
              templateUrl: helper.basepath('blog-articles.html'),
              resolve: helper.resolveFor('datatables')
          })
          .state('app.article-view', {
              url: '/article/:id',
              title: 'Article View',
              templateUrl: helper.basepath('blog-article-view.html'),
              resolve: helper.resolveFor('ui.select', 'textAngular')
          })
          // eCommerce
          // ----------------------------------- 
          .state('app.orders', {
              url: '/orders',
              title: 'Orders',
              templateUrl: helper.basepath('ecommerce-orders.html'),
              resolve: helper.resolveFor('datatables')
          })
          .state('app.order-view', {
              url: '/order-view',
              title: 'Order View',
              templateUrl: helper.basepath('ecommerce-order-view.html')
          })
          .state('app.products', {
              url: '/products',
              title: 'Products',
              templateUrl: helper.basepath('ecommerce-products.html'),
              resolve: helper.resolveFor('datatables')
          })
          .state('app.product-view', {
              url: '/product/:id',
              title: 'Product View',
              templateUrl: helper.basepath('ecommerce-product-view.html')
          })
          // Mailbox
          // ----------------------------------- 
          .state('app.mailbox', {
              url: '/mailbox',
              title: 'Mailbox',
              abstract: true,
              templateUrl: helper.basepath('mailbox.html')
          })
          .state('app.mailbox.folder', {
              url: '/folder/:folder',
              title: 'Mailbox',
              templateUrl: helper.basepath('mailbox-inbox.html')
          })
          .state('app.mailbox.view', {
              url : '/{mid:[0-9]{1,4}}',
              title: 'View mail',
              templateUrl: helper.basepath('mailbox-view.html'),
              resolve: helper.resolveFor('ngWig')
          })
          .state('app.mailbox.compose', {
              url: '/compose',
              title: 'Mailbox',
              templateUrl: helper.basepath('mailbox-compose.html'),
              resolve: helper.resolveFor('ngWig')
          })
          // 
          // Multiple level example
          // ----------------------------------- 
          .state('app.multilevel', {
              url: '/multilevel',
              title: 'Multilevel',
              template: '<h3>Multilevel Views</h3>' + '<div class="lead ba p">View @ Top Level ' + '<div ui-view=""></div> </div>'
          })
          .state('app.multilevel.level1', {
              url: '/level1',
              title: 'Multilevel - Level1',
              template: '<div class="lead ba p">View @ Level 1' + '<div ui-view=""></div> </div>'
          })
          .state('app.multilevel.level1.item', {
              url: '/item',
              title: 'Multilevel - Level1',
              template: '<div class="lead ba p"> Menu item @ Level 1</div>'
          })
          .state('app.multilevel.level1.level2', {
              url: '/level2',
              title: 'Multilevel - Level2',
              template: '<div class="lead ba p">View @ Level 2'  + '<div ui-view=""></div> </div>'
          })
          .state('app.multilevel.level1.level2.level3', {
              url: '/level3',
              title: 'Multilevel - Level3',
              template: '<div class="lead ba p">View @ Level 3' + '<div ui-view=""></div> </div>'
          })
          .state('app.multilevel.level1.level2.level3.item', {
              url: '/item',
              title: 'Multilevel - Level3 Item',
              template: '<div class="lead ba p"> Menu item @ Level 3</div>'
          })
          // 
          // Single Page Routes
          // ----------------------------------- 
          .state('page', {
              url: '/page',
              templateUrl: 'app/pages/page.html',
              resolve: helper.resolveFor('modernizr', 'icons'),
              controller: ['$rootScope', function($rootScope) {
                  $rootScope.app.layout.isBoxed = false;
              }]
          })
          .state('page.login', {
              url: '/login',
              title: 'Login',
              templateUrl: 'app/pages/login.html'
          })
          .state('page.register', {
              url: '/register',
              title: 'Register',
              templateUrl: 'app/pages/register.html'
          })
          .state('page.recover', {
              url: '/recover',
              title: 'Recover',
              templateUrl: 'app/pages/recover.html'
          })
          .state('page.lock', {
              url: '/lock',
              title: 'Lock',
              templateUrl: 'app/pages/lock.html'
          })
          .state('page.404', {
              url: '/404',
              title: 'Not Found',
              templateUrl: 'app/pages/404.html'
          })
          // 
          // Horizontal layout
          // ----------------------------------- 
          .state('app-h', {
              url: '/app-h',
              abstract: true,
              templateUrl: helper.basepath( 'app-h.html' ),
              resolve: helper.resolveFor('fastclick', 'modernizr', 'icons', 'screenfull', 'animo', 'sparklines', 'slimscroll', 'classyloader', 'toaster', 'whirl')
          })
          .state('app-h.dashboard_v2', {
              url: '/dashboard_v2',
              title: 'Dashboard v2',
              templateUrl: helper.basepath('dashboard_v2.html'),
              controller: 'DashboardV2Controller',
              controllerAs: 'dash2',
              resolve: helper.resolveFor('flot-chart','flot-chart-plugins')
          })
          // 
          // CUSTOM RESOLVES
          //   Add your own resolves properties
          //   following this object extend
          //   method
          // ----------------------------------- 
          // .state('app.someroute', {
          //   url: '/some_url',
          //   templateUrl: 'path_to_template.html',
          //   controller: 'someController',
          //   resolve: angular.extend(
          //     helper.resolveFor(), {
          //     // YOUR RESOLVES GO HERE
          //     }
          //   )
          // })


            // Multiple level example
            // -----------------------------------
            .state('app.artist-good', {
                url: '/artist-good',
                title: '优质艺人',
                templateUrl: helper.basepath('artist-good.html')
            })
            /*.state('app.artist', {
                url: '/artist',
                title: 'artist',
                controller: 'ArtistAllController',
                controllerAs: 'artist',
                templateUrl: helper.basepath('artist-all.html'),
                resolve: helper.resolveFor('flot-chart','flot-chart-plugins', 'weather-icons')
            })*/

        ;

    } // routesConfig

})();


(function() {
    'use strict';

    angular
        .module('app.settings')
        .run(settingsRun);

    settingsRun.$inject = ['$rootScope', '$localStorage'];

    function settingsRun($rootScope, $localStorage){

      // Global Settings
      // ----------------------------------- 
      $rootScope.app = {
        name: '媒资库',
        description: '媒资库运营管理系统',
        year: ((new Date()).getFullYear()),
        layout: {
          isFixed: true,
          isCollapsed: false,
          isBoxed: false,
          isRTL: false,
          horizontal: false,
          isFloat: false,
          asideHover: false,
          theme: null
        },
        useFullLayout: false,
        hiddenFooter: false,
        offsidebarOpen: false,
        asideToggled: false,
        viewAnimation: 'ng-fadeInUp'
      };

      // Setup the layout mode
      $rootScope.app.layout.horizontal = ( $rootScope.$stateParams.layout === 'app-h') ;

      // Restore layout settings
      if( angular.isDefined($localStorage.layout) )
        $rootScope.app.layout = $localStorage.layout;
      else
        $localStorage.layout = $rootScope.app.layout;

      $rootScope.$watch('app.layout', function () {
        $localStorage.layout = $rootScope.app.layout;
      }, true);

      // Close submenu when sidebar change from collapsed to normal
      $rootScope.$watch('app.layout.isCollapsed', function(newValue) {
        if( newValue === false )
          $rootScope.$broadcast('closeSidebarMenu');
      });

    }

})();

/**=========================================================
 * Module: sidebar-menu.js
 * Handle sidebar collapsible elements
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.sidebar')
        .controller('SidebarController', SidebarController);

    SidebarController.$inject = ['$rootScope', '$scope', '$state', 'SidebarLoader', 'Utils'];
    function SidebarController($rootScope, $scope, $state, SidebarLoader,  Utils) {

        activate();

        ////////////////

        function activate() {
          var collapseList = [];

          // demo: when switch from collapse to hover, close all items
          $rootScope.$watch('app.layout.asideHover', function(oldVal, newVal){
            if ( newVal === false && oldVal === true) {
              closeAllBut(-1);
            }
          });


          // Load menu from json file
          // ----------------------------------- 

          SidebarLoader.getMenu(sidebarReady);
          
          function sidebarReady(items) {
            $scope.menuItems = items;
          }

          // Handle sidebar and collapse items
          // ----------------------------------
          
          $scope.getMenuItemPropClasses = function(item) {
            return (item.heading ? 'nav-heading' : '') +
                   (isActive(item) ? ' active' : '') ;
          };

          $scope.addCollapse = function($index, item) {
            collapseList[$index] = $rootScope.app.layout.asideHover ? true : !isActive(item);
          };

          $scope.isCollapse = function($index) {
            return (collapseList[$index]);
          };

          $scope.toggleCollapse = function($index, isParentItem) {

            // collapsed sidebar doesn't toggle drodopwn
            if( Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover ) return true;

            // make sure the item index exists
            if( angular.isDefined( collapseList[$index] ) ) {
              if ( ! $scope.lastEventFromChild ) {
                collapseList[$index] = !collapseList[$index];
                closeAllBut($index);
              }
            }
            else if ( isParentItem ) {
              closeAllBut(-1);
            }
            
            $scope.lastEventFromChild = isChild($index);

            return true;
          
          };

          // Controller helpers
          // ----------------------------------- 

            // Check item and children active state
            function isActive(item) {

              if(!item) return;

              if( !item.sref || item.sref === '#') {
                var foundActive = false;
                angular.forEach(item.submenu, function(value) {
                  if(isActive(value)) foundActive = true;
                });
                return foundActive;
              }
              else
                return $state.is(item.sref) || $state.includes(item.sref);
            }

            function closeAllBut(index) {
              index += '';
              for(var i in collapseList) {
                if(index < 0 || index.indexOf(i) < 0)
                  collapseList[i] = true;
              }
            }

            function isChild($index) {
              /*jshint -W018*/
              return (typeof $index === 'string') && !($index.indexOf('-') < 0);
            }
        
        } // activate
    }

})();

/**=========================================================
 * Module: sidebar.js
 * Wraps the sidebar and handles collapsed state
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.sidebar')
        .directive('sidebar', sidebar);

    sidebar.$inject = ['$rootScope', '$timeout', '$window', 'Utils'];
    function sidebar ($rootScope, $timeout, $window, Utils) {
        var $win = angular.element($window);
        var directive = {
            // bindToController: true,
            // controller: Controller,
            // controllerAs: 'vm',
            link: link,
            restrict: 'EA',
            template: '<nav class="sidebar" ng-transclude></nav>',
            transclude: true,
            replace: true
            // scope: {}
        };
        return directive;

        function link(scope, element, attrs) {

          var currentState = $rootScope.$state.current.name;
          var $sidebar = element;

          var eventName = Utils.isTouch() ? 'click' : 'mouseenter' ;
          var subNav = $();

          $sidebar.on( eventName, '.nav > li', function() {

            if( Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover ) {

              subNav.trigger('mouseleave');
              subNav = toggleMenuItem( $(this), $sidebar);

              // Used to detect click and touch events outside the sidebar          
              sidebarAddBackdrop();

            }

          });

          scope.$on('closeSidebarMenu', function() {
            removeFloatingNav();
          });

          // Normalize state when resize to mobile
          $win.on('resize', function() {
            if( ! Utils.isMobile() )
          	asideToggleOff();
          });

          // Adjustment on route changes
          $rootScope.$on('$stateChangeStart', function(event, toState) {
            currentState = toState.name;
            // Hide sidebar automatically on mobile
            asideToggleOff();

            $rootScope.$broadcast('closeSidebarMenu');
          });

      	  // Autoclose when click outside the sidebar
          if ( angular.isDefined(attrs.sidebarAnyclickClose) ) {
            
            var wrapper = $('.wrapper');
            var sbclickEvent = 'click.sidebar';
            
            $rootScope.$watch('app.asideToggled', watchExternalClicks);

          }

          //////

          function watchExternalClicks(newVal) {
            // if sidebar becomes visible
            if ( newVal === true ) {
              $timeout(function(){ // render after current digest cycle
                wrapper.on(sbclickEvent, function(e){
                  // if not child of sidebar
                  if( ! $(e.target).parents('.aside').length ) {
                    asideToggleOff();
                  }
                });
              });
            }
            else {
              // dettach event
              wrapper.off(sbclickEvent);
            }
          }

          function asideToggleOff() {
            $rootScope.app.asideToggled = false;
            if(!scope.$$phase) scope.$apply(); // anti-pattern but sometimes necessary
      	  }
        }
        
        ///////

        function sidebarAddBackdrop() {
          var $backdrop = $('<div/>', { 'class': 'dropdown-backdrop'} );
          $backdrop.insertAfter('.aside-inner').on('click mouseenter', function () {
            removeFloatingNav();
          });
        }

        // Open the collapse sidebar submenu items when on touch devices 
        // - desktop only opens on hover
        function toggleTouchItem($element){
          $element
            .siblings('li')
            .removeClass('open')
            .end()
            .toggleClass('open');
        }

        // Handles hover to open items under collapsed menu
        // ----------------------------------- 
        function toggleMenuItem($listItem, $sidebar) {

          removeFloatingNav();

          var ul = $listItem.children('ul');
          
          if( !ul.length ) return $();
          if( $listItem.hasClass('open') ) {
            toggleTouchItem($listItem);
            return $();
          }

          var $aside = $('.aside');
          var $asideInner = $('.aside-inner'); // for top offset calculation
          // float aside uses extra padding on aside
          var mar = parseInt( $asideInner.css('padding-top'), 0) + parseInt( $aside.css('padding-top'), 0);
          var subNav = ul.clone().appendTo( $aside );
          
          toggleTouchItem($listItem);

          var itemTop = ($listItem.position().top + mar) - $sidebar.scrollTop();
          var vwHeight = $win.height();

          subNav
            .addClass('nav-floating')
            .css({
              position: $rootScope.app.layout.isFixed ? 'fixed' : 'absolute',
              top:      itemTop,
              bottom:   (subNav.outerHeight(true) + itemTop > vwHeight) ? 0 : 'auto'
            });

          subNav.on('mouseleave', function() {
            toggleTouchItem($listItem);
            subNav.remove();
          });

          return subNav;
        }

        function removeFloatingNav() {
          $('.dropdown-backdrop').remove();
          $('.sidebar-subnav.nav-floating').remove();
          $('.sidebar li.open').removeClass('open');
        }
    }


})();


(function() {
    'use strict';

    angular
        .module('app.sidebar')
        .service('SidebarLoader', SidebarLoader);

    SidebarLoader.$inject = ['$http'];
    function SidebarLoader($http) {
        this.getMenu = getMenu;

        ////////////////

        function getMenu(onReady, onError) {
          var menuJson = 'server/sidebar-menu.json',
              menuURL  = menuJson + '?v=' + (new Date().getTime()); // jumps cache
            
          onError = onError || function() { alert('Failure loading menu'); };

          $http
            .get(menuURL)
            .success(onReady)
            .error(onError);
        }
    }
})();
(function() {
    'use strict';

    angular
        .module('app.sidebar')
        .controller('UserBlockController', UserBlockController);

    UserBlockController.$inject = ['$rootScope','SweetAlert','$state','$localStorage'];
    function UserBlockController($rootScope,SweetAlert,$state,$localStorage) {

        activate();

        ////////////////

        function activate() {
          /*$rootScope.user = {
            name:     'John',
            job:      'ng-developer',
            picture:  'app/img/user/02.jpg'
          };*/
            $rootScope.user = {
                id:        $localStorage.loginUserInfo.user.id,
                name:     $localStorage.loginUserInfo.user.name,
                job:      $localStorage.loginUserInfo.iss,
                picture:  $localStorage.loginUserInfo.user.avatarUrl
            };

          // Hides/show user avatar on sidebar
          $rootScope.toggleUserBlock = function(){
            $rootScope.$broadcast('toggleUserBlock');
          };

          // Hides/show user avatar on sidebar
          $rootScope.logout = function(){
              SweetAlert.swal({
                  title: '确认要退出系统？',
                  text: '在退出系统之前，请确保你的所有操作都已提交！',
                  type: 'warning',
                  showCancelButton: true,
                  confirmButtonColor: '#DD6B55',
                  confirmButtonText: '确认退出',
                  cancelButtonText: '取消'
              },  function(isConfirm){
                  if(isConfirm){
                      //登陆成功记录token
                      $localStorage.token = undefined;
                      $localStorage.isAuthenticated = false;
                      $localStorage.loginUserInfo = undefined;
                      $rootScope.user = undefined;
                      $state.go('page.login');
                  }
              });

          };

          $rootScope.userBlockVisible = true;
          
          $rootScope.$on('toggleUserBlock', function(/*event, args*/) {

            $rootScope.userBlockVisible = ! $rootScope.userBlockVisible;
            
          });
        }
    }
})();

/**=========================================================
 * Module: angular-grid.js
 * Example for Angular Grid
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.tables')
        .controller('AngularGridController', AngularGridController);

    AngularGridController.$inject = ['$http'];
    function AngularGridController($http) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

            // Basic
            var columnDefs = [
                {displayName: 'Athlete', field: 'athlete', width: 150},
                {displayName: 'Age', field: 'age', width: 90},
                {displayName: 'Country', field: 'country', width: 120},
                {displayName: 'Year', field: 'year', width: 90},
                {displayName: 'Date', field: 'date', width: 110},
                {displayName: 'Sport', field: 'sport', width: 110},
                {displayName: 'Gold', field: 'gold', width: 100},
                {displayName: 'Silver', field: 'silver', width: 100},
                {displayName: 'Bronze', field: 'bronze', width: 100},
                {displayName: 'Total', field: 'total', width: 100}
            ];

            vm.gridOptions = {
                columnDefs: columnDefs,
                rowData: null,
                ready: function(api){
                  api.sizeColumnsToFit();
                }
            };

            // Filter Example
            var irishAthletes = ['John Joe Nevin','Katie Taylor','Paddy Barnes','Kenny Egan','Darren Sutherland', 'Margaret Thatcher', 'Tony Blair', 'Ronald Regan', 'Barack Obama'];

            var columnDefsFilter = [
                {displayName: 'Athlete', field: 'athlete', width: 150, filter: 'set',
                    filterParams: { cellHeight: 20, values: irishAthletes} },
                {displayName: 'Age', field: 'age', width: 90, filter: 'number'},
                {displayName: 'Country', field: 'country', width: 120},
                {displayName: 'Year', field: 'year', width: 90},
                {displayName: 'Date', field: 'date', width: 110},
                {displayName: 'Sport', field: 'sport', width: 110},
                {displayName: 'Gold', field: 'gold', width: 100, filter: 'number'},
                {displayName: 'Silver', field: 'silver', width: 100, filter: 'number'},
                {displayName: 'Bronze', field: 'bronze', width: 100, filter: 'number'},
                {displayName: 'Total', field: 'total', width: 100, filter: 'number'}
            ];

            vm.gridOptions1 = {
                columnDefs: columnDefsFilter,
                rowData: null,
                enableFilter: true,
                ready: function(api){
                  api.sizeColumnsToFit();
                }

            };


            // Pinning Example

            vm.gridOptions2 = {
                columnDefs: columnDefs,
                rowData: null,
                pinnedColumnCount: 2,
                ready: function(api){
                  api.sizeColumnsToFit();
                }
            };

            //-----------------------------
            // Get the data from SERVER
            //-----------------------------

            $http.get('server/ag-owinners.json')
                .then(function(res){
                    // basic
                    vm.gridOptions.rowData = res.data;
                    vm.gridOptions.api.onNewRows();
                    // filter
                    vm.gridOptions1.rowData = res.data;
                    vm.gridOptions1.api.onNewRows();
                    // pinning
                    vm.gridOptions2.rowData = res.data;
                    vm.gridOptions2.api.onNewRows();
                });

        }
    }
})();

/**=========================================================
 * Module: datatable,js
 * Angular Datatable controller
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.tables')
        .controller('DataTableController', DataTableController);

    DataTableController.$inject = ['$resource', 'DTOptionsBuilder', 'DTColumnDefBuilder'];
    function DataTableController($resource, DTOptionsBuilder, DTColumnDefBuilder) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // Ajax

          $resource('server/datatable.json').query().$promise.then(function(persons) {
             vm.persons = persons;
          });

          // Changing data

          vm.heroes = [{
              'id': 860,
              'firstName': 'Superman',
              'lastName': 'Yoda'
            }, {
              'id': 870,
              'firstName': 'Ace',
              'lastName': 'Ventura'
            }, {
              'id': 590,
              'firstName': 'Flash',
              'lastName': 'Gordon'
            }, {
              'id': 803,
              'firstName': 'Luke',
              'lastName': 'Skywalker'
            }
          ];

          vm.dtOptions = DTOptionsBuilder.newOptions().withPaginationType('full_numbers');
          vm.dtColumnDefs = [
              DTColumnDefBuilder.newColumnDef(0),
              DTColumnDefBuilder.newColumnDef(1),
              DTColumnDefBuilder.newColumnDef(2),
              DTColumnDefBuilder.newColumnDef(3).notSortable()
          ];
          vm.person2Add = _buildPerson2Add(1);
          vm.addPerson = addPerson;
          vm.modifyPerson = modifyPerson;
          vm.removePerson = removePerson;

          function _buildPerson2Add(id) {
              return {
                  id: id,
                  firstName: 'Foo' + id,
                  lastName: 'Bar' + id
              };
          }
          function addPerson() {
              vm.heroes.push(angular.copy(vm.person2Add));
              vm.person2Add = _buildPerson2Add(vm.person2Add.id + 1);
          }
          function modifyPerson(index) {
              vm.heroes.splice(index, 1, angular.copy(vm.person2Add));
              vm.person2Add = _buildPerson2Add(vm.person2Add.id + 1);
          }
          function removePerson(index) {
              vm.heroes.splice(index, 1);
          }

        }
    }
})();

/**=========================================================
 * Module: ng-grid.js
 * ngGrid demo
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.tables')
        .controller('NGGridController', NGGridController);

    NGGridController.$inject = ['$scope', '$http', '$timeout'];
    function NGGridController($scope, $http, $timeout) {

        activate();

        ////////////////

        function activate() {

          $scope.filterOptions = {
              filterText: '',
              useExternalFilter: true
          };
          $scope.totalServerItems = 0;
          $scope.pagingOptions = {
              pageSizes:   [250, 500, 1000],  // page size options
              pageSize:    250,              // default page size
              currentPage: 1                 // initial page
          };

          $scope.gridOptions = {
              data:             'myData',
              enablePaging:     true,
              showFooter:       true,
              rowHeight:        36,
              headerRowHeight:  38,
              totalServerItems: 'totalServerItems',
              pagingOptions:    $scope.pagingOptions,
              filterOptions:    $scope.filterOptions
          };

          $scope.setPagingData = function(data, page, pageSize){
              // calc for pager
              var pagedData = data.slice((page - 1) * pageSize, page * pageSize);
              // Store data from server
              $scope.myData = pagedData;
              // Update server side data length
              $scope.totalServerItems = data.length;

              if (!$scope.$$phase) {
                  $scope.$apply();
              }

          };

          $scope.getPagedDataAsync = function (pageSize, page, searchText) {
            var ngGridResourcePath = 'server/ng-grid-data.json';

            $timeout(function () {

                if (searchText) {
                    var ft = searchText.toLowerCase();
                    $http.get(ngGridResourcePath).success(function (largeLoad) {
                        var data = largeLoad.filter(function(item) {
                            return JSON.stringify(item).toLowerCase().indexOf(ft) !== -1;
                        });
                        $scope.setPagingData(data,page,pageSize);
                    });
                } else {
                    $http.get(ngGridResourcePath).success(function (largeLoad) {
                        $scope.setPagingData(largeLoad,page,pageSize);
                    });
                }
            }, 100);
          };


          $scope.$watch('pagingOptions', function (newVal, oldVal) {
              if (newVal !== oldVal && newVal.currentPage !== oldVal.currentPage) {
                $scope.getPagedDataAsync($scope.pagingOptions.pageSize, $scope.pagingOptions.currentPage, $scope.filterOptions.filterText);
              }
          }, true);
          $scope.$watch('filterOptions', function (newVal, oldVal) {
              if (newVal !== oldVal) {
                $scope.getPagedDataAsync($scope.pagingOptions.pageSize, $scope.pagingOptions.currentPage, $scope.filterOptions.filterText);
              }
          }, true);

          $scope.getPagedDataAsync($scope.pagingOptions.pageSize, $scope.pagingOptions.currentPage);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.tables')
        .service('ngTableDataService', ngTableDataService);

    function ngTableDataService() {
        /* jshint validthis:true */
        var self = this;
        this.cache = null;
        this.getData = getData;

        ////////////////

        function getData($defer, params, api) {
          // if no cache, request data and filter
          if ( ! self.cache ) {
            if ( api ) {
              api.get(function(data){
                self.cache = data;
                filterdata($defer, params);
              });
            }
          }
          else {
            filterdata($defer, params);
          }
          
          function filterdata($defer, params) {
            var from = (params.page() - 1) * params.count();
            var to = params.page() * params.count();
            var filteredData = self.cache.result.slice(from, to);

            params.total(self.cache.total);
            $defer.resolve(filteredData);
          }

        }
    }
})();

/**=========================================================
 * Module: NGTableCtrl.js
 * Controller for ngTables
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.tables')
        .controller('NGTableCtrl', NGTableCtrl);
    /*jshint -W055 */
    NGTableCtrl.$inject = ['$filter', 'ngTableParams', '$resource', '$timeout', 'ngTableDataService'];
    function NGTableCtrl($filter, ngTableParams, $resource, $timeout, ngTableDataService) {
        var vm = this;
        vm.title = 'Controller';

        activate();

        ////////////////

        function activate() {
          var data = [
              {name: 'Moroni',  age: 50, money: -10   },
              {name: 'Tiancum', age: 43, money: 120   },
              {name: 'Jacob',   age: 27, money: 5.5   },
              {name: 'Nephi',   age: 29, money: -54   },
              {name: 'Enos',    age: 34, money: 110   },
              {name: 'Tiancum', age: 43, money: 1000  },
              {name: 'Jacob',   age: 27, money: -201  },
              {name: 'Nephi',   age: 29, money: 100   },
              {name: 'Enos',    age: 34, money: -52.5 },
              {name: 'Tiancum', age: 43, money: 52.1  },
              {name: 'Jacob',   age: 27, money: 110   },
              {name: 'Nephi',   age: 29, money: -55   },
              {name: 'Enos',    age: 34, money: 551   },
              {name: 'Tiancum', age: 43, money: -1410 },
              {name: 'Jacob',   age: 27, money: 410   },
              {name: 'Nephi',   age: 29, money: 100   },
              {name: 'Enos',    age: 34, money: -100  }
          ];

          // SELECT ROWS
          // ----------------------------------- 

          vm.data = data;

          vm.tableParams3 = new ngTableParams({
              page: 1,            // show first page
              count: 10          // count per page
          }, {
              total: data.length, // length of data
              getData: function ($defer, params) {
                  // use build-in angular filter
                  var filteredData = params.filter() ?
                          $filter('filter')(data, params.filter()) :
                          data;
                  var orderedData = params.sorting() ?
                          $filter('orderBy')(filteredData, params.orderBy()) :
                          data;

                  params.total(orderedData.length); // set total for recalc pagination
                  $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
              }
          });

          vm.changeSelection = function(user) {
            console.info(user);
          };

          // EXPORT CSV
          // -----------------------------------  

          var data4 = [{name: 'Moroni', age: 50},
              {name: 'Tiancum', age: 43},
              {name: 'Jacob', age: 27},
              {name: 'Nephi', age: 29},
              {name: 'Enos', age: 34},
              {name: 'Tiancum', age: 43},
              {name: 'Jacob', age: 27},
              {name: 'Nephi', age: 29},
              {name: 'Enos', age: 34},
              {name: 'Tiancum', age: 43},
              {name: 'Jacob', age: 27},
              {name: 'Nephi', age: 29},
              {name: 'Enos', age: 34},
              {name: 'Tiancum', age: 43},
              {name: 'Jacob', age: 27},
              {name: 'Nephi', age: 29},
              {name: 'Enos', age: 34}];

          vm.tableParams4 = new ngTableParams({
              page: 1,            // show first page
              count: 10           // count per page
          }, {
              total: data4.length, // length of data4
              getData: function($defer, params) {
                  $defer.resolve(data4.slice((params.page() - 1) * params.count(), params.page() * params.count()));
              }
          });


          // SORTING
          // ----------------------------------- 



          vm.tableParams = new ngTableParams({
              page: 1,            // show first page
              count: 10,          // count per page
              sorting: {
                  name: 'asc'     // initial sorting
              }
          }, {
              total: data.length, // length of data
              getData: function($defer, params) {
                  // use build-in angular filter
                  var orderedData = params.sorting() ?
                          $filter('orderBy')(data, params.orderBy()) :
                          data;
          
                  $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
              }
          });

          // FILTERS
          // ----------------------------------- 

          vm.tableParams2 = new ngTableParams({
              page: 1,            // show first page
              count: 10,          // count per page
              filter: {
                  name: '',
                  age: ''
                  // name: 'M'       // initial filter
              }
          }, {
              total: data.length, // length of data
              getData: function($defer, params) {
                  // use build-in angular filter
                  var orderedData = params.filter() ?
                         $filter('filter')(data, params.filter()) :
                         data;

                  vm.users = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());

                  params.total(orderedData.length); // set total for recalc pagination
                  $defer.resolve(vm.users);
              }
          });

          // AJAX
          
          var Api = $resource('server/table-data.json');

          vm.tableParams5 = new ngTableParams({
              page: 1,            // show first page
              count: 10           // count per page
          }, {
              total: 0,           // length of data
              counts: [],         // hide page counts control
              getData: function($defer, params) {
                  
                  // Service using cache to avoid mutiple requests
                  ngTableDataService.getData( $defer, params, Api);
                  
                  /* direct ajax request to api (perform result pagination on the server)
                  Api.get(params.url(), function(data) {
                      $timeout(function() {
                          // update table params
                          params.total(data.total);
                          // set new data
                          $defer.resolve(data.result);
                      }, 500);
                  });
                  */
              }
          });
        }
    }
})();



/**=========================================================
 * Module: demo-buttons.js
 * Provides a simple demo for buttons actions
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.tables')
        .controller('TablexEditableController', TablexEditableController);

    TablexEditableController.$inject = ['$filter', '$http', 'editableOptions', 'editableThemes','$q'];
    function TablexEditableController($filter, $http, editableOptions, editableThemes, $q) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // editable row
          // ----------------------------------- 
          vm.users = [
            {id: 1, name: 'awesome user1', status: 2, group: 4, groupName: 'admin'},
            {id: 2, name: 'awesome user2', status: undefined, group: 3, groupName: 'vip'},
            {id: 3, name: 'awesome user3', status: 2, group: null}
          ];

          vm.statuses = [
            {value: 1, text: 'status1'},
            {value: 2, text: 'status2'},
            {value: 3, text: 'status3'},
            {value: 4, text: 'status4'}
          ];

          vm.groups = [];
          vm.loadGroups = function() {
            return vm.groups.length ? null : $http.get('server/xeditable-groups.json').success(function(data) {
              vm.groups = data;
            });
          };

          vm.showGroup = function(user) {
            if(user.group && vm.groups.length) {
              var selected = $filter('filter')(vm.groups, {id: user.group});
              return selected.length ? selected[0].text : 'Not set';
            } else {
              return user.groupName || 'Not set';
            }
          };

          vm.showStatus = function(user) {
            var selected = [];
            if(user.status) {
              selected = $filter('filter')(vm.statuses, {value: user.status});
            }
            return selected.length ? selected[0].text : 'Not set';
          };

          vm.checkName = function(data, id) {
            if (id === 2 && data !== 'awesome') {
              return 'Username 2 should be `awesome`';
            }
          };

          vm.saveUser = function(data, id) {
            //vm.user not updated yet
            angular.extend(data, {id: id});
            console.log('Saving user: ' + id);
            // return $http.post('/saveUser', data);
          };

          // remove user
          vm.removeUser = function(index) {
            vm.users.splice(index, 1);
          };

          // add user
          vm.addUser = function() {
            vm.inserted = {
              id: vm.users.length+1,
              name: '',
              status: null,
              group: null,
              isNew: true
            };
            vm.users.push(vm.inserted);
          };

          // editable column
          // ----------------------------------- 


          vm.saveColumn = function(column) {
            var results = [];
            angular.forEach(vm.users, function(/*user*/) {
              // results.push($http.post('/saveColumn', {column: column, value: user[column], id: user.id}));
              console.log('Saving column: ' + column);
            });
            return $q.all(results);
          };

          // editable table
          // ----------------------------------- 

          // filter users to show
          vm.filterUser = function(user) {
            return user.isDeleted !== true;
          };

          // mark user as deleted
          vm.deleteUser = function(id) {
            var filtered = $filter('filter')(vm.users, {id: id});
            if (filtered.length) {
              filtered[0].isDeleted = true;
            }
          };

          // cancel all changes
          vm.cancel = function() {
            for (var i = vm.users.length; i--;) {
              var user = vm.users[i];
              // undelete
              if (user.isDeleted) {
                delete user.isDeleted;
              }
              // remove new 
              if (user.isNew) {
                vm.users.splice(i, 1);
              }
            }
          };

          // save edits
          vm.saveTable = function() {
            var results = [];
            for (var i = vm.users.length; i--;) {
              var user = vm.users[i];
              // actually delete user
              if (user.isDeleted) {
                vm.users.splice(i, 1);
              }
              // mark as not new 
              if (user.isNew) {
                user.isNew = false;
              }

              // send on server
              // results.push($http.post('/saveUser', user));
              console.log('Saving Table...');
            }

            return $q.all(results);
          };

        }
    }
})();

/**=========================================================
 * Module: UIGridController
  =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.tables')
        .controller('UIGridController', UIGridController);

    UIGridController.$inject = ['uiGridConstants', '$http'];
    function UIGridController(uiGridConstants, $http) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // Basic example
          // ----------------------------------- 

          vm.gridOptions = {
            rowHeight: 34,
            data: [
              {
                  'name': 'Wilder Gonzales',
                  'gender': 'male',
                  'company': 'Geekko'
              },
              {
                  'name': 'Georgina Schultz',
                  'gender': 'female',
                  'company': 'Suretech'
              },
              {
                  'name': 'Carroll Buchanan',
                  'gender': 'male',
                  'company': 'Ecosys'
              },
              {
                  'name': 'Valarie Atkinson',
                  'gender': 'female',
                  'company': 'Hopeli'
              },
              {
                  'name': 'Schroeder Mathews',
                  'gender': 'male',
                  'company': 'Polarium'
              },
              {
                  'name': 'Ethel Price',
                  'gender': 'female',
                  'company': 'Enersol'
              },
              {
                  'name': 'Claudine Neal',
                  'gender': 'female',
                  'company': 'Sealoud'
              },
              {
                  'name': 'Beryl Rice',
                  'gender': 'female',
                  'company': 'Velity'
              },
              {
                  'name': 'Lynda Mendoza',
                  'gender': 'female',
                  'company': 'Dogspa'
              },
              {
                  'name': 'Sarah Massey',
                  'gender': 'female',
                  'company': 'Bisba'
              },
              {
                  'name': 'Robles Boyle',
                  'gender': 'male',
                  'company': 'Comtract'
              },
              {
                  'name': 'Evans Hickman',
                  'gender': 'male',
                  'company': 'Parleynet'
              },
              {
                  'name': 'Dawson Barber',
                  'gender': 'male',
                  'company': 'Dymi'
              },
              {
                  'name': 'Bruce Strong',
                  'gender': 'male',
                  'company': 'Xyqag'
              },
              {
                  'name': 'Nellie Whitfield',
                  'gender': 'female',
                  'company': 'Exospace'
              },
              {
                  'name': 'Jackson Macias',
                  'gender': 'male',
                  'company': 'Aquamate'
              },
              {
                  'name': 'Pena Pena',
                  'gender': 'male',
                  'company': 'Quarx'
              },
              {
                  'name': 'Lelia Gates',
                  'gender': 'female',
                  'company': 'Proxsoft'
              },
              {
                  'name': 'Letitia Vasquez',
                  'gender': 'female',
                  'company': 'Slumberia'
              },
              {
                  'name': 'Trevino Moreno',
                  'gender': 'male',
                  'company': 'Conjurica'
              }
            ]
          };
          
          // Complex example
          // ----------------------------------- 

          var data = [];
           
          vm.gridOptionsComplex = {
              showGridFooter: true,
              showColumnFooter: true,
              enableFiltering: true,
              columnDefs: [
                  { field: 'name', width: '13%' },
                  { field: 'address.street',aggregationType: uiGridConstants.aggregationTypes.sum, width: '13%' },
                  { field: 'age', aggregationType: uiGridConstants.aggregationTypes.avg, aggregationHideLabel: true, width: '13%' },
                  { name: 'ageMin', field: 'age', aggregationType: uiGridConstants.aggregationTypes.min, width: '13%', displayName: 'Age for min' },
                  { name: 'ageMax', field: 'age', aggregationType: uiGridConstants.aggregationTypes.max, width: '13%', displayName: 'Age for max' },
                  { name: 'customCellTemplate', 
                    field: 'age', 
                    width: '14%', 
                    footerCellTemplate: '<div class="ui-grid-cell-contents bg-info text-center">Custom HTML</div>' 
                  },
                  { name: 'registered', field: 'registered', width: '20%', cellFilter: 'date', footerCellFilter: 'date', aggregationType: uiGridConstants.aggregationTypes.max }
              ],
              data: data,
              onRegisterApi: function(gridApi) {
                vm.gridApi = gridApi;
              }
          };
           
          $http.get('server/uigrid-complex.json')
            .success(function(data) {
              data.forEach( function(row) {
                row.registered = Date.parse(row.registered);
              });
              vm.gridOptionsComplex.data = data;
            });


           vm.gridOptions1 = {
              paginationPageSizes: [25, 50, 75],
              paginationPageSize: 25,
              columnDefs: [
                { name: 'name' },
                { name: 'gender' },
                { name: 'company' }
              ]
            };
           
            $http.get('server/uigrid-100.json')
            .success(function (data) {
              vm.gridOptions1.data = data;
            });

        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.translate')
        .config(translateConfig)
        ;
    translateConfig.$inject = ['$translateProvider'];
    function translateConfig($translateProvider){
  
      $translateProvider.useStaticFilesLoader({
          prefix : 'app/i18n/',
          suffix : '.json'
      });
      $translateProvider.preferredLanguage('zh');
      $translateProvider.useLocalStorage();
      $translateProvider.usePostCompiling(true);

    }
})();
(function() {
    'use strict';

    angular
        .module('app.translate')
        .run(translateRun)
        ;
    translateRun.$inject = ['$rootScope', '$translate'];

    function translateRun($rootScope, $translate){

      // Internationalization
      // ----------------------

      $rootScope.language = {
        // Handles language dropdown
        listIsOpen: false,
        // list of available languages
        available: {
          'zh':       '中文',
          'en':       'English',
          'es_AR':    'Español'
        },
        // display always the current ui language
        init: function () {
          var proposedLanguage = $translate.proposedLanguage() || $translate.use();
          var preferredLanguage = $translate.preferredLanguage(); // we know we have set a preferred one in app.config
          $rootScope.language.selected = $rootScope.language.available[ (proposedLanguage || preferredLanguage) ];
        },
        set: function (localeId) {
          // Set the new idiom
          $translate.use(localeId);
          // save a reference for the current language
          $rootScope.language.selected = $rootScope.language.available[localeId];
          // finally toggle dropdown
          $rootScope.language.listIsOpen = ! $rootScope.language.listIsOpen;
        }
      };

      $rootScope.language.init();

    }
})();
/**=========================================================
 * Module: animate-enabled.js
 * Enable or disables ngAnimate for element with directive
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('animateEnabled', animateEnabled);

    animateEnabled.$inject = ['$animate'];
    function animateEnabled ($animate) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs) {
          scope.$watch(function () {
            return scope.$eval(attrs.animateEnabled, scope);
          }, function (newValue) {
            $animate.enabled(!!newValue, element);
          });
        }
    }

})();

/**=========================================================
 * Module: browser.js
 * Browser detection
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .service('Browser', Browser);

    Browser.$inject = ['$window'];
    function Browser($window) {
      return $window.jQBrowser;
    }

})();

/**=========================================================
 * Module: clear-storage.js
 * Removes a key from the browser storage via element click
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('resetKey', resetKey);

    resetKey.$inject = ['$state', '$localStorage'];
    function resetKey ($state, $localStorage) {
        var directive = {
            link: link,
            restrict: 'A',
            scope: {
              resetKey: '@'
            }
        };
        return directive;

        function link(scope, element) {
          element.on('click', function (e) {
              e.preventDefault();

              if(scope.resetKey) {
                delete $localStorage[scope.resetKey];
                $state.go($state.current, {}, {reload: true});
              }
              else {
                $.error('No storage key specified for reset.');
              }
          });
        }
    }

})();

/**=========================================================
 * Module: fullscreen.js
 * Toggle the fullscreen mode on/off
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('toggleFullscreen', toggleFullscreen);

    toggleFullscreen.$inject = ['Browser'];
    function toggleFullscreen (Browser) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          // Not supported under IE
          if( Browser.msie ) {
            element.addClass('hide');
          }
          else {
            element.on('click', function (e) {
                e.preventDefault();

                if (screenfull.enabled) {
                  
                  screenfull.toggle();
                  
                  // Switch icon indicator
                  if(screenfull.isFullscreen)
                    $(this).children('em').removeClass('fa-expand').addClass('fa-compress');
                  else
                    $(this).children('em').removeClass('fa-compress').addClass('fa-expand');

                } else {
                  $.error('Fullscreen not enabled');
                }

            });
          }
        }
    }


})();

/**=========================================================
 * Module: load-css.js
 * Request and load into the current page a css file
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('loadCss', loadCss);

    function loadCss () {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs) {
          element.on('click', function (e) {
              if(element.is('a')) e.preventDefault();
              var uri = attrs.loadCss,
                  link;

              if(uri) {
                link = createLink(uri);
                if ( !link ) {
                  $.error('Error creating stylesheet link element.');
                }
              }
              else {
                $.error('No stylesheet location defined.');
              }

          });
        }
        
        function createLink(uri) {
          var linkId = 'autoloaded-stylesheet',
              oldLink = $('#'+linkId).attr('id', linkId + '-old');

          $('head').append($('<link/>').attr({
            'id':   linkId,
            'rel':  'stylesheet',
            'href': uri
          }));

          if( oldLink.length ) {
            oldLink.remove();
          }

          return $('#'+linkId);
        }
    }

})();

/**=========================================================
 * Module: now.js
 * Provides a simple way to display the current time formatted
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('now', now);

    now.$inject = ['dateFilter', '$interval'];
    function now (dateFilter, $interval) {
        var directive = {
            link: link,
            restrict: 'EA'
        };
        return directive;

        function link(scope, element, attrs) {
          var format = attrs.format;

          function updateTime() {
            var dt = dateFilter(new Date(), format);
            element.text(dt);
          }

          updateTime();
          var intervalPromise = $interval(updateTime, 1000);

          scope.$on('$destroy', function(){
            $interval.cancel(intervalPromise);
          });

        }
    }

})();

/**=========================================================
 * Module: table-checkall.js
 * Tables check all checkbox
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('checkAll', checkAll);

    function checkAll () {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          element.on('change', function() {
            var $this = $(this),
                index= $this.index() + 1,
                checkbox = $this.find('input[type="checkbox"]'),
                table = $this.parents('table');
            // Make sure to affect only the correct checkbox column
            table.find('tbody > tr > td:nth-child('+index+') input[type="checkbox"]')
              .prop('checked', checkbox[0].checked);

          });
        }
    }

})();

/**=========================================================
 * Module: trigger-resize.js
 * Triggers a window resize event from any element
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('triggerResize', triggerResize);

    triggerResize.$inject = ['$window', '$timeout'];
    function triggerResize ($window, $timeout) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          element.on('click', function(){
            $timeout(function(){
              $window.dispatchEvent(new Event('resize'));
            });
          });
        }
    }

})();

/**=========================================================
 * Module: utils.js
 * Utility library to use across the theme
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .service('Utils', Utils);

    Utils.$inject = ['$window', 'APP_MEDIAQUERY'];
    function Utils($window, APP_MEDIAQUERY) {

        var $html = angular.element('html'),
            $win  = angular.element($window),
            $body = angular.element('body');

        return {
          // DETECTION
          support: {
            transition: (function() {
                    var transitionEnd = (function() {

                        var element = document.body || document.documentElement,
                            transEndEventNames = {
                                WebkitTransition: 'webkitTransitionEnd',
                                MozTransition: 'transitionend',
                                OTransition: 'oTransitionEnd otransitionend',
                                transition: 'transitionend'
                            }, name;

                        for (name in transEndEventNames) {
                            if (element.style[name] !== undefined) return transEndEventNames[name];
                        }
                    }());

                    return transitionEnd && { end: transitionEnd };
                })(),
            animation: (function() {

                var animationEnd = (function() {

                    var element = document.body || document.documentElement,
                        animEndEventNames = {
                            WebkitAnimation: 'webkitAnimationEnd',
                            MozAnimation: 'animationend',
                            OAnimation: 'oAnimationEnd oanimationend',
                            animation: 'animationend'
                        }, name;

                    for (name in animEndEventNames) {
                        if (element.style[name] !== undefined) return animEndEventNames[name];
                    }
                }());

                return animationEnd && { end: animationEnd };
            })(),
            requestAnimationFrame: window.requestAnimationFrame ||
                                   window.webkitRequestAnimationFrame ||
                                   window.mozRequestAnimationFrame ||
                                   window.msRequestAnimationFrame ||
                                   window.oRequestAnimationFrame ||
                                   function(callback){ window.setTimeout(callback, 1000/60); },
            /*jshint -W069*/
            touch: (
                ('ontouchstart' in window && navigator.userAgent.toLowerCase().match(/mobile|tablet/)) ||
                (window.DocumentTouch && document instanceof window.DocumentTouch)  ||
                (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0) || //IE 10
                (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0) || //IE >=11
                false
            ),
            mutationobserver: (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || null)
          },
          // UTILITIES
          isInView: function(element, options) {
              /*jshint -W106*/
              var $element = $(element);

              if (!$element.is(':visible')) {
                  return false;
              }

              var window_left = $win.scrollLeft(),
                  window_top  = $win.scrollTop(),
                  offset      = $element.offset(),
                  left        = offset.left,
                  top         = offset.top;

              options = $.extend({topoffset:0, leftoffset:0}, options);

              if (top + $element.height() >= window_top && top - options.topoffset <= window_top + $win.height() &&
                  left + $element.width() >= window_left && left - options.leftoffset <= window_left + $win.width()) {
                return true;
              } else {
                return false;
              }
          },
          
          langdirection: $html.attr('dir') === 'rtl' ? 'right' : 'left',

          isTouch: function () {
            return $html.hasClass('touch');
          },

          isSidebarCollapsed: function () {
            return $body.hasClass('aside-collapsed');
          },

          isSidebarToggled: function () {
            return $body.hasClass('aside-toggled');
          },

          isMobile: function () {
            return $win.width() < APP_MEDIAQUERY.tablet;
          }

        };
    }
})();

(function() {
    'use strict';

    angular
        .module('custom', [
            // request the the entire framework
            'angle',
            // or just modules
            'app.core',
            'app.sidebar'
            /*...*/
        ]);
})();
/**
 * Created by kiracheng on 2016/5/5.
 */
(function() {
    'use strict';

    angular
        .module('app.song', []);
})();


(function() {
    'use strict';
    angular
        .module('app.constant', []).constant('Constant',{
            _search_url : "",
            _CALLBACK : ""
        });
})();
(function() {
    'use strict';

    angular
        .module('app.routes')
        .controller('AppController', AppController);

    AppController.$inject = ['$rootScope', '$scope', '$state','$localStorage'];
    function AppController($rootScope, $scope, $state,$localStorage) {
        if(!$localStorage.loginUserInfo) $state.go('page.login');
        //$scope.app.layout.theme = 'app/css/theme-e.css';
        $rootScope.pageTitle = function () {
            return $state.current.title;
        }();
    }
})();
/**
 * Created by hao.cheng on 2016/7/6.
 */
(function () {
    'use strict';

    angular.module('app.routes').service('BaseService',BaseService);
    BaseService.$inject = ['$http','SweetAlert'];
    function BaseService($http,SweetAlert) {
        var preData = {};   //预览功能
        var _self = this;
        _self.service = {
            'changeDataStatus': changeDataStatus,
            'setPreData': setPreData,
            'getPreData': getPreData,
            'getList': listByIds,
            'mergeData': mergeData,
            'batchUpdate': batchUpdate,
            'getTagTree': getTagTree,
            'excludeIsolateData': excludeIsolateData,
            'clearExcelSearch': clearExcelSearch, //清空excel
            'taggingAlone': taggingAlone, //单独的打标签
            'taggingAloneCheck': taggingAloneCheck  //单独打标签验证权限
        };
        function changeDataStatus(type,id,status) { //改变数据状态
            return $http.jsonp(CHANGEDATASTATUS + type + '/' + id + '/' + status + '.json?' + CALLBACK).then(function (res) {
                if(res.data.status == 1) sweetAlertCommon(SweetAlert,res.data.msg,'success');
                else sweetAlertCommon(SweetAlert,res.data.msg,'error');
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert,'请求接口异常','warning');
            });
        }
        function setPreData(data) { //设置预览对象
            preData = Object.create(data);
        }
        function getPreData(){  //获取预览对象
            return preData;
        }
        function listByIds(ids,type) {  //通过id查询数据列表
            return $http.jsonp(list_url + type + ".json?ids=" + ids + '&' + CALLBACK).then(function(res){
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert,'请求接口异常','warning');
            });
        }
        function mergeData(data,type) { //合并数据接口
            return $http.jsonp(MERGE_NEW + type + '.json?data='+data + '&' + CALLBACK).then(function (res) {
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert,'请求接口异常','warning');
            })
        }
        function batchUpdate(data,type) { //批量修改
            var _postSet = new PostSetup(BATCHUPDATE + type + '.json', 'data=' + data);
            return $http(_postSet).then(function (res) {
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert,'接口请求异常','warning');
            });
        }
        function getTagTree(materialType,maxLevel) { //获取标签树
            return $http.get(tag_alone_tree + '?materialType=' + materialType + '&maxLevel=' + maxLevel).then(function (res) {
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert,'标签树请求异常','warning');
            });
        }
        function excludeIsolateData(data,type) {
            var promise = function () {
                return $http.jsonp(_search_url+'search/'+type+'.json?data=' + data + '&' + CALLBACK).then(function (res) {
                    return res.data;
                });
            }();
            var ids = [];
            return promise.then(function (res) {
                res.body.list.forEach(function (val) {
                    ids.push(val[type + 'Id']);
                });
                if(ids.length > 0)
                    return _self.service.getList(ids,type);
            });

        }
        function clearExcelSearch(type) { //清空excel
            return $http.jsonp(SEARCH_CLEAREXCEL + '?type=' + type + '&' + CALLBACK).then(function (res) {
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert, '清空excel查询接口请求异常', 'warning');
            })
        }
        function taggingAlone(type, data) { //单独打标签
            return $http(new PostSetup(tag_edi_new_update + type + '.json', data)).then(function (res) {
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '打标签接口请求异常', 'warning');
            })
        }
        function taggingAloneCheck(type, id, taskId) {
            var url = TAG_EDIT_NEW_CHECK + type + '/' + id + '.json?'+ CALLBACK;
            if(taskId) url += '&taskId=' + taskId;
            return $http.jsonp(url).then(function (res) {
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '打标签权限验证接口请求异常', 'warning');
            })
        }
    };
})();

/**
 * Created by hao.cheng on 2016/3/23.
 * 公共提取方法，部分只适用angularjs版本
 */
function ajaxJson(url,type,dataType,data,method,async){
    if(type == null || type == undefined || type == ''){
        type = 'get';
    }
    if(dataType == null || dataType == undefined || dataType == ''){
        dataType = 'json';
    }
    if(data == null || data == undefined){
        data = '';
    }
    if(async == null || async == undefined){
        async = true;
    }
    $.ajax({
        url: url,
        type: type,
        dataType: dataType,
        data: data,
        async: async,
        success: method,
        error: function(){
            alert('接口异常');
            //console.log(1);
        }
    });
}
/**
 * 分页通用方法--获取分页
 * @param $scope
 * @param maxSize  分页显示的页码个数
 * @param itemsPerPage  每页显示的数量
 * @param bigTotalItems 数据总条数
 * @param totalPage 数据总页数
 * @param bigCurrentPage    当前选择的页码
 */
function paginationCommon($scope,maxSize,itemsPerPage,bigTotalItems,totalPage,bigCurrentPage){
    $scope.maxSize = maxSize;
    $scope.itemsPerPage = itemsPerPage;
    $scope.bigCurrentPage = bigCurrentPage;
    $scope.bigTotalItems = bigTotalItems;
    $scope.totalPage = totalPage;
}
/**
 * 分页组件
 * @param $scope
 * @param maxSize
 * @param itemsPerPage
 * @param bigTotalItems
 * @param totalPage
 * @param bigCurrentPage
 */
function paginationDiscreteness($scope,maxSize,itemsPerPage,bigTotalItems,totalPage,bigCurrentPage){
    if(checkEmpty($scope.page)) $scope.page = {};
    $scope.page.maxSize = maxSize;
    $scope.page.itemsPerPage = itemsPerPage;
    $scope.page.currentPage = bigCurrentPage;
    $scope.page.totalItems = bigTotalItems;
    $scope.page.totalPage = totalPage;
}
/**
 * 分页通用方法--选择页码
 * @param $scope
 * @param $state
 * @param url   跳转的地址映射
 */
function choosePageCommon($scope,$state,url){
    $state.go(url,{pageNo: $scope.bigCurrentPage});
}
/**
 * 遍历$stateparams参数对象,返回需求对象
 * @param params    $stateparams对象
 * @param toArr    需要进行特殊处理（转换为数组）的对象
 * @returns {{}}    需求对象
 */
function iteratorStateParam(params,$filter,toArr){
    var data = {};
    var specialStrArr = [];
    if(!isPropertyEmpty(toArr)){
        specialStrArr = toArr.split(",");
    }
    for(var n in params){
        if(params[n] != undefined && params[n] != ''){
            if(specialStrArr != null && specialStrArr != undefined && specialStrArr.length != 0 && specialStrArr.indexOf(n) != -1){
                data[n] = stringToArray(params[n]);        //如果等于特殊字符，则进行相应的特殊处理
            }else if(params[n].constructor == Object){    //判断是否为对象，对象特殊处理
                data[n] = stringToArray(params[n]);     //将对象包装成数组
            }else if(typeof params[n] === 'string'){      //匹配时间格式，若包含则格式化日期（适用ui-bootstrap插件）并且是字符串
                if( params[n].match(reg_date_new)){
                    data[n] = formatDate(Date.parse(params[n]),$filter);
                }else{
                    data[n] = params[n];
                }
            }else{
                data[n] = params[n];
            }
        }
    }
    return data;
}
/**
 * 遍历素材数据对象，对特殊字段进行处理
 * @param data
 * @param $filter
 * @returns {{}}
 */
function iteratorData(data,$filter){
    for(var n in data){
        if( (data[n]+'').match(reg_date_new)){     //对日期进行转换
            data[n] = formatDate(Date.parse(data[n]),$filter);
        }
    }
    return data;
}
/**
 * 删除对象指定的属性
 * @param data  需要删除属性的对象
 * @param property  需要删除的属性名
 * @returns {*}
 */
function deleteProperty(data,property){
    var obj = data;
    //var arr = property.split(",");
    //for(var i = 0; i < arr.length; i++){
    //    delete  obj[arr[i]];
    //}
    delete  obj[property];
    return obj;
}
/**
 * 将字符串转换成数组 eg:'1,2,3' --->  [1,2,3]
 * @param str   字符串参数
 */
function stringToArray(str){
    if(checkEmpty(str))
        return;
    if(str.constructor == String){
        if(!checkEmpty(str)){
            str = JSON.parse('['+str+']');
        }
    }
    if(str.constructor == Object){
        if(!isEmpty(str)){
            str = JSON.parse('['+JSON.stringify(str)+']');
        }
    }

    return str;
}
/**
 *  判断对象是否是undefined或''
 * @param data
 */
function checkEmpty(data){
    if(data == undefined || data == '')
        return true;
}
/**
 * 判断对象是否为空对象
 * @param obj
 * @returns {boolean}
 */
function isEmpty(obj) {
    for (var name in obj) {
        if(obj[name] != undefined && obj[name] != ''){
            return false;
        }
    }
    return true;
};
var reg_date_new = 'GMT';
var git_users = [];
//var git_page = 1;
function getGitUsers($http,$cookies,$scope,git_page, method){
    if(git_page === 1){
        git_users.length = 0;
    }
    $http.get(git_user+ '&private_token=' +  $cookies.get('kpk') + '&page=' + git_page).success(function(res){
        if(res.length > 0){
            for(var i = 0; i < res.length; i++){
                var user = {};
                user.name = res[i].name;
                user.uId = res[i].id;
                user.allname = res[i].name + "—" + res[i].username + "—" + res[i].id;
                if(judgeInArray(git_users, user, 'uId') == -1){
                    git_users.push(user);
                }
            }
            $scope.gitUsers = git_users;
            //method();
            git_page = git_page + 1;
            getGitUsers($http,$cookies,$scope,git_page,method);
        } else {
            method();
        }
    });
}
/**
 * 获取所有用户
 * @param $http
 * @param method
 */
function getAllUser($http, method){
    var data = {};data['pageSize'] = 1000;
    var url = uc_url + "user/queryUser.json?" + CALLBACK + "&data="+JSON.stringify(data);
    $http.jsonp(url).success(function(res){
        if(res.status == 1){
            var users = res.data.list;
            for(var i = 0; i < users.length; i++){
                users[i].allname = users[i].name + "-" + users[i].userName + "-" + users[i].id;
                users[i].uId = users[i].id;
            }
            if(!checkEmpty(method)){
                method(users);
            }
        }
    }).error(function(res){
        console.log(res);
        alertTipCommon($timeout,$rootScope,"获取用户列表失败",display);
    })
}
/**
 * 判断一个元素是否在一个数组里面
 * @param datas
 * @param data
 * @param propertyName
 */
function judgeInArray(datas, data, propertyName){
    for(var i = 0; i < datas.length; i++){
        if(datas[i][propertyName] === data[propertyName])
            return i;
    }
    return -1;
}

/**
 * 获取一个数组的对象的特定属性的对象
 * @param array
 * @param propertyName
 */
function getArrayProperty(array, propertyName){
    var propertyList = new Array();
    for(var i = 0; i < array.length; i++){
        if(array[i][propertyName] != undefined){
            var obj = {};
            obj[propertyName] = array[i][propertyName];
            propertyList.push(obj);
        }
    }
    return propertyList;
}

/**
 * 克隆一个对象
 * @returns 返回一个新对象
 * @constructor
 */
//Object.prototype.Clone = function()
//{
//    var objClone;
//    if ( this.constructor == Object ) objClone = new this.constructor();
//    else objClone = new this.constructor(this.valueOf());
//    for ( var key in this )
//    {
//        if ( objClone[key] != this[key] )
//        {
//            if ( typeof(this[key]) == 'object' )
//            {
//                objClone[key] = this[key].Clone();
//            }
//            else
//            {
//                objClone[key] = this[key];
//            }
//        }
//    }
//    objClone.toString = this.toString;
//    objClone.valueOf = this.valueOf;
//    return objClone;
//};

/**
 * 克隆一个对象
 */
function cloneOneObject(object){
    var objClone;
    if ( object.constructor == Object ) objClone = new object.constructor();
    else objClone = new object.constructor(object.valueOf());
    for ( var key in object )
    {
        if ( objClone[key] != object[key] )
        {
            if (object[key].constructor == Object)
            {
                objClone[key] = cloneOneObject(object[key]);
            }
            else
            {
                objClone[key] = object[key];
            }
        }
    }
    objClone.toString = object.toString;
    objClone.valueOf = object.valueOf;
    return objClone;
}
function replaceByIndex(index,str,reg){
    var arr = str.split('');
    arr.splice(index,1,reg);    //数组替换
    return arr.join('');        //数组拼接字符串
}

/**
 * 判断一个对象属性是否是空
 * @param str
 * @returns {boolean}
 */
function isPropertyEmpty(str){
    if (str == undefined || str == null || str === ''){
        return true;
    }
    return false;
}
/**
 * 将时间戳转成yyyy-MM-dd
 * @param time
 * @returns {string}
 */
function translateTimeToDate(time){
    var date = new Date(time);
    var Y = date.getFullYear() + '-';
    var M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';
    var D = date.getDate() + ' ';
    return Y+M+D;
}
//递归调用json，返回所有的叶子节点
//a 待处理的数组
//nodeList 返回的结果list
function getAllNode(a, nodeList) {
    for (var key in a) {
        if (key == 'children') {  //如果是子节点数组，那么循环里面每一个对象
            for (var i in a.children) {
                getAllNode(a.children[i], nodeList);
            }
        } else if (key == 'name') {  //如果是名字,就记录
            var obj = {};
            obj.id = a.id;
            obj.name = a.name;
            obj.pId = a.parentId;
            obj.tagLevel = a.tagLevel;
            obj.ancestorId = a.ancestorId;
            obj.ancestorName = a.ancestorName;
            nodeList.push(obj);
        }
    }
    return nodeList;
}
/**
 * 通过用户名返回用户id
 * @param name  用户名
 * @param users 用户集合
 * @returns {*}
 */
function returnUidByUname(name,users) {
    for(var i = 0; i < users.length; i++){
        if(users[i].name == name){
            return users[i].id;
        }
    }
}
/**
 * 排除响应的对象属性
 * @param obj
 * @param excludeProperties
 */
function excludeProperties(obj,excludeProperties){
    var tempObj = {};
    for(var p in obj){
        var flag = true;
        for(var i = 0; i < excludeProperties.length; i++){
            if(excludeProperties[i] == p){
                flag = false;
                break;
            }
        }
        if(flag && obj[p])
            tempObj[p] = obj[p];
        if(flag && obj[p] && p == 'tagBeans')
            tempObj[p] = JSON.parse(obj[p]);
    }
    return tempObj;
}
/**
 * 继承一个对象并且返回所有pototype属性
 * @param obj
 * @returns {obj}
 */
function inherit(parentObj,childObj) {
    if(!childObj) var childObj;
    childObj = Object.create(parentObj);
    for(var p in childObj) if(childObj[p]) childObj[p] = childObj[p];
    return childObj;
}
/**
 * 复制一个对象的属性值到另外一个对象
 * @param fromObj
 * @param toObj
 * @returns {*}
 */
function concatObj(fromObj, toObj) {
    if(!toObj) var toObj;
    for(var p in fromObj) toObj[p] = fromObj[p];
    return toObj;
}

/**
 * 把一个对象里面的属性拼装成适合url
 * @param obj
 */
function formatObject4Url(obj){
    var str = "";
    if(!obj || Object.getOwnPropertyNames(obj).length === 0){
        return str;
    }
    for(var key in obj){
        if(obj.hasOwnProperty(key) && typeof obj[key] != 'function'){
            str += key + "=" + obj[key] + "&";
        }
    }
    str = str.substr(0, str.length - 1);
    return str;
}

/**
 * 获取对象的一串属性
 * @param obj
 * @param arr
 * @param method
 */
function getSpecialPropertiesByArray(obj, arr, method){
    for(var property in obj){
        if(arr.indexOf(property) != -1){
            method(obj[property]);
        }
    }
}

/**
 *获取ztree某个节点的所有子节点
 * @param parentNode 需要获取子节点的父节点
 * @param childNodes 用于装子节点的数组
 * @returns {*}
 */
function getAllChildNode(parentNode, childNodes){
    parentNode.children.forEach(function(node){
        childNodes.push(node);
        var nodes = node.children;
        if(nodes && nodes.length != 0){
            getAllChildNode(node, childNodes);
        }
    });
    return childNodes;
}
/**
 * get请求
 * @param url
 * @param $http
 * @param SweetAlert
 * @param failedMsg
 * @returns {*}
 * @constructor
 */
function HttpGET(url, $http, SweetAlert, failedMsg){
    return $http.get(url).then(function(res){
        return res.data;
    }, function () {
        sweetAlertCommon(SweetAlert, failedMsg, 'warning');
    });
}
/**
 * post请求
 * @param url
 * @param params
 * @param $http
 * @param SweetAlert
 * @param failedMsg
 * @returns {*}
 * @constructor
 */
function HttpPost(url, params, $http, SweetAlert, failedMsg){
    return $http(new PostSetup(url, params)).then(function(res){
        return res.data;
    }, function () {
        sweetAlertCommon(SweetAlert, failedMsg, 'warning');
    });
}



/**
 * Created by hao.cheng on 2016/7/28.
 * Desc: store all common constructors
 */
/**
 * post请求设置父类构造函数
 * @param url 请求地址
 * @param data 请求携带参数
 * @constructor
 */
function PostSetup(url, data) {
    this.method = 'POST';
    this.url = url;
    this.data = data;
    this.headers = {'Content-Type': 'application/x-www-form-urlencoded'};
}
/**
 * 统一表单对象父类构造函数
 * @constructor
 */
function Form() {
    this.pageSize = 100;
    this.pageNo = 1;
}
/**
 * SweetAlert 统一设置类
 * @constructor
 */
function SweetAlertSetup(msg1, msg2, type) {
    this.title = msg1;
    this.text = msg2;
    this.type = type;
    this.confirmButtonText = '确认!';
    this.closeOnConfirm = true;
    if(type == 'success') this.timer = 1200; //成功
}
/**
 * 容器类构造函数
 * @param title     容器标题
 * @param head      容器头部内容
 * @param body      容器身体内容
 * @constructor
 */
function Container(title, head, body){
    this.title = title;
    this.head = head ? head : {show: true};
    this.body = body ? body : {show: true};
}

// To run this code, edit file index.html or index.jade and change
// html data-ng-app attribute from angle to myAppName
// ----------------------------------------------------------------------

(function() {
    'use strict';

    angular
        .module('custom')
        .controller('Controller', Controller);

    Controller.$inject = ['$log'];
    function Controller($log) {
        // for controllerAs syntax
        // var vm = this;

        activate();

        ////////////////

        function activate() {
          $log.log('I\'m a line from custom.js');
        }
    }
})();

/**
 * Created by hao.cheng on 2016/5/28.
 */
angular.module('app.routes').directive('validNumber', function() { //规定只能正整数输入
    return {
        require: '?ngModel',
        link: function(scope, element, attrs, ngModelCtrl) {
            if(!ngModelCtrl) {
                return;
            }

            ngModelCtrl.$parsers.push(function(val) {
                var clean = val.replace( /[^0-9]+/g, '');
                if (val !== clean) {
                    ngModelCtrl.$setViewValue(clean);
                    ngModelCtrl.$render();
                }
                return clean;
            });

            element.bind('keypress', function(event) {
                if(event.keyCode === 32) {
                    event.preventDefault();
                }
            });
        }
    };
});
angular.module('app.routes').directive('decimal', function() { //规定只能正整数或者小数
    return {
        require: '?ngModel',
        link: function(scope, element, attrs, ngModelCtrl) {
            if(!ngModelCtrl) {
                return;
            }

            ngModelCtrl.$parsers.push(function(val) {
                if(!/^-?\d+\.?\d{0,1}$/.test(val)){
                    ngModelCtrl.$setViewValue('');
                    ngModelCtrl.$render();
                }else{
                    return val;
                }
            });

            element.bind('keypress', function(event) {
                if(event.keyCode === 32) {
                    event.preventDefault();
                }
            });
        }
    };
});
angular.module('app.routes').filter('cut', function () {   //filter过滤器，数据超长部分显示省略号
    return function (value, wordwise, max, tail) {
        if (!value) return '';

        max = parseInt(max, 10);
        if (!max) return value;
        if (value.length <= max) return value;

        value = value.substr(0, max);
        if (wordwise) {
            var lastspace = value.lastIndexOf(' ');
            if (lastspace != -1) {
                value = value.substr(0, lastspace);
            }
        }

        return value + (tail || ' …');
    };
});
angular.module('app.routes').directive('myDate',["dateFilter", "$parse", function(dateFilter,$parse){ //自动转换日期类型，将日期插件转换为yyyy-MM-dd
    return{
        restrict:'EAC',
        require:'?ngModel',
        link:function(scope,element,attrs,ngModel,ctrl){
            ngModel.$parsers.push(function(viewValue){
                return dateFilter(viewValue,'yyyy-MM-dd');
            });
        }
    }
}]);
angular.module('app.routes').directive('tagSearchTpl',function () { //自定义标签搜索模板指令 2016-6-30 13:51:17
   return {
       restrict: 'EA',
       templateUrl: 'app/views/partials/tagsearch-tpl.html',
       controller: ["$scope", function ($scope) {
           $scope.selectSearchTag = function(tag){
               selectTagSearch(tag,$scope.$parent);
           };
           $scope.artistTagRemove = function(tag){
               styleTagSearchWay(tag,$scope,false);
               $scope.$parent.form.tagBeans.remove(tag);
           };
       }]
   }
});
angular.module('app.routes').directive('tagSearchOneTagTpl',function () { //自定义标签搜索模板指令 2016-6-30 13:51:17
    return {
        restrict: 'EA',
        templateUrl: 'app/views/partials/tagsearch-tpl.html',
        controller: ["$scope", function ($scope) {
            $scope.selectSearchTag = function(tag){
                selectTagSearchOneTag(tag,$scope.$parent);
            };
            $scope.artistTagRemove = function(tag){
                styleTagSearchWay(tag,$scope,false);
                $scope.$parent.form.tagBeans.remove(tag);
            };
        }]
    }
});
angular.module('app.routes').directive('changeTagType', function () { //主次标签切换查询自定义指令 2016-8-23 18:09:04
   return {
       restrict: 'EAC',
       link: function (scope, element) {
            element.bind('click', function () {
                for(var i = 0; i < scope.form.tagBeans.length; i++){
                    if(!checkEmpty(scope.form.tagBeans[i].type)){
                        scope.form.tagBeans[i].type = scope.form.style;
                    }
                }
            });
       }
   }
});
angular.module('app.routes').directive('songtagSearchTpl',function () { //自定义标签搜索模板指令 2016-6-30 13:51:17
    return {
        restrict: 'EA',
        templateUrl: 'app/views/partials/songtagsearch-tpl.html',
        controller: ["$scope", function ($scope) {
            $scope.songSelectSearchTag = function(tag){
                songSelectSearchTag(tag,$scope.$parent);
            };
            $scope.songTagRemove = function(tag){
                //tagRemove(tag,$scope,$stateParams,$state,'app.song');
                $scope.form.searchTag.remove(tag);
            };
        }]
    }
});
angular.module('app.routes').directive('playButton',function () {  //自定义播放按钮 2016-7-6 13:51:11
    return {
        restrict: 'EA',
        templateUrl: 'app/views/partials/playbutton.html',
        controller: ["$scope", "SweetAlert", function ($scope,SweetAlert) {
            $scope.addPlaySong = function(songId,copyrights){ //歌曲播放
                if(!copyrights) return sweetAlertCommon(SweetAlert, '暂无试听版权', 'warning');
                var copyrightIds = [];
                for(var i = 0; i < copyrights.length; i++){
                    copyrightIds.push(copyrights[i].copyrightId);
                }
                addPlaySong(songId,SweetAlert, [],copyrightIds, 0);
            };
        }]
    }
});
angular.module('app.routes').directive('playIcon',function () {     //自定义播放icon指令 2016-7-6 15:05:06
    return{
        restrict: 'EA',
        templateUrl: 'app/views/partials/playicon.html',
        controller: ["$scope", "CatalogService", "SweetAlert", function ($scope,CatalogService,SweetAlert) {
            $scope.addPlaySong = function(songId){ //歌曲播放
                var promise = CatalogService.service.getCatalogs(songId);  //获取版权
                promise.then(function (res) {
                    var copyrights = [],copyrights = res;
                    var copyrightIds = [];
                    for(var i = 0; i < copyrights.length; i++){
                        copyrightIds.push(copyrights[i].copyrightId);
                    }
                    addPlaySong(songId,SweetAlert, [],copyrightIds, 0);
                });
            };
        }]
    }
});
angular.module('app.routes').directive('operateData',function () {   //自定义改变状态指令    2016-7-6 17:54:21
    return{
        restrict: 'EA',
        templateUrl: 'app/views/partials/operatedata.html',
        controller: 'DirectiveController'
    }
});
angular.module('app.routes').controller('DirectiveController',["$scope", "BaseService", "SweetAlert", function ($scope,BaseService, SweetAlert) {
    $scope.changeStatus = function (data,status) {
        var type,id;
        if(data.hasOwnProperty('artistId')) type = 'artist',id = data['artistId'];
        if(data.hasOwnProperty('albumId')) type = 'album',id = data['albumId'];
        if(data.hasOwnProperty('songId')) type = 'song',id = data['songId'];
        sweetAlertConfirm(SweetAlert, function () {
            var promise = BaseService.service.changeDataStatus(type,id,status);
            promise.then(function (res) {
                if(res.status == 1) data.status = status;
            });
        }, 'warning');

    }
}]);
angular.module('app.routes').directive('materialOperation',function () {    //自定义预览指令 2016-7-7 18:13:31
    return{
        restrict: 'E',
        templateUrl: 'app/views/partials/materialoperation.html',
        controller: ["BaseService", "$scope", "$state", "$stateParams", function (BaseService,$scope,$state, $stateParams) {
            $scope.preData = function (data,type,tags,tagExt) {    //预览按钮
                if(type == 'song'){
                    tags = [];
                    $("input[name=taggingCheck]:checked").each(function () {
                        var tag = {};
                        tag.tagId = $(this).val();
                        tag.type = 0;
                        tag.tagName = $(this).parent().attr('title');
                        tags.push(tag);
                    });
                }
                if(!checkEmpty(data.effectYearsStart)) data.effectYears = data.effectYearsStart;    //特殊处理影响年代
                if(!checkEmpty(data.effectYearsEnd)){
                    if(!checkEmpty(data.effectYearsStart)) data.effectYears += '-' + data.effectYearsEnd;
                    else data.effectYears = data.effectYearsEnd;
                }
                if(data.birth) data.birth = sliceDate(data.birth);
                if(data.deathdate) data.deathdate = sliceDate(data.deathdate);
                if(data.publishTime) data.publishTime = sliceDate(data.publishTime);
                var preData = Object.create([data,tags,tagExt]);
                localStorage.setItem('preData',angular.toJson(preData.__proto__));
                var urlType = type.charAt(0).toUpperCase() + type.slice(1);
                var url = $state.href('material.pre'+urlType);
                window.open(url,'','width=1300,height=600,left=200,top=50');
            };
            $scope.back = function () {
                if($stateParams.lastPage) window.open(returnLastPage($stateParams.lastPage), '_self');
                else history.back();
            }
        }]
    }
});
angular.module('app.routes').directive('ngRightClick', ["$parse", function($parse) {   //自定义右键指令，执行右键方法 2016-7-12 11:26:07
    return function(scope, element, attrs) {
        var fn = $parse(attrs.ngRightClick);
        element.bind('contextmenu', function(event) {
            scope.$apply(function() {
                event.preventDefault();
                fn(scope, {$event:event});
            });
        });
    };
}]);
angular.module('app.routes').directive('mergeButton',["$state", "SweetAlert", function ($state,SweetAlert) { //自定义合并按钮指令 2016-7-14 17:05:29
   return {
       restrict: 'A',
       link: function (scope,element) {
           element.bind('click',function () {
               var dataType = $state.current.name.replace('app.','');
               var ids = [];
               scope.datas.forEach(function (val) {
                   if(val.isCheck){
                       ids.push(val[dataType+'Id']);
                   }
               });
               // if(ids.length < 1){
               //     sweetAlertCommon(SweetAlert,'请选择需要合并的数据','warning');
               //     return;
               // }
               $state.go('app.merge.list',{type: dataType,mergeIds: ids.join(','), lastPage: returnLastPageTime()});
           })
       }
   }
}]);
angular.module('app.routes').directive('bacthUpdateBtn',["$state", "SweetAlert", function ($state, SweetAlert) { //自定义批量修改按钮指令 2016-7-20 17:03:13
    return {
        restrict: 'A',
        link: function (scope,element) {
            element.bind('click',function () {
                var dataType = 'song',_batchLocal = {};
                var _stateName = $state.current.name;
                // if($state.current.name.indexOf('song') != -1) dataType = 'song';
                var ids = [];
                if(!checkEmpty(scope.datas))
                    scope.datas.forEach(function (val) {
                        if(val.isCheck) {
                            ids.push(val[dataType+'Id']);
                            if(val.taskId && (_stateName.indexOf('songtagTask') != -1 || _stateName.indexOf('songTask') != -1)) _batchLocal[val[dataType+'Id']] = val.taskId;  //歌曲标签特殊处理
                            if( _stateName.indexOf('songTask') != -1) _batchLocal.all = true;
                        }
                    });
                var _batchLocalLength = Object.getOwnPropertyNames(_batchLocal).length;
                if(_batchLocalLength > 0) localStorage.setItem('batchLocal', JSON.stringify(_batchLocal));
                if((_stateName.indexOf('songtagTask') != -1 || _stateName.indexOf('songTask') != -1) && ids.length == 0) return sweetAlertCommon(SweetAlert, '请先选择需要修改的数据', 'warning');
                if(_stateName.indexOf('uc_task_new_song') != -1 || _stateName.indexOf('preCatalog') != -1) var _flow = 0;  //新歌和预编目工单特殊处理
                var _url = $state.href('app.update.list',{upType: dataType,updateIds: ids.join(','), batchLocal: _batchLocalLength, flow: _flow});
                window.open(_url, '_blank');
            })
        }
    }
}]);
angular.module('app.routes').directive('editUserTpl',function () {
   return {
       restrict: 'EA',
       templateUrl: 'app/views/partials/edituser-tpl.html',
       controller: ["$scope", function ($scope) {
           if(checkEmpty($scope.users))
               // getAllUser($http,function(users){
               //     $scope.users
               //     localStorage.setItem('users',JSON.stringify(users));
               // });
               $scope.users = JSON.parse(localStorage.getItem('users'));
           //选择最后编辑人
           $scope.selectLastEdit = function(user){
               $scope.form.uid = user.uId;
           };
       }]
   }
});
angular.module('app.routes').directive('resetBtn',function () {
   return {
       restrict: 'EA',
       link: function (scope,element) {
           element.bind('click',function () {
               scope.form = {};
           });
       }
   }
});
angular.module('app.routes').directive('radioButton',function () {
    return {
        restrict: 'EA',
        templateUrl: 'app/views/partials/radiobtn-tpl.html',
        controller: ["$scope", function ($scope) {
            $scope.selectRadio = function (datas, data) {
                angular.forEach(datas, function (data) {
                    data.isCheck = false;
                });
                data.isCheck = true;
            };
        }]
    }
});
angular.module('app.routes').directive('checkAllBtn',function () {
   return {
       restrict: 'EA',
       templateUrl: 'app/views/partials/checkAll-tpl.html',
       controller: ["$scope", function ($scope) {
           $scope.checkAll = function (datas) {
               $scope.allCheck = !$scope.allCheck;
               datas.forEach(function (val) {
                   if($scope.allCheck) val.isCheck = true;
                   else val.isCheck = false;
               });
           }
       }]
   }
});
angular.module('app.routes').directive('loadScript', ["$filter", function($filter) {
    return function(scope, element, attrs) {
        element.wrap('<script type="text/ng-template" id="myModalContent.html"></script>');
    };
}]);
angular.module('app.routes').directive('assignTask', ["TaskService", "SweetAlert", function (TaskService, SweetAlert) {  //自定义指派任务指令 2016-8-9 16:40:41
    return {
        restrict: 'A',
        link: function (scope, element) {
            element.bind('click', function () {
                if(!scope.assignUser) return sweetAlertCommon(SweetAlert, '请选择分配人', 'warning');
                var _taskIds = getPropertyFromCheckBox(scope.datas, "isCheck", true, "taskId");
                if(_taskIds.length == 0) return sweetAlertCommon(SweetAlert, '请选择需要分配的数据', 'warning');
                var _promise = TaskService.service.assignTask(_taskIds, scope.authoritySetting.flowId, scope.authoritySetting.auth, scope.assignUser); // 确认权限和流程
                if(_promise) _promise.then(function (res) {
                    if(res.returnCode == "000000"){
                        sweetAlertCommon(SweetAlert, res.msg, 'success');
                        location.reload(true);
                    } else if (res.returnCode == "000005") {
                        var tips = "版权ID为" + res.list.join(',') + '的数据分配失败，已为您重新勾选，请重新分配';
                        sweetAlertCommon(SweetAlert, tips, 'success');
                        checkAssignedFailed(res.list, scope.datas);
                    } else {
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                })
            })
        }
    }
}]);
angular.module('app.routes').directive('taskSubmit', ["$state", function ($state) {  //工单条件查询自定义查询按钮指令 2016-8-9 16:44:17
    return {
        restrict: 'A',
        link: function (scope, element) {
            element.bind('click', function () {
                var form = JSON.parse(JSON.stringify(scope.form));
                if(form.tagBeans && (form.tagBeans.constructor == Array)) form.tagBeans = JSON.stringify(form.tagBeans);
                if(!form.lastEditSearch) form.uid = undefined;
                form.pageNo = 1;
                $state.go($state.current.name, form);
            });
        }
    }
}]);
angular.module('app.routes').directive('taskReset', function () {  //工单重置查询条件自定义按钮指令 2016-8-9 16:46:15
    return {
        restrict: 'A',
        link: function (scope, element) {
            element.bind('click', function () {
                for(var p in scope.form){
                    if(p != 'projectId' && p != 'pageNo' && p != 'pageSize') scope.form[p] = '';
                }
            })
        }
    }
});
angular.module('app.routes').directive('formOnChange', ["$parse", "$interpolate", function($parse, $interpolate){  //form表单字段变化自定义指定按钮
    return {
        require: "form",
        link: function(scope, element, attrs, form){
            var cb = $parse(attrs.formOnChange);
            element.on("change", function(){
                cb(scope);
            });
        }
    };
}]);
angular.module('app.routes').directive('stateToFeedback', ["$stateParams", "$state", function ($stateParams, $state) {
    return {
        restrict: 'EA',
        scope: {
            feedBack: '@'
        },
        link: function (scope, element) {
            element.bind('click', function () {
                var _params = {type: scope.feedBack, pid: $stateParams.projectId, uid: JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid, pageSize: 50, pageNo: 1};
                var _url = $state.href('app.songtagTaskFeedback', _params);
                window.open(_url, '_blank');
            });

        }
    }
}]);
/**
 * Created by kiracheng on 2016/5/5.
 * 获取素材列表数据
 */
(function() {
    'use strict';

    angular
        .module('app.list',[])
        .service('list', list);

    list.$inject = ['$http','Constant'];
    function list($http,Constant) {
        this.getData = getList

        function getList(type,param){
            //function isEmpty(obj) {
            //    for (var name in obj) {
            //        if(obj[name] != undefined && obj[name] != ''){
            //            return false;
            //        }
            //    }
            //    return true;
            //};
            //if(isEmpty(param))
            //    return;
            if(param.pageNo == undefined)
                param.pageNo = 1;
            if(param.pageSize == undefined)
                param.pageSize = 100;
            param.isolated = 0;
            return $http.jsonp(Constant._search_url+type+'.json?data='+JSON.stringify(param)+'&'+Constant._CALLBACK).then(function(res){
                console.log(res.data);
                //for(var i in data.body.list)
                return res.data;
            })
        }

    }
})();
/**
 * Created by kiracheng on 2016/5/21.
 */
/**
 * Created by hao.cheng on 2016/4/21.
 * 1.素材界面通用
 */
/**
 * 请求获取数据信息
 * @param tp    数据类型，artist，album，song
 * @param $http
 * @param $scope
 * @param $sce
 * @param $stateParams
 * @param method    回调函数
 */
function getDataInfo(tp,$http,$scope,$sce,$stateParams,flag){
    var infoUrl = detail_url+tp+'/'+$stateParams[tp+'Id']+'.json?' + CALLBACK;
    $http.jsonp(infoUrl).success(function(res1){
        //$scope.data = JSON.parse(JSON.stringify(res1.data).replace(/\\r\\n/g, '<br />'));  //将对象进行特俗处理，替换所有\r\n  -->  <br/>
        //$scope.honors = $sce.trustAsHtml($scope.data.honors);      //转换html代码，使得页面上不用显示<br/>而是换行效果
        //$scope.course = $sce.trustAsHtml($scope.data.course);
        //$scope.resumes = $sce.trustAsHtml($scope.data.resumes);
        if(!checkEmpty($stateParams.tp)){
            res1.data.type = $stateParams.tp;
        }
        if(checkEmpty(res1.data.movies) && res1.data.hasOwnProperty('songId')) res1.data.movies = [{movieType:'',name:'',type:''}]; //如果歌曲不存在movie，默认添加一个空
        if(!checkEmpty(res1.data.birth)){
            if(res1.data.birth.length == 5) $scope.month = true;
        }
        if(!checkEmpty(res1.data.deathdate)){
            if(res1.data.deathdate.length == 5) $scope.deathdatemonth = true;
        }
        if(res1.data.imgUrl != undefined && res1.data.imgUrl != '' && res1.data.imgUrl.indexOf('http') == -1){
            res1.data.imgUrl = img_r_url + res1.data.imgUrl;
            res1.data.imgs = [];

            var imgSize = {}; // undefined var
            function getMeta(url){
                var img = new Image();
                img.addEventListener("load", function(){
                    imgSize.width = this.naturalWidth;
                    imgSize.height = this.naturalHeight;
                    getImgHeaders('大','',true);
                });
                img.src = url;
            }
            getMeta(res1.data.imgUrl);
            // $.ajax({
            //     url: res1.data.imgUrl
            // }).done(function (data) {
            //     alert(data.getResponseHeader());
            //     console.log(data.getResponseHeader('Link'));
            // });

            function getImgHeaders(type,size,f){ //获取图片请求的头信息
                $http.jsonp(http_url+'/img/getHeaders.json?'+CALLBACK+'&url='+res1.data.imgUrl + '?w='+size+'&h='+size).success(function(res){
                    var img = {};
                    img.sizeN = type;
                    img.url = res1.data.imgUrl + '?w='+size+'&h='+size;
                    img.width = (type == '大')?imgSize.width : size;
                    img.height = (type == '大')?imgSize.height : size;
                    img.size = res.hasOwnProperty('data')?Math.ceil(res.data['Content-Length']/1024):'';
                    img.type = res.hasOwnProperty('data')?res.data['Content-Type']:'';
                    if(f)
                        img.selected = true;
                    res1.data.imgs.push(img);
                    if(f){
                        $scope.data = res1.data;            //防止异步请求刷新问题，将$scope.data赋值放到此处
                        setGallery(res1.data.imgs,$scope);
                        getBirth($scope);       //艺人生日特殊处理
                        if(!checkEmpty($scope.data.effectYears)){   //艺人影响年代特殊处理
                            $scope.data.effectYearsStart = ($scope.data.effectYears.split('-'))[0] == 'undefined'?'':($scope.data.effectYears.split('-'))[0];
                            $scope.data.effectYearsEnd = ($scope.data.effectYears.split('-'))[1] == 'undefined'?'':($scope.data.effectYears.split('-'))[1];
                        }
                        translateScore($scope);
                        if(flag != undefined && flag == true){
                            if(tp == 'artist'){
                                setRaty($scope,'mscore');
                            }else{
                                setRaty($scope,'manualScore');
                            }
                            $('#playTime').setTime({drag:true,a:0.05});
                        }
                        console.log($scope.data);
                    }
                })
            }
            getImgHeaders('小',85);  //裁剪图片
            getImgHeaders('中',150);
            // getImgHeaders('大','',true);
        }else{
            $scope.data = res1.data;
            setGallery(undefined,$scope,res1.data.imgUrl);
            getBirth($scope);       //艺人生日特殊处理
            if(!checkEmpty($scope.data.effectYears)){   //艺人影响年代特殊处理
                $scope.data.effectYearsStart = ($scope.data.effectYears.split('-'))[0];
                $scope.data.effectYearsEnd = ($scope.data.effectYears.split('-'))[1];
            }
            translateScore($scope);
            if(flag != undefined && flag == true){
                if(tp == 'artist'){
                    setRaty($scope,'mscore');
                }else{
                    setRaty($scope,'manualScore');
                }
                $('#playTime').setTime({drag:true,a:0.05});
            }
            console.log($scope.data);
        }
    });
}
function setGallery(imgs,$scope,img){ //设置图片预览
    $scope.images = [];
    if(!checkEmpty(imgs)){
        for(var i =0; i < imgs.length;i++){
            var image = {};
            image.thumb = imgs[i].url;
            image.img = imgs[i].url;
            image.type = imgs[i].sizeN;
            $scope.images.push(image);
        }
    }else if(!checkEmpty(img)){
        var image = {};
        image.thumb = img;
        image.img = img;
        $scope.images.push(image);
    }

}
function translateScore($scope){    //转换评分，5 --> 5.0
    if(!checkEmpty($scope.data.mscore+'')){
        if(($scope.data.mscore+'').length == 1){
            $scope.data.mscore = $scope.data.mscore + '.0';
        }
    }
    if(!checkEmpty($scope.data.manualScore+'')){
        if(($scope.data.manualScore+'').length == 1){
            $scope.data.manualScore = $scope.data.manualScore + '.0';
        }
    }
}
function setRaty($scope,property){       //评分插件
    $.fn.raty.defaults.path = 'vendor/jquery-raty/lib/img';
    $.fn.raty.defaults.cancelHint = '重置评分！';
    $.fn.raty.defaults.width = 'auto';
    var score = '';
    if(checkEmpty($scope.data)){
        score = '0.0';
    }else{
        if($scope.data[property] == null || $scope.data[property] == undefined || $scope.data[property] == ''){
            score = '0.0';
        }else{
            score = $scope.data[property];
        }
    }
    $('#precision-demo').raty({size: 15.5, target: '#precision-hint', cancel: true, targetKeep: true, precision: true,readOnly: true,score:score});
}
/**
 * 素材界面上传图片
 * @param id    关联数据id
 * @param $timeout
 * @param $rootScope
 * @param display
 * @param type  上传关联数据类型
 * @param $scope
 */
function uploadImg(id,type,$scope,$http,SweetAlert){
    if(checkEmpty($('#file').val())){
        sweetAlertCommon(SweetAlert,'操作失败','warning','请选择上传图片');
        return;
    }
    var fileType = $('#file').val().substring($('#file').val().lastIndexOf('.')+1).toLowerCase();
    if(fileType != 'jpg' && fileType != 'png'){
        sweetAlertCommon(SweetAlert,'操作失败','warning','只能上传jpg或者png格式');
        return;
    }
    if(id)  var url = http_url + '/img/upload/'+type+'/'+id+'.json';
    else var url = http_url + '/img/upload.json';
    $.ajaxFileUpload({
        url: url,
        type: 'post',
        secureuri: false,           //一般设置为false
        fileElementId: 'file',      // 上传文件的id、name属性名
        dataType: 'json',           //返回值类型，一般设置为json、application/json
        success: function(data){
            var md5 = data.data;
            sweetAlertCommon(SweetAlert,data.msg,'success');
            $scope.data.imgUrl = img_r_url + data.data;
            var imgs = [];

            // var imgSize = {}; // undefined var
            // function getMeta(url){
            //     var img = new Image();
            //     img.addEventListener("load", function(){
            //         imgSize.width = this.naturalWidth;
            //         imgSize.height = this.naturalHeight;
            //         getImgHeaders('大','',$scope.data.imgUrl,imgs,$scope,$http,true);
            //     });
            //     img.src = url;
            // }
            // getMeta(res1.data.imgUrl);

            getImgHeaders('小',85,$scope.data.imgUrl,imgs,$scope,$http);  //裁剪图片
            getImgHeaders('中',150,$scope.data.imgUrl,imgs,$scope,$http);
            getImgHeaders('大','',$scope.data.imgUrl,imgs,$scope,$http,true);
        },
        error: function(data, status, e){
            console.log(e);
        }
    });
}
function deleteImg($scope,SweetAlert){
    if($scope.data.imgUrl != undefined){
        $scope.data = deleteProperty($scope.data,'imgUrl');
        sweetAlertCommon(SweetAlert,'删除图片成功，点击提交后才能改变数据','success');
    }
    if($scope.data.imgs != undefined){
        $scope.data = deleteProperty($scope.data,'imgs');
    }
}
function getImgHeaders(type,size,imgUrl,arr,$scope,$http,f){ //获取图片请求的头信息
    $http.jsonp(http_url+'/img/getHeaders.json?'+CALLBACK+'&url='+imgUrl + '?w='+size+'&h='+size).success(function(res){
        var img = {};
        img.sizeN = type;
        img.url = imgUrl + '?w='+size+'&h='+size;
        img.width = size;
        img.height = size;
        img.size = res.hasOwnProperty('data')?Math.ceil(res.data['Content-Length']/1024):'';
        img.type = res.hasOwnProperty('data')?res.data['Content-Type']:'';
        if(f)
            img.selected = true;
        arr.push(img);
        if(f){
            $scope.data.imgs = arr;            //防止异步请求刷新问题，将$scope.data赋值放到此处
            console.log($scope.data.imgs);
            setGallery($scope.data.imgs,$scope);
        }
    })
}
function uploadLyric(content,$scope,SweetAlert){
    if(checkEmpty($('#lyricFile').val())){
        sweetAlertCommon(SweetAlert,'请选择上传文件','warning');
        return;
    }
    var fileType = $('#lyricFile').val().substring($('#lyricFile').val().lastIndexOf('.')+1);
    if(fileType != 'txt' && fileType != 'lrc'){
        sweetAlertCommon(SweetAlert,'只能上传txt或者lrc格式','warning');
        return;
    }
    $.ajaxFileUpload({
        url:http_url + '/lyric/upload.json',
        type: 'post',
        secureuri: false,           //一般设置为false
        fileElementId: 'lyricFile',      // 上传文件的id、name属性名
        dataType: 'json',           //返回值类型，一般设置为json、application/json
        success: function(data){
            if(data.status != 1)
                return sweetAlertCommon(SweetAlert,res.msg,'error');
            content.lyric = data.data;
            console.log(data);
            $scope.$apply();
        },
        error: function(data, status, e){
            console.log(e);
        }
    });
}
/**
 * 查看以及审核界面编辑按钮
 * @param type
 * @param id
 */
function dataEdit(type,id,$timeout,$rootScope,display){
    //ajaxJson(edit_auth + '/'+type+'/' + id + '.json','post','json',null,function(res){
    //    if(res.status == 1){
    //        var lastUrl = document.location.href.substring(0, document.location.href.indexOf('lastPage') -1);
    //        window.open('/mls/resources/pages/top/index.html#/artistEdit?artistId=' + $stateParams.artistId + '&auth=' + res.data.auth + '&lastPage=' + encodeURIComponent(lastUrl), '_blank');
    //    } else {
    //        alertTipCommon($timeout,$rootScope,res.msg,display);
    //    }
    //},false);
    var url = edit_auth + '/'+type+'/' + id + '.json';
    jQuery.ajax({
        url: url ,
        type: "post",
        async: false,
        timeout: 15000,
        dataType: "jsonp",  // not "json" we'll parse
        jsonp: CALLBACK,
        contentType: "application/jsonp; charset=utf-8",
        success: function(res) {
            if(res.status == 1){
                var lastUrl = document.location.href.substring(0, document.location.href.indexOf('lastPage') -1);
                //var lastUrl = document.location.href;
                window.open('/mls/resources/pages/top/index.html#/artistEdit?artistId=' + $stateParams.artistId + '&auth=' + res.data.auth + '&lastPage=' + encodeURIComponent(lastUrl), '_blank');
            } else {
                alertTipCommon($timeout,$rootScope,res.msg,display);
            }
        },
        error: function (res) {
            alertTipCommon($timeout,$rootScope,res.msg,display);
        }
    });
}
/**
 * 素材界面获取审核意见数据列表
 * @param type  素材类型，song,album,artist
 * @param $http
 * @param $scope
 * @param $cookies
 * @param $stateParams
 */
function getExamineList(type,pageNo,$http,$scope,$stateParams,SweetAlert){
    var url = http_audit+'opinion/'+type+'/' + $stateParams[type+'Id'] + '.json?' + CALLBACK+'&pageNo='+ pageNo;
    $http.jsonp(url).success(function(res2){
        if(res2.data.list.length < 1 && pageNo > 1){
            sweetAlertCommon(SweetAlert,'暂无更多数据','warning');
            return;
        }
        $scope.auditDatas = res2.data.list;
        //if(res2.status == 1){
        //    getGitUsers($http, $cookies, $scope, 1, function(){
        //        $scope.auditDatas = res2.data.list;
        //        for(var i in $scope.auditDatas){
        //            for(var p in $scope.gitUsers){
        //                if($scope.auditDatas[i].userId == $scope.gitUsers[p].uId){
        //                    $scope.auditDatas[i].userName = $scope.gitUsers[p].name;
        //                    //$scope.auditDatas[i].optTime = format($scope.auditDatas[i].optTime,'yyyy-MM-dd');
        //                }
        //            }
        //        }
        //    });
        //}
    });
}
/**
 * 素材界面获取关联标签数据
 * @param type
 * @param $http
 * @param $scope
 * @param $stateParams
 */
function getMaterialTags(type,$http,$scope,$stateParams){
    var url = tag_edit_new_query + type + '/' + $stateParams[type+'Id'] + '.json?' + CALLBACK;
    $http.jsonp(url).success(function(res3){
        $scope.artistTags = res3.data.tags;
        $scope.tagExt = res3.data.tagExt;
        //if(!checkEmpty($scope.tagExt)){
        //    if(!checkEmpty($scope.tagExt.ishot)){
        //        $scope.tagExt.ishot = translateTimeToDate($scope.tagExt.ishot);
        //    }
        //    if(!checkEmpty($scope.tagExt.isnew)){
        //        $scope.tagExt.isnew = translateTimeToDate($scope.tagExt.isnew);
        //    }
        //}
        $scope.relTags = res3.data;
        for(var i=0;i < res3.data.tags.length; i++){    //设置标签，将获取的关联标签赋值给打标签操作
            var tag = {};
            tag.type = res3.data.tags[i].type;
            tag.tagId = res3.data.tags[i].tagId;
            $scope.taggingData.tags.push(tag);
        }
    });
}
/**
 * 获取当前数据的子数据列表
 * @param type      当前数据类型 song,album,artist
 * @param sub       当前数据的子类型，eg:album的子类型-->song
 * @param id        当前数据id
 * @param $http
 * @param $scope
 */
function getDataSubs(type,sub,id,$http,$scope){
    var url = http_url + '/subs/'+type+'/'+id+'/'+sub+'.json?'+CALLBACK;
    $http.jsonp(url).success(function(res){
        $scope.subDatas = res.data.list;
    })
}
/**
 * 素材界面通用审核确认
 * @param type      素材类型，song,album,artist
 * @param examineResult     审核结果，通过，不通过
 * @param examineSuggest    审核意见
 * @param $http
 * @param $stateParams
 * @param $timeout
 * @param $rootScope
 * @param display
 */
function examineCommon(type,examineResult,examineSuggest,$http,$stateParams,SweetAlert){
    var rtp = type;
    if(type == 'songTag'){
        rtp = 'song';
    };
    if($stateParams.taskId == undefined){
        return sweetAlertCommon(SweetAlert,'没有工单ID','warning');
    }
    if(examineResult == undefined){
        return sweetAlertCommon(SweetAlert,'请选通过或者不通过','warning');
    }
    if(examineSuggest == undefined){
        examineSuggest = '';
    }
    var url = http_audit + type + '/' + $stateParams.taskId + '.json?' + CALLBACK + '&rid=' + $stateParams[rtp+'Id'] + '&status=' + examineResult + '&opinion=' + examineSuggest;
    $http.jsonp(url).success(function(res){
        // sweetAlertCommon(SweetAlert,res.msg,'success');
        if(res.status == 1){
            pausePlay();
            if(!checkEmpty($stateParams.lastPage)) window.open(returnLastPage($stateParams.lastPage), '_self');
            else history.back();
        }else {
            sweetAlertCommon(SweetAlert,res.msg,'error');
        }
    }).error(function () {
        sweetAlertCommon(SweetAlert,'请求审核接口异常','warning');
    });
}
/**
 * 素材界面通用抽查确认
 * @param type      素材类型，song,album,artist
 * @param examineResult     审核结果，通过，不通过
 * @param examineSuggest    审核意见
 * @param $http
 * @param $stateParams
 * @param $timeout
 * @param $rootScope
 * @param display
 */
function checkCommon(type,ckResult,ckSuggest,ckTagError,$http,$stateParams,SweetAlert){
    if(ckResult == undefined) return sweetAlertCommon(SweetAlert,'没有选择抽查结果','warning');
    if($stateParams.taskId == undefined) return sweetAlertCommon(SweetAlert,'没有工单ID','warning');
    var ckTag = [];
    for(var i = 1; i <= 5; i++){
        if(ckTagError["tag" + i]){
            ckTag.push(i);
        }
    }
    //if(ckTag.length == 0){
    //    sweetAlertCommon(SweetAlert,'没有选择错误分类','warning');
    //    return;
    //}
    if(ckSuggest == undefined){
        ckSuggest = '';
    }
    var data = {};
    data.type = type;
    data.taskId = $stateParams.taskId;
    data.rid = (type == 'songTag') ? $stateParams['songId'] : $stateParams[type+'Id']; //标签抽查单独特殊处理
    data.result = ckResult;
    data.opinion = ckSuggest;
    data.tagIds = stringToArray(ckTag);
    var postSet = new PostSetup(http_check + 'save.json', 'data=' + encodeURIComponent(JSON.stringify(data)));
    $http(postSet).success(function (res) {
        if(res.status == 1){
            pausePlay();
            // sweetAlertCommon(SweetAlert,res.msg,'success');
            if(!checkEmpty($stateParams.lastPage)) window.open(returnLastPage($stateParams.lastPage), '_self');
            else history.back();
        }else{
            sweetAlertCommon(SweetAlert, res.msg, 'error');
        }
    }).error(function () {
        sweetAlertCommon(SweetAlert, '抽查接口请求异常', 'warning');
    })

}
/**
 * 获取素材界面url地址
 * @param data  对象数据
 * @param type  数据类型
 * @returns {string}
 */
function getOpenUrl(data,type){
    return '/mls/resources/pages/top/index.html#/'+type+'Info?'+type+'Id=' + data[type+'Id'] + '&lastPage={"url":"' + encodeURIComponent(document.location.href)+'"}';
}
/**
 * 解锁编辑和审核状态
 * @param type  数据类型
 * @param id    数据id
 * @param $http
 * @param $stateParams
 * @param $timeout
 * @param $rootScope
 * @param display
 */
function unLock(type,id,$http,$stateParams,SweetAlert){
    var url = returnLastPage($stateParams.lastPage);
    if(checkEmpty($stateParams[type+'Id'])){    //如果是新增界面就直接返回
        window.open(url, '_self');
        return;
    }
    $http.jsonp(http_url+'/edit/rollback/'+type+'/'+id+'.json?'+CALLBACK).success(function(res){
        if(res.status == 1){
            window.open(url, '_self');
        }else{
            sweetAlertCommon(SweetAlert,res.msg,'error');
        }
    }).error(function(res){
        sweetAlertCommon(SweetAlert,'请求异常','warning');
    });
}
/**
 * 向素材添加关联数据，eg:艺人的相似艺人，专辑的歌手，歌曲的歌手等
 * @param data      需要的数据信息
 * @param arr       需要往里面添加数据的数组名
 */
function addRelationData(data,arr,type){
    if(arr == undefined){
        arr = [];
    }
    var material = new Object();
    material[type+'Id'] = data[type+'Id'];
    material[type+'Name'] = data[type+'Name'];
    var flag = -1;
    arr.forEach(function (val) { //已经存在的数据不能重复添加
        if(val[type+'Id'] == material[type+'Id']) return flag = 1;
    });
    if(flag == 1) return console.log('数据已存在');
    arr.push(material);
}
/**
 * 向素材添加唯一的对象数据 eg:歌曲的首张专辑
 * @param data
 * @param obj
 * @param type
 */
function addOnlyData(data,obj,type,property){
    var material = new Object();
    material[type+'Id'] = data[type+'Id'];
    material[type+'Name'] = data[type+'Name'];
    obj[property] = material;
    obj[property+'Id'] = data[type+'Id'];
}
/**
 * 获取素材界面打标签的标签列表
 * @param type  类型，song 3,artist 1,album 2
 * @param $scope
 * @param $http
 */
function getTaggingTags(type,$scope,$http){
    $http.get(tag_tree_url+'getArtisteByClassificationAndTag?'+'type='+type).success(function(res){
        $scope.areaList = res.areaList;     //地域
        $scope.eraList = res.eraList;       //年代
        $scope.mainStylesList = res.mainStylesList;     //主风格
        $scope.occupationList = res.occupationList;     //职业
        $scope.secondaryStyleList = res.secondaryStyleList;     //次风格
        $scope.skilledInMusicList = res.skilledInMusicList;     //乐器
        $scope.timbreList = res.timbreList;     //音色
        $scope.languageList = res.languageList;     //语言
        $scope.emotionList = res.emotionList;       //情感
        $scope.sceneList = res.sceneList;       //场景
        $scope.subjectList = res.subjectList;   //主题
        if($scope.subjectList) {
            $scope.subjectList.tagList.forEach(function (val) { //处理二级子标签
                if(val.tagLevel == 1){
                    val.children = [];
                    $scope.subjectList.tagList.forEach(function (val2) {
                        if(val2.tagLevel == 2){
                            if(val.tagId == val2.parentId){
                                val.isParent = true;
                                val.children.push(val2);
                            }
                        }
                    });
                }
            });
            $scope.subjectList.tagList.forEach(function (val) { //处理三级子标签
                if(val.tagLevel == 2){
                    val.children = [];
                    $scope.subjectList.tagList.forEach(function (val2) {
                        if(val2.tagLevel == 3){
                            if(val.tagId == val2.parentId){
                                val.isParent = true;
                                val.children.push(val2);
                            }
                        }
                    });
                }
            });
        }
        console.log($scope.subjectList);
    });
}
/**
 * 打标签后设置标签参数对象（操作逻辑）
 * @param t     所需标签值对象
 * @param type      标签类型
 * @param $scope
 */
function setTaggingData(t,type,$scope){
    t.type = type;
    var _t = cloneOneObject(t);
    for(var i in $scope.artistTags){    //相同标签不能重复打
        if(type == 14 || type == 11){   //如果是特殊的标签只能打一个的就替换原有标签
            if($scope.artistTags[i].type == type){
                $scope.artistTags[i].tagId = _t.tagId;
                $scope.artistTags[i].tagName = _t.tagName;
            }
        }else if($scope.artistTags[i].tagId == t.tagId){
            console.log('标签已存在');
            return;
        }
    }
    // t.type = type;
    if($scope.artistTags == undefined){
        $scope.artistTags = [];
    }
    if(type == 14 || type == 11){   //对于单个标签替换处理
        var flag = true;
        for(var i in $scope.artistTags){
            if($scope.artistTags[i].type == type){
                $scope.artistTags[i].tagId = _t.tagId;
                $scope.artistTags[i].tagName = _t.tagName;
                flag = false;
            }
        }
        if(flag)
            $scope.artistTags.push(_t);
    }else{
        $scope.artistTags.push(_t);  //打标签时往标签对象里面添加数据使得页面同步显示
    }

    // var tag = {};
    // tag.type = type;
    // tag.tagId = t.tagId;
    if(type == 14 || type == 11){   //如果类型等于14或者11，标签只能替换，打一次，其他可以打多个
        for(var i=0;i<$scope.taggingData.tags.length;i++ ){
            if($scope.taggingData.tags[i].type == type){
                $scope.taggingData.tags[i].tagId = _t.tagId;
                console.log($scope.taggingData);
                return;
            }
        }
    }
    $scope.taggingData.tags.push(_t);
}
/**
 * 获取子风格和其他子风格
 * @param tp        专辑类型
 * @param property      专辑对应的属性
 */
function getCStyle(tp,property,$scope,$http){
    var ids = [];
    var tps = tp.split(',');
    for(var i in $scope.taggingData.tags){
        for(var j in tps){
            if($scope.taggingData.tags[i].type == tps[j]){ //只获取主风格的子风格
                ids.push($scope.taggingData.tags[i].tagId);
            }
        }

    }
    if(ids.length > 0){
        $http.get(tag_tree_url+'getArtisteBySonStyleListAndTag.do?'+'data='+ids.join(',')).success(function(res){
            $scope[property] = res[property];
            console.log($scope[property]);
        })
    }
}
/**
 * 提交按钮提交数据
 * @param type      数据类型
 * @param $scope
 * @param $http
 * @param $stateParams
 * @param $filter
 * @param $timeout
 * @param $rootScope
 * @param display
 */
function submit(type,$scope,$http,$stateParams,$filter,SweetAlert,preCatalogId,CatalogService){
    if($scope.data.imgUrl != undefined){
        if($scope.data.imgUrl.indexOf(img_r_url) != -1){
            // $scope.data.imgUrl = $scope.data.imgUrl.substring(31,$scope.data.imgUrl.length);
            $scope.data.imgUrl = $scope.data.imgUrl.replace(img_r_url,'');
        }
    }
    var data = deleteProperty(iteratorData($scope.data,$filter),'imgs');   //遍历数据处理特殊字段
    data.auth = $stateParams.auth;
    //data.manualScore = getRatingStars();    //设置评分
    var submitUrl = '';
    data.tags = $scope.taggingData.tags;
    data.tagExt = $scope.taggingData.tagExt;
    if(!checkEmpty($stateParams.taskId)){
        data.taskId = $stateParams.taskId;
    }
    submitUrl = save_url + type +'.json';
    //数据标签提交
    // $http.jsonp(tag_edi_new_update + type + '.json?'+CALLBACK+'&data='+JSON.stringify($scope.taggingData)).success(function(res){
    //     if(res.status != 1){
    //         sweetAlertCommon(SweetAlert,'打标签失败','error');
    //     }
    // });
    //var submitUrl = 'http://192.168.2.203:17080/update/' + type +'.json';
    //数据对象属性提交
    $.post(submitUrl,'data='+encodeURIComponent(angular.toJson(data))).success(function(res){
        if(res.status == 1){
            if(preCatalogId) var _promise = CatalogService.service.createCatalogPre(preCatalogId, res.data);
            if(_promise) _promise.then(function (res) {
                if(res.status != 1) return sweetAlertCommon(SweetAlert, '预编目创建失败', 'warning');
                else _finalJump();
            });
            else _finalJump();
            function _finalJump() {
                // sweetAlertCommon(SweetAlert,res.msg,'success');
                pausePlay();
                if(!checkEmpty($stateParams.lastPage)) window.open(returnLastPage($stateParams.lastPage), '_self');
                else history.back();
            }
        }else{
            sweetAlertCommon(SweetAlert,res.msg,'error');
        }
    });
}
/**
 * 去掉已打标签
 * @param t
 * @param $scope
 */
function removeTagging(t,$scope){
    for(var i in $scope.taggingData.tags){
        if($scope.taggingData.tags[i].tagId == t.tagId){
            $scope.taggingData.tags.del(i);
            $scope.artistTags.del(i);
        }
    }
}
/**
 * 素材界面编辑按钮
 * @param type      素材类型
 * @param id        素材id
 * @param $timeout
 * @param $rootScope
 * @param display
 * @param $stateParams
 */
function edit(type,id,$timeout,$rootScope,display,$stateParams){
    var url = edit_auth + '/'+type+'/' + id + '.json';
    jQuery.ajax({
        url: url ,
        type: "post",
        async: false,
        timeout: 15000,
        dataType: "jsonp",  // not "json" we'll parse
        jsonp: CALLBACK,
        contentType: "application/jsonp; charset=utf-8",
        success: function(res) {
            if(res.status == 1){
                //var lastUrl = document.location.href.substring(0, document.location.href.indexOf('lastPage') -1);
                var lastUrl = document.location.href;
                window.open('/mls/resources/pages/top/index.html#/'+type+'Edit?'+type+'Id=' + $stateParams[type+'Id'] + '&auth=' + res.data.auth + '&lastPage={"url":"' + encodeURIComponent(lastUrl)+'"}', '_self');
            } else {
                alertTipCommon($timeout,$rootScope,res.msg,display);
            }
        },
        error: function (res) {
            alertTipCommon($timeout,$rootScope,res.msg,display);
        }
    });
}
function toEdit(type,id,$stateParams,$state,SweetAlert){
    var url = edit_auth + '/'+type+'/' + id + '.json';
    $.ajax({
        url: url ,
        type: "post",
        async: false,
        dataType: "jsonp",  // not "json" we'll parse
        success: function(res) {
            if(res.status == 1){
                var param = {};
                param[type+'Id'] = $stateParams[type+'Id'];
                param['auth'] = res.data.auth;
                param['lastPage'] = $stateParams.lastPage;
                $state.go(type+'Edit',param);
            } else {
                sweetAlertCommon(SweetAlert,res.msg,'warning');
                //alertTipCommon($timeout,$rootScope,res.msg,display);
            }
        },
        error: function (res) {
            sweetAlertCommon(SweetAlert,'请求异常','warning');
        }
    });
}
/**
 * 图片下一张查看
 * @param img
 * @param imgs
 */
function selectImgNext(img,imgs){
    var index = imgs.indexOf(img);
    if(index == (imgs.length -1)){
        imgs[0].selected = true;
        imgs[index].selected = false;
    }else{
        imgs[index+1].selected = true;
        imgs[index].selected = false;
    }
}
/**
 * 图片上一张查看
 * @param img
 * @param imgs
 */
function selectImgPre(img,imgs){
    var index = imgs.indexOf(img);
    if(index == 0){
        imgs[imgs.length -1].selected = true;
        imgs[index].selected = false;
    }else{
        imgs[index-1].selected = true;
        imgs[index].selected = false;
    }
}
/**
 * 新增素材数据初始化调用
 * @param type      新增素材类型
 * @param $scope
 * @param $stateParams
 */
function addNewDataPage(type,$scope,$stateParams){
    if(checkEmpty($stateParams[type+'Id'])){   //如果数据id为空
        $scope.data = {};       //初始化数据对象
        if(type == 'album') $scope.data.composers = [],$scope.data.cantors = [],$scope.data.performers = [],$scope.data.artists = [];
        if(checkEmpty($stateParams.tp)){
            $scope.data.type = 1;
        }else{
            $scope.data.type = $stateParams.tp;
        }
    }
}
/**
 * 获取评分数据
 * @returns {*}
 */
function getRatingStars(){
    var stars = $('#precision-hint').val();
    if(checkEmpty(stars))
        return '';
    else
        return stars;
}
function getBirth($scope){
    if(checkEmpty($scope.data.birth)){
        return;
    }
    if($scope.data.birth.indexOf('年') == -1){
        return;
    }
    var reg = /[^\[]*\年(.*)\月[^\]]*/;
    var reg2 = /[^\[]*\月(.*)\日[^\]]*/;
    var month = $scope.data.birth.replace(reg,'$1');
    var day = $scope.data.birth.replace(reg2,'$1');
    var year = $scope.data.birth.substring(0,4);
    if(month.length != 2)
        month = '0'+month;
    if(day.length != 2)
        day = '0' + day;
    $scope.data.birth = year + '-' + month + '-' + day;
}
/**
 * 列表页面标签搜索
 * @param tag   所选标签
 * @param artistTagTree     所有标签
 * @param type  素材类型
 * @param $stateParams
 * @param $state
 */
function tagClick(tag,artistTagTree,type,$stateParams,$state){
    for(var p in $stateParams){
        if(p != 'tagIds' && p != 'id'){
            $stateParams[p] = '';
        }
    }
    if($stateParams.tagIds == undefined){
        $stateParams.tagIds = tag.id;
        $state.go(type,$stateParams);
    } else {
        //下面要判断新来的tag的一级类别，如果一级类别相同，那么把原有标签替换掉
        //如果和原有的所有标签一级类别都不重复，也就是新类别的标签，那么在原有的标签上面新增
        var parentRepeatTag = judgeParentTagRepeat(tag, $stateParams.tagIds.split(','), artistTagTree);
        if(parentRepeatTag == undefined){
            $stateParams.tagIds = $stateParams.tagIds + ',' + tag.id;
            $state.go(type,$stateParams);
        } else {
            var ids = $stateParams.tagIds.split(',');
            ids[ids.indexOf(parentRepeatTag.id)] = tag.id;
            $stateParams.tagIds = ids.join(',');
            $state.go(type,$stateParams);
        }
    }
}
function openNewTab(type,data,op,$state){
    var date = new Date();
    var time = date.getTime();
    localStorage.setItem(time,document.location.href);
    var param = {};
    param[type+'Id'] = data[type+'Id'];
    param['lastPage'] = time;
    var url = $state.href(type+op,param);
    window.open(url, '_blank');
}
function infoNewTabState(type,id,op,$state){
    var date = new Date();
    var time = date.getTime();
    localStorage.setItem(time,document.location.href);
    var param = {};
    param[type+'Id'] = id;
    param['lastPage'] = time;
    var url = $state.href(type+op,param);
    window.open(url, '_self');
}
/**
 * 返回lastPage的时间戳
 * @returns {number}
 */
function returnLastPageTime(){
    var date = new Date();
    var time = date.getTime();
    sessionStorage.setItem(time,document.location.href);
    return time;
}
function returnLastPage(time){
    return sessionStorage.getItem(time);
}
/**
 * 素材界面基础请求
 * @param type  素材类型
 * @param $scope
 * @param $http
 * @param $sce
 * @param $stateParams
 * @param $cookies
 * @param flag
 */
function basicRequest(type,catalogs,$scope,$http,$sce,$stateParams,$cookies,flag){
    $scope.catalogs = catalogs;
    $scope.birth = '9999-19-39';
    $scope.taggingData = {},$scope.taggingData.rid=$stateParams[type+'Id'],$scope.taggingData.tags=[];     //更新标签参数
    $scope.tagExt = {};
    if(!checkEmpty($stateParams[type+'Id'])){
        getDataInfo(type,$http,$scope,$sce,$stateParams,flag);    //获取专辑信息
        getExamineList(type,1,$http,$scope,$stateParams);     //获取审核意见列表
        getOpRecord(type,$stateParams[type+'Id'],1,1,$http,$scope);     //获取操作记录
        getMaterialTags(type,$http,$scope,$stateParams);     //获取关联标签
        getCheckRecod(type,$stateParams[type+'Id'],1,$http,$scope);     //获取抽查记录
        if(type == 'album')
            getDataSubs(type,'song',$stateParams[type+'Id'],$http,$scope);      //获取专辑下的歌曲列表
    }
}
/**
 * 对象数组中添加佚名
 * @param arr
 */
function addUnknown(arr,type,id,name){
    var material = {};
    material[type+'Id'] = id;
    material[type+'Name'] = name;
    for(var i in arr){      //已经存在的数据不能重复添加
        if(arr[i][type+'Id'] == material[type+'Id']){
            console.log('数据已存在');
            return;
        }
    }
    arr.push(material);
}
function editJumpNew(type,data,SweetAlert,$state,flag, $stateParams){  //跳转编辑页面
    if(flag == null || flag == undefined){
        flag = '_blank';
    }
    var url = http_url + '/edit/' + type + '/'+ data[type + 'Id'] + '.json';
    $.ajax({
        url: url ,
        type: "post",
        async: false,
        dataType: "jsonp",  // not "json" we'll parse
        jsonp: CALLBACK,
        success: function(res) {
            if(res.status != 1){
                sweetAlertCommon(SweetAlert,res.msg,'error');
                return;
            } else {
                var param = {};
                param[type+'Id'] = data[type + 'Id'];
                param['auth'] = res.data.auth;
                param['lastPage'] = $stateParams.lastPage ? $stateParams.lastPage : returnLastPageTime();
                if(data.taskId != undefined){
                    param['taskId'] = data.taskId;
                }
                var openUrl =  $state.href(type+'Edit',param);
                window.open(openUrl,flag);
            }
        },
        error: function (res) {
            sweetAlertCommon(SweetAlert,'请求异常','error');
        }
    });
}
/**
 * 获取操作记录
 * @param type 素材类型
 * @param id    素材id
 * @param opType    操作类型
 * @param $http
 */
function getOpRecord(type,id,opType,pageNo,$http,$scope,SweetAlert){
    $http.jsonp(operating_history+'/'+type+'/'+id+'.json?optType='+opType+'&'+CALLBACK+'&pageSize=20&pageNo='+pageNo).success(function(res){
        if(res.data.list.length < 1 && pageNo > 1){
            sweetAlertCommon(SweetAlert,'暂无更多数据','warning');
            return;
        }
        $scope.opDatas = res.data.list;
    })
}
/**
 * 获取抽查记录
 * @param type
 * @param rid
 * @param pageNo
 * @param $http
 */
function getCheckRecod(type,rid,pageNo,$http,$scope,SweetAlert){
    var data = {
        'type':type,	//数据类型，artist,album,song
        'rid':rid,			//关联数据id
        'pageNo':pageNo,			//默认为1
        'pageSize':20		//默认为20
    };
    $http.jsonp(CHECK_RECORD+'?data='+JSON.stringify(data)+'&'+CALLBACK).success(function(res){
        if(res.data.pageNo != pageNo && pageNo > 1){
            sweetAlertCommon(SweetAlert,'暂无更多数据','warning');
            return;
        }
        $scope.checkRecords = res.data.list;
        console.log(res);
    })
}
var loadMore = {        //操作记录加载更多数据逻辑
    'pageNo': function($scope){
        return $scope.pageNo = checkEmpty($scope.pageNo) ? 2 : ($scope.pageNo + 1);
    },
    'operate': function(type,$scope,$stateParams,$http,SweetAlert){
        getOpRecord(type,$stateParams[type+'Id'],1,loadMore.pageNo($scope),$http,$scope,SweetAlert);
    },
    'examine': function (type,$scope,$stateParams,$http,SweetAlert) {
        getExamineList(type,loadMore.pageNo($scope),$http,$scope,$stateParams,SweetAlert);
    },
    'check': function(type,$scope,$stateParams,$http,SweetAlert){
        getCheckRecod(type,$stateParams[type+'Id'],loadMore.pageNo($scope),$http,$scope,SweetAlert);
    }
};
function loadMoreRecord(type,$scope,$stateParams,$http,SweetAlert){
    $scope.loadMoreOperate = function(){
        loadMore.operate(type,$scope,$stateParams,$http,SweetAlert);
    };
    $scope.loadMoreExamine = function(){
        loadMore.examine(type,$scope,$stateParams,$http,SweetAlert);
    };
    $scope.loadMoreCheck = function(){
        loadMore.check(type,$scope,$stateParams,$http,SweetAlert);
    };
};
/**
 * 新增素材数据,当前单页面
 * @param type  素材类型
 * @param $state
 * @param $stateParams
 */
function addNewMaterial(type,$state,$stateParams){
    var param = {};param[type+'Id']='';param['lastPage']=returnLastPageTime();param['auth']=$stateParams.auth;
    var url = $state.href(type+'Edit', param);
    window.open(url,'_blank');
}
function addNewMaterialFromTop(type,$state){
    var param = {};
    param[type+'Id']  = '';
    param['lastPage'] = returnLastPageTime();
    var url = $state.href(type+'Edit',param);
    window.open(url,'_blank');
}
/**
 * 转换时间戳为日期
 * @param date
 * @returns {string}
 */
function fixDate(date){
    if(!checkEmpty(date)){
        if(date.length == 4){
            var month = date.substring(0,2);
            var day = date.substring(2,date.length);
            return date = month + '-' + day;
        }else{
            var year = date.substring(0,4);
            var month = date.substring(4,6);
            var day = date.substring(6,date.length);
            return date = year+ '-'+ month + '-' + day;
        }
    }
}
/**
 * 监听评分变化
 * @param s
 * @param property
 */
function watchScore(s,property){
    if(!checkEmpty(s[property])){
        var score = parseInt(s[property]);
        if(score>50){
            s[property] = 5+ '.' +0 ;
        }else{
            s[property] = s[property].substring(0,1) + '.' + s[property].substring(1);
        }
        console.log(s[property]);
    }
}
/**
 * 判断某个标签和一串标签ID是否父标签相同,如果不相同,返回undefined，如果相同，返回相同标签
 * @param tag   查询的标签对象
 * @param tagIds    已查询的标签id集合
 * @param tnList    标签搜索的所有标签集合
 * @returns {*}
 */
function judgeParentTagRepeat(tag, tagIds, tnList) {
    //tag是自己封装的，只有id,name,pId属性
    //tnList是接口来的tag集合，属性较多，id,name,parentId等
    for (var i = 0; i < tagIds.length; i++) {
        var tempTag = getTagById(tagIds[i], tnList);
        if (tag.pId == tempTag.parentId) {
            return tempTag;
        }
    }
    return undefined;
}
/**
 * 通过标签id获取标签对象
 * @param tagId
 * @param tags
 * @returns {*}
 */
function getTagById(tagId, tags) {
    for (var i = 0; i < tags.length; i++) {
        if (tags[i].id == tagId) {
            return tags[i];
        }
        for (var j = 0; j < tags[i].children.length; j++) {
            if (tags[i].children[j].id == tagId) {
                return tags[i].children[j];
            }
        }
    }
    return undefined;
}
/**
 * 获取标签树数据
 * @param tp
 * @param $scope
 * @param $stateParams
 * @param $http
 */
function getTagList(tp,$scope,$stateParams,$http,$cookies,SweetAlert,flag){
    var songTagTree = [];
    var songFilterTagTree = [];
    var tag_url = tag_tree_url + 'getTagsByMaterialAndUser.do?userId=' + JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid + '&materialType='+tp+'&maxLevel=3';
    $http.get(tag_url).success(function(res){
        //console.log(res);
        if(res.message == 'success'){
            //循环标签树设置祖先节点id
            for(var i = 0; i < res.tnList.length; i++){
                for(var j = 0; j < res.tnList[i].children.  length; j++){
                    res.tnList[i].children[j].ancestorId = res.tnList[i].id;
                    res.tnList[i].children[j].ancestorName = res.tnList[i].name;
                }
            }
            //把标签树保存下来供其它地方根据ID获取标签
            songTagTree = res.tnList;
            localStorage.setItem('tagTree'+tp,JSON.stringify(songTagTree));
            $scope.allTags = [];
            songFilterTagTree.length = 0;
            for(var n = 0; n < songTagTree.length; n++ ){
                $scope.allTags.push(songTagTree[n]);
                for(var m = 0; m < songTagTree[n].children.length; m++){
                    songFilterTagTree.push(songTagTree[n].children[m]);
                }
                $scope.allTags = $scope.allTags.concat(songFilterTagTree);
            }
            $scope.songFilterTagTree = songFilterTagTree;
            if(checkEmpty(flag)){
                songFillSearchCondition($stateParams, $scope, $http, $cookies, songTagTree);
            }
            //下面的代码是拼凑歌曲页面顶部的标签树的结构
            var tags = [];
            for(var i=0; i < songTagTree.length; i++){
                var nodeList = [];
                var tag_all = getAllNode(songTagTree[i],nodeList);
                var tag = tag_all[tag_all.length -1];
                tag.children = [];
                for(var j = 0; j < tag_all.length - 1;j++){
                    tag.children.push(tag_all[j]);
                }
                tags.push(tag);
            }
            //console.log(tags);
            $scope.tags_title = tags;
        } else {
            console.log(res);
            sweetAlertCommon(SweetAlert,'标签树请求异常','warning','返回值:'+JSON.stringify(res));
        }
        //点击顶部标签展开下级的标签
        if($stateParams.id != undefined){
            for(var i = 0; i < $scope.tags_title.length; i++){
                if($scope.tags_title[i].id == $stateParams.id){
                    $scope.tags_list = $scope.tags_title[i].children;
                }
            }
        }
    }).error(function(res){
        //alert('网络错误，无法加载标签');
        sweetAlertCommon(SweetAlert,'标签树请求异常','warning');
    });
}
/**
 * 风格标签搜索处理方式
 * @param tag
 * @param $scope
 * @param addOrRemove
 */
function styleTagSearchWay(tag,$scope,addOrRemove) {    //选择标签addorremve为true否则为false
    if(tag.ancestorName == '风格' && tag.tagLevel != 2 && tag.parentId != 1000129663){
        if(checkEmpty($scope.form)) $scope.form = {};
        if(addOrRemove){
            return $scope.form.style = 1;
        }else {
            return $scope.form.style = undefined;
        }
    }
    // for(var i = 0; i < $scope.allTags.length; i++){
    //     if(tag.pId == $scope.allTags[i].id){
    //         var ancestor = $scope.allTags[i];
    //         if(ancestor.tagLevel == 0 && (ancestor.name == '风格' || ancestor.name == '有声内容'
    //             || ancestor.name == '通用流派' || ancestor.name == '中国特色' || ancestor.name == '世界音乐')) {
    //             if(checkEmpty($scope.form)) $scope.form = {};
    //             if(addOrRemove){
    //                 return $scope.form.style = 1;
    //             }else {
    //                 return $scope.form.style = undefined;
    //             }
    //         }
    //     }
    // }
}
/**
 * 选择标签展示子标签
 * @param $scope
 */
function selectTagSearch(tag,$scope){
    if(isPropertyEmpty($scope.form.tagBeans)) $scope.form.tagBeans = [];

    var flag = styleTagSearchWay(tag,$scope,true);
    if($scope.form.tagBeans != undefined && $scope.form.tagBeans.length != 0){
        for(var i = 0; i < $scope.form.tagBeans.length; i++){
            if($scope.form.tagBeans[i].id == tag.id){
                return;
            }
        }
    }

    var o = {};o = tag;o.tagId = tag.id;o.pId = tag.parentId;
    if(!checkEmpty(flag)) o.type = $scope.form.style;

    //然后判断父标签是否重复
    //var tagIds = getPropertyFromCheckBox($scope.form.searchTag, 'undefined', undefined, 'id');
    // if($scope.form.searchTag != undefined && $scope.form.searchTag.length != 0){
        //下面要判断新来的tag的一级类别，如果一级类别相同，那么把原有标签替换掉
        //如果和原有的所有标签一级类别都不重复，也就是新类别的标签，那么在原有的标签上面新增
    //     for(var n = 0; n < $scope.form.searchTag.length; n++){
    //         var tempTag = $scope.form.searchTag[n];
    //         if(tag.pId == tempTag.pId){
    //             $scope.form.tagBeans[n] = o;
    //             $scope.form.searchTag[n] = tag;
    //             console.log($scope.form.tagBeans);
    //             return;
    //         }
    //     }
    // }

    if($scope.form.tagBeans != undefined && $scope.form.tagBeans.length != 0){
        //下面要判断新来的tag的一级类别，如果一级类别相同，那么把原有标签替换掉
        //如果和原有的所有标签一级类别都不重复，也就是新类别的标签，那么在原有的标签上面新增
        for(var n = 0; n < $scope.form.tagBeans.length; n++){
            var tempTag = $scope.form.tagBeans[n];
            if(tag.ancestorId == tempTag.ancestorId ){  //对有声内容标签特殊处理
                if(tag.id == 1000129663){
                    if(tempTag.pId != 1000129663) return $scope.form.tagBeans[n] = o;
                    else continue;
                }
                if(tag.parentId == 1000129663){
                    if(tempTag.tagLevel == 2)   return $scope.form.tagBeans[n] = o;
                    else if(tempTag.pId == 1000129663) return $scope.form.tagBeans[n] = o;
                    else continue;
                }
                if(tag.tagLevel != 2 ){
                    if(tempTag.pId != 1000129663 ){
                        return $scope.form.tagBeans[n] = o;
                    }
                }
                if((tag.tagLevel == 2 && tag.tagLevel == tempTag.tagLevel) || (tag.tagLevel == 2 && tempTag.pId == 1000129663)){
                    return $scope.form.tagBeans[n] = o;
                }
            }
        }
    }
    // $scope.form.searchTag.push(tag);
    $scope.form.tagBeans.push(o);
    console.log($scope.form.tagBeans);
}
function selectTagSearchOneTag(tag, $scope){
    // selectTagSearch(tag, $scope);
    $scope.form.tagBeans = [];
    $scope.form.tagBeans.push(tag);
    console.log($scope.form.tagBeans);
}
function judgeTagRepeat(tagBeans, tag){
    if(tagBeans != undefined && tagBeans.length != 0){
        tagBeans.forEach(function (item) {
            if($scope.form.tagBeans[i].id == tag.id){
                return true;
            }
        });
        return false;
        // for(var i = 0; i < tagBeans.length; i++){
        //     if($scope.form.tagBeans[i].id == tag.id){
        //         return;
        //     }
        // }
    }
}
function songSelectSearchTag(tag,$scope) {
    if(checkEmpty($scope.form.searchTag)) $scope.form.searchTag = [];
    //首先判断重复
    if($scope.form.searchTag != undefined && $scope.form.searchTag.length != 0){
        for(var i = 0; i < $scope.form.searchTag.length; i++){
            if($scope.form.searchTag[i].id == tag.id){
                return;
            }
        }
    }
    //然后判断父标签是否重复
    //var tagIds = getPropertyFromCheckBox($scope.form.searchTag, 'undefined', undefined, 'id');
    if($scope.form.searchTag != undefined && $scope.form.searchTag.length != 0){
        //下面要判断新来的tag的一级类别，如果一级类别相同，那么把原有标签替换掉
        //如果和原有的所有标签一级类别都不重复，也就是新类别的标签，那么在原有的标签上面新增
        for(var n = 0; n < $scope.form.searchTag.length; n++){
            var tempTag = $scope.form.searchTag[n];
            if(tag.ancestorId == tempTag.ancestorId){
                $scope.form.searchTag[n] = tag;
                return;
            }
        }
    }
    $scope.form.searchTag.push(tag);
}
//重新抽取素材
function extractedMaterial(id, type, $http, SweetAlert){
    $http.jsonp(http_url + '/extract/' + type + '/' + id + '.json?' + CALLBACK).success(function(res){
        if(res.status == 1){
            sweetAlertCommon(SweetAlert,'抽取成功','success');
        } else {
            sweetAlertCommon(SweetAlert,res.msg,'error');
        }
    }).error(function(res){
        sweetAlertCommon(SweetAlert,'请求异常','warning');
    });
}
//angularjs复选框单选通用方法
function selectOne(data, checkb, checkName){
    if (!checkb) {//选中
        data[checkName] = true;
    } else {
        data[checkName] = false;
    }
}
//angulajs复选框全选通用方法
//all:全部勾选还是全部取消勾选
//datas:需要获取的对象的array集合
//checkName:单条数据判断是否check的属性
//allCheckName所有属性是否选择的属性
function selectAll($scope, datas, checkName, allCheckName) {
    if ($scope[allCheckName] != true) {
        if (allCheckName != undefined && allCheckName != '') {
            $scope[allCheckName] = true;
        }
        for (var i = 0; i < datas.length; i++) {
            var data = datas[i];
            data[checkName] = true;
        }
    } else {
        if (allCheckName != undefined && allCheckName != '') {
            $scope[allCheckName] = false;
        }
        for (var i = 0; i < datas.length; i++) {
            data = datas[i];
            data[checkName] = false;
        }
    }
}
//angularjs复选框获取某个属性通用函数
//datas:需要获取的对象的array集合
//checkName:单个对象用于判断是否check的属性名字
//checkValue:用于判断是否check的属性为此值的时候获取属性
//propertyName:单个对象需要获取的属性名字,不传入就是返回对象集合
//返回一个array
function getPropertyFromCheckBox(datas, checkName, checkValue, propertyName){
    var values = new Array();
    for(var i= 0; i < datas.length; i++){
        var data = datas[i];
        if(data[checkName] == checkValue){
            if(propertyName == undefined){
                values.push(data);
            } else {
                values.push(data[propertyName]);
            }
        }
    }
    return values;
}
/**
 * 统一sweetAlert提示框
 * @param SweetAlert    必传对象
 * @param msg1
 * @param type  提示框类型，success,error,warning ....
 * @param msg2
 */
function sweetAlertCommon(SweetAlert,msg1,type,msg2){
    if(checkEmpty(msg1))
        msg1 = '操作成功';
    if(checkEmpty(type))
        type = 'success';
    if(checkEmpty(msg2))
        msg2 = '点击按钮关闭';
    SweetAlert.swal(new SweetAlertSetup(msg1, msg2, type));
}
/**
 * 提示框回调    
 * @param SweetAlert
 * @param msg1
 * @param type
 * @param msg2
 * @param method
 */
function sweetAlertCall(SweetAlert,msg1,type,msg2,method) {
    if(!msg1) msg1 = '操作成功';
    if(!type) type = 'success';
    if(!msg2) msg2 = '点击按钮关闭';
    SweetAlert.swal({
        title: msg1,
        text: msg2,
        type: type,
        showCancelButton: false ,
        cancelButtonText: '取消',
        // confirmButtonColor: '#DD6B55',
        confirmButtonText: '确认!',
        closeOnConfirm: true,
        closeOnCancel: true
    },  function(isConfirm){
        if(isConfirm && method){
            method();
        }
    });
}
/**
 * 统一sweetAlert确认框
 * @param SweetAlert
 * @param type
 * @param method
 * @param msg1
 * @param msg2
 */
function sweetAlertConfirm(SweetAlert,method,type,msg1,msg2){
    if(checkEmpty(type))
        type = 'warning';
    if(checkEmpty(method))
        method = SweetAlert.swal('Booyah!');
    if(checkEmpty(msg1))
        msg1 = '确定此操作吗?';
    if(checkEmpty(msg2))
        msg2 = '';
    SweetAlert.swal({
        title: msg1,
        text: msg2,
        type: type,
        showCancelButton: true,
        cancelButtonText: '取消',
        confirmButtonColor: '#DD6B55',
        confirmButtonText: '确认!',
        closeOnConfirm: false,
        closeOnCancel: true
    },  function(isConfirm){
        if(isConfirm){
            method();
        }
    });
}
/**
 * 标签搜索--去掉标签
 * @param $scope
 * @param $stateParams
 * @param $state
 * @param url
 */
function tagRemove(tag,$scope,$stateParams,$state,url){
    $scope.form.searchTag.remove(tag);
    if(!checkEmpty($stateParams.tagIds)){
        var tagIds = $stateParams.tagIds.split(',');
        tagIds.splice(tagIds.indexOf(tag.id), 1);
        $state.go(url,{tagIds:tagIds});
    }

}
/**
 * 本地存储上一个state
 * @param $state
 * @returns {number}
 */
function setLastState($state) {
    var state = {name: $state.current.name,params: $state.params};
    var time = new Date().getTime();
    localStorage.setItem(time, JSON.stringify(state));
    return time;
}
/**
 * 检测打标签权限
 * @param BaseService
 * @param id
 * @param blank
 */
function taggingAloneCheck(id, blank, type, taskId, $state, SweetAlert) {
    var url = TAG_EDIT_NEW_CHECK + type + '/' + id + '.json';
    if(taskId) var data = 'taskId=' + taskId;
    $.ajax({
        url: url ,
        type: 'post',
        async: false,
        data: data,
        dataType: 'json',  // not "json" we'll parse
        success: function(res) {
            if(res.status != 1){
                return sweetAlertCommon(SweetAlert,res.msg,'error');
            } else {
                var url = $state.href('material.taggingEdit', {songId: id,lastPage: returnLastPageTime()});
                window.open(url, blank);
            }
        },
        error: function (res) {
            sweetAlertCommon(SweetAlert, '标签权限验证接口请求异常', 'error');
        }
    });
}
function exportCommon(datas, form, $scope, exportUrl, SweetAlert, propertyName, $uibModalInstance) {
    var _data = {};
    if(checkEmpty(datas))
        return sweetAlertCommon(SweetAlert, '暂无数据', 'warning');
    if(checkEmpty($scope.export.type))
        return sweetAlertCommon(SweetAlert, '请选择导出操作类型', 'warning');
    _data = excludeProperties(form,['pageSize','pageNo']);
    switch($scope.export.type){
        case '1':
            var ids = [];
            datas.forEach(function (val) {
                if(propertyName && val.isCheck){
                    ids.push(val[propertyName]);
                }else if(val.isCheck) {
                    ids.push(val['songId']);
                }
            });
            if(ids.length == 0){
                return sweetAlertCommon(SweetAlert, '请选择要导出的数据', 'warning');
            }
            if(propertyName){
                _data.ids = ids;
            }else {
                _data.songIds = ids;
            }
            break;
        case '2':
            if(checkEmpty($scope.export.startNo) || checkEmpty($scope.export.endNo)) return sweetAlertCommon(SweetAlert, '请填写完整的序号起止数目', 'warning');
            _data.startNo = $scope.export.startNo - 1,_data.endNo = $scope.export.endNo - 1;
            break;
        case '3':
            if(checkEmpty($scope.export.pageStart) || checkEmpty($scope.export.pageEnd)) return sweetAlertCommon(SweetAlert, '请填写完整的起止页数', 'warning');
            _data.startNo = ($scope.export.pageStart - 1) * form.pageSize;
            _data.endNo = ($scope.export.pageEnd) * form.pageSize - 1;
            break;
    }
    window.open(exportUrl + '?' + 'data=' + JSON.stringify(_data), '_blank');
    // if($uibModalInstance){
        $uibModalInstance.dismiss('cancel');
    // }
}
/**
 * 跳转到某个state
 * @param stateName
 * @param param
 * @param $state
 */
function goState(stateName, param, $state) {
    $state.go(stateName, param);
}
/**
 * 获取函数的参数字符串名字并且根据名字获取对应的参数对象
 */
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var ARGUMENT_NAMES = /([^\s,]+)/g;
function getParamNames(func) {
    var _fnStr = func.toString().replace(STRIP_COMMENTS, '');
    var _result = _fnStr.slice(_fnStr.indexOf('(')+1, _fnStr.indexOf(')')).match(ARGUMENT_NAMES);
    if(_result === null)
        _result = [];
    return _result;
}
function getParamByName(name, self) {
    var _names = getParamNames(self.constructor);
    var _result;
    _names.forEach(function (val, index) {
        if(name == val) _result = self.arguments[index];
    });
    return _result;
}
// var _self = this;_self.arguments = arguments;
// console.log(getParamByName('SweetAlert', _self));
/**
 * 
 * @param time
 */
function getLastState(time) {
    return JSON.parse(localStorage.getItem(time));
}
/**
 * 特殊裁剪日期，去掉特殊符号
 * @param date
 * @returns {*}
 */
function sliceDate(date){
    if(date){
        if(date.indexOf('_') != -1)   //去掉'_'
            date = date.slice(0, date.indexOf('_') - 1);
        if(date.charAt(date.length - 1) == '-')    //去掉'-'
            date = date.slice(0, date.length - 1);
    }
    return date;
}

Array.prototype.remove = function(val) {//数组删除对应的值
    var index = this.indexOf(val);
    if (index > -1) {
        this.splice(index, 1);
    }
};
Array.prototype.indexOf = function(val) {//数组判断对应的值是否存在
    for (var i = 0; i < this.length; i++) {
        if (this[i] == val) return i;
    }
    return -1;
};
function getAstro(m,d){//获取星座
    return "摩羯水瓶双鱼白羊金牛双子巨蟹狮子处女天秤天蝎人马摩羯".substr(m*2-(d<"102223444433".charAt(m-1)- -19)*2,2);
}
function getpet(year,$filter,$http) { //获取生肖
    var vm = this;
    var toyear = 1997;
    var birthpet="Ox";
    // vm.pets = [];
    // vm.loadPets = function(){
    //     return vm.pets.length ? null : $http.get('server/pets.json').success(function(data) {
    //         vm.pets = data;
    //         vm.showPets(year);
    //     });
    // };
    // vm.showPets = function(year) {
    //     if(year) {
    //         var key = (toyear - year) % 12;
    //         var selected = $filter('filter')(this.pets, {key: key});
    //         return selected.length ? selected[0].value : 'Not pets';
    //     } else {
    //         return "";
    //     }
    // };
    // return vm.loadPets();
    x = (toyear - year) % 12;
    if ((x == 1) || (x == -11)) {
        birthpet="鼠";
    } else if (x == 0) {
        birthpet="牛";
    } else if ((x == 11) || (x == -1)) {
        birthpet="虎";
    } else if ((x == 10) || (x == -2)) {
        birthpet="兔";
    } else if ((x == 9) || (x == -3)) {
        birthpet="龙";
    } else if ((x == 8) || (x == -4)) {
        birthpet="蛇";
    } else if ((x == 7) || (x == -5)) {
        birthpet="马";
    } else if ((x == 6) || (x == -6)) {
        birthpet="羊";
    } else if ((x == 5) || (x == -7)) {
        birthpet="猴";
    } else if ((x == 4) || (x == -8)) {
        birthpet="鸡";
    } else if ((x == 3) || (x == -9)) {
        birthpet="狗";
    } else if ((x == 2) || (x == -10)) {
        birthpet="猪";
    }
    return birthpet;
}
/**
 * Created by YuChunzhuo on 2015/12/8.
 */
angular.module('app.routes').config(albumConfig);
albumConfig.$inject = ['$stateProvider', '$locationProvider', '$urlRouterProvider', 'RouteHelpersProvider'];
function albumConfig($stateProvider, $locationProvider, $urlRouterProvider, helper){
    $stateProvider
        .state('app.album', {//专辑列表页面
            url: '/album?:time&:id&:tagBeans&:category&:pageNo&:pageSize&:albumKeyword&:albumIds&:artistKeyword&:artistId&:karakalStatus&:lastEdit&:lastEditSearch&:accurateArtist&:style&:ckResult&:mscoreMin&:mscoreMax&:hotScoreMin&:hotScoreMax&:status',
            templateUrl: 'app/views/album/album.html',
            controller: ["$scope", "$http", "$stateParams", "permissions", "$timeout", "$rootScope", "display", "$state", "$window", "$cookies", "SweetAlert", function ($scope, $http, $stateParams, permissions, $timeout, $rootScope, display, $state,$window,$cookies,SweetAlert) {
                if(checkEmpty($scope.users)) $scope.users = JSON.parse(localStorage.getItem('users'));
                //界面元素控制下拉框列表
                var _table = JSON.parse(localStorage.getItem('local-albumHtml'));
                $scope.album_html = _table ? _table : [{name:'状态', checked:true},{name:'专辑ID', checked:true},{name: '专辑名称', checked:true},{name: '艺人名', checked:true},{name:'发行时间', checked:true},{name:'语言', checked:true}];
                $scope.storageTableShow = function () {
                    var _localStorage = [];
                    $scope.album_html.forEach(function (val) {
                        _localStorage.push(val);
                    });
                    localStorage.setItem('local-albumHtml', JSON.stringify(_localStorage));
                };

                //初始化界面的albums
                $scope.datas = [];
                $scope.albumTags = [];
                $scope.page = new Object();
                $scope.form = {};
                $scope.form.searchTag = [];
                $scope.form.tagBeans = [];
                getTagList(2,$scope,$stateParams,$http,$cookies,SweetAlert);
                var url = _search_album + '?' + CALLBACK;
                url = materialListFillUrl(url, $stateParams);
                if(url != undefined){
                    $http.jsonp(url).success(function(res){
                        //填充页面数据
                        getMaterialBySearch(res, $http, $scope, 'album');
                        //分页
                    });
                }
                //分页
                var page_url = _search_album + '?' + CALLBACK;
                page_url = materialListFillUrl(page_url, $stateParams, 'count');
                if(page_url != undefined){
                    $http.jsonp(page_url).success(function(res){
                        //分页
                        materialListSeparatePage($scope, res);
                    });
                }
                $scope.submit = function(){
                    var params = $scope.form;
                    if(!isPropertyEmpty(params.searchTag)){
                        var tagIds = '';
                        for(var i = 0; i < params.searchTag.length; i++){
                            tagIds += params.searchTag[i].id + ',';
                        }
                        if(params.searchTag.length != 0){
                            tagIds = tagIds.substr(0, tagIds.length - 1);
                            params.tagIds = tagIds;
                        }
                    }
                    if(!checkEmpty(params.tagBeans))
                        params.tagBeans = angular.toJson(params.tagBeans);
                    params.pageNo = '',params.pageSize = '';
                    params.time = new Date().getTime();
                    $state.go('app.album',params,{reload: false, inherit: false});
                };
                //选择最后编辑人
                $scope.selectLastEdit = function(user){
                    $scope.form.lastEdit = user.uId;
                };
                //重置搜索条件
                $scope.reset = function(){
                    $scope.form = {};
                    $scope.form.searchTag = [];
                };
                //选择标签时候选择顶部标签
                $scope.selectMainTag = function(tag){
                    $scope.tag_list = tag.children;
                };
                $scope.selectSearchTag = function(tag){
                    selectTagSearch(tag,$scope);
                };
                //全文搜索
                $scope.getSearchResult = function(value){
                    //console.log(value);
                    return $http.jsonp(_search_album+'?'+CALLBACK+'&data='+JSON.stringify({"albumKeyword": value, "isolated":0})).then(function(response){
                        //console.log(response.data);
                        return response.data.body.list.map(function(item){
                            //console.log(item);
                            var allstr = item.albumName + '-';
                            if(item.artists != undefined && item.artists != null){
                                for (var i = 0; i < item.artists.length; i++){
                                    allstr += item.artists[i].artistName + ',';
                                }
                            }
                            allstr = allstr.substr(0, allstr.length - 1) + '-' + item.albumId;
                            item.allstr = allstr;
                            return item;
                        });
                    })
                };
                //全文检索选择事件
                $scope.addAlbum2List = function(album){
                    console.log(album);
                    $state.go('app.album',{albumIds:album.albumId, albumKeyword:''});
                };
                //全文检索点击搜索按钮
                $scope.searchAlbumBtn = function(value){
                    $state.go('app.album',{albumKeyword:value, albumIds:''});
                };
                $scope.getArtistInputSearch = function(value){   //精确输入框搜索艺人
                    //console.log(value);
                    return $http.jsonp(_search_artist+'?'+CALLBACK+'&data='+JSON.stringify({"artistKeyword": value, "isolated":0})).then(function(response){
                        //console.log(response.data);
                        var ids = [];
                        for(var i = 0; i < response.data.body.list.length; i++){
                            ids.push(response.data.body.list[i].artistId);
                        }
                        return $http.jsonp(list_url + "artist.json?callback=JSON_CALLBACK&ids=" + ids.join(',')).then(function(res){
                            return res.data.data.map(function(item){
                                //console.log(item);
                                var allstr = item.artistName + '-' + item.artistNameAlias + '-' + item.sex;
                                allstr = allstr.substr(0, allstr.length - 1) + '-' + item.artistId;
                                item.allstr = allstr;
                                return item;
                            });
                        });
                    })
                };
                $scope.addAccurateArtist = function(data){ //添加精确搜索
                    if(checkEmpty($scope.form)) $scope.form={};
                    $scope.form.artistId = data.artistId;
                    $scope.form.accurateArtist = data.artistName;
                    // $scope.accurateSearch = data;
                };
                $scope.removeAccurateSearch = function(accurateSearch){ //删除精确搜索
                    if(!checkEmpty($scope.form)) deleteProperty($scope.form,'artistId');
                    deleteProperty($scope.form,'accurateArtist');
                };
                //标签右上角的叉叉函数
                $scope.albumTagRemove = function(tag){
                    console.log(tag);
                    styleTagSearchWay(tag,$scope,false);
                    //tagRemove(tag,$scope,$stateParams,$state,'app.album');
                    $scope.form.searchTag.remove(tag);
                    $scope.form.tagBeans.remove(tag);
                };
                //点击标签树中的标签跳转相应数据显示页面
                $scope.albumTagClick = function(tag){
                    tagClick(tag,albumTagTree,'app.album',$stateParams,$state);
                };
                $scope.changeTagType = function (type) {
                    for(var i = 0; i < $scope.form.tagBeans.length; i++){
                        if(!checkEmpty($scope.form.tagBeans[i].type)){
                            $scope.form.tagBeans[i].type = type;
                        }
                    }
                };
                //重新抽取素材
                $scope.extractedMaterial = function(id, type){
                    extractedMaterial(id, type, $http, SweetAlert);
                };
                //分页跳转
                $scope.choosePage = function(){
                    $state.go('app.album',{pageNo: $scope.page.currentPage});
                };
                //监听键盘按钮事件
                //$scope.enter = function(event, searchValue, searchType){
                //    if(event.keyCode == 13){
                //        //console.log(searchValue);
                //        if(searchType == 'albumId'){
                //            $state.go('app.album',{albumIds:searchValue, albumKeyword:'', artistKeyword:'', karakalStatus:''});
                //        } else if(searchType == 'albumName'){
                //            $state.go('app.album',{albumIds:'', albumKeyword:searchValue});
                //        } else if(searchType == 'artistName'){
                //            $state.go('app.album',{albumIds:'', artistKeyword:searchValue});
                //        }
                //    }
                //};
                //勾选框控制界面元素
                $scope.changeCheck = function(html){
                    //把勾选框去掉
                    html.cheched = !html.cheched;
                    $scope.html_chooseElem = false;
                };
                //显示所有属性
                $scope.showAllHtmlElem = function(){
                    for(var  i = 0; i < $scope.album_html.length; i++){
                        $scope.album_html[i].checked = true;
                    }
                };
                //点击展开自定义界面列表
                $scope.showDropChooseElem = function(){
                    if($scope.html_chooseElem == undefined){
                        $scope.html_chooseElem = true;
                    } else {
                        $scope.html_chooseElem = !$scope.html_chooseElem;
                    }
                };
                //全选
                $scope.checkAll = function(datas){
                    selectAll($scope, datas, 'isCheck', 'allIsCheck');
                };
                //单选
                $scope.checkOne = function(data, datas){
                    selectOne(data, !data.checked, 'checked');
                };
                //添加到抽查工单
                $scope.addToCheckTask = function(datas){
                    var selectedDataIds = getPropertyFromCheckBox(datas, 'isCheck', true, 'albumId');
                    addToCheckTask($http, "album", selectedDataIds, SweetAlert);
                };
                //查看艺人信息按钮
                $scope.showInfo = function(type,data){
                    openNewTab(type,data,'Info',$state);
                };
                //编辑按钮
                $scope.editJump = function(data){
                    editJumpNew('album',data,SweetAlert,$state,'_self');
                };
                $scope.rightClick = function (data) {
                    editJumpNew('album',data,SweetAlert,$state, '_blank', $stateParams);
                };
                $scope.separate = function(type,id){
                    var url = $state.href('app.separate',{type:type,id:id,lastPage:returnLastPageTime()});
                    window.open(url,'_blank');
                };
                $scope.new = function(type){
                    addNewMaterialFromTop(type,$state);
                };
            }]
        })
        .state('albumInfo',{
            'url':'/albumInfo?:albumId&:lastPage&:returnBtn',
            templateUrl:'app/views/album/album-info.html',
            resolve: helper.resolveFor('oitozero.ngSweetAlert','icons','lightbox2','modernizr'),
            controller:["$http", "$scope", "$sce", "$stateParams", "$cookies", "$state", "$timeout", "$rootScope", "display", "SweetAlert", function($http,$scope,$sce,$stateParams,$cookies,$state,$timeout,$rootScope,display,SweetAlert){
                if($stateParams.returnBtn) $scope.returnBtn = $stateParams.returnBtn;
                getDataInfo('album',$http,$scope,$sce,$stateParams,true);
                basicRequest('album',catalogsAlbum,$scope,$http,$sce,$stateParams,$cookies,true);
                $scope.goBack = function(){     //返回按钮
                    window.open(returnLastPage($stateParams.lastPage), '_self');
                };
                $scope.edit = function(type,id){    //编辑按钮
                    toEdit(type,id,$stateParams,$state,SweetAlert);
                };
                $scope.editJump = function(data){       //编辑按钮
                    editJumpNew('album',data,$timeout,$rootScope,display,'_self');
                };
                $scope.jumpInfo = function(type,id,op){
                    infoNewTabState(type,id,op,$state)
                };
                $scope.addPlaySong = function(songId,copyId){ //歌曲播放
                    addPlaySong(songId,copyId,SweetAlert);
                };
                loadMoreRecord('album',$scope,$stateParams,$http,SweetAlert);
            }]
        })
        .state('albumExamine',{
            'url':'/albumExamine?:albumId&:lastPage&:taskId&:returnBtn',
            templateUrl:'app/views/album/album-info.html',
            resolve: helper.resolveFor('oitozero.ngSweetAlert','icons','lightbox2','modernizr'),
            controller:["$scope", "$http", "$sce", "$stateParams", "$cookies", "display", "$timeout", "$rootScope", "SweetAlert", function($scope,$http,$sce,$stateParams,$cookies,display,$timeout,$rootScope,SweetAlert){
                if($stateParams.returnBtn) $scope.returnBtn = $stateParams.returnBtn;
                $scope.examine = true;
                basicRequest('album',catalogsAlbum,$scope,$http,$sce,$stateParams,$cookies);
                //basicRequest('album',$scope,$http,$sce,$stateParams,$cookies);
                $scope.examineConfirm = function(examineResult, examineSuggest){    //审核确认
                    examineCommon('album',examineResult,examineSuggest,$http,$stateParams,SweetAlert);
                };
                $scope.goBack = function(type,id){      //返回按钮
                    unLock(type,id,$http,$stateParams,SweetAlert);     //解锁审核状态
                };
                $scope.addPlaySong = function(songId,copyId){ //歌曲播放
                    addPlaySong(songId,copyId,SweetAlert);
                };
                loadMoreRecord('album',$scope,$stateParams,$http,SweetAlert);
            }]
        })
        .state('albumEdit',{
            'url': '/albumEdit?:albumId&:tp&:lastPage&:auth',
            templateUrl:'app/views/album/album-edit.html',
            resolve: helper.resolveFor('oitozero.ngSweetAlert','icons','lightbox2','inputmask','modernizr'),
            controller:["$scope", "$http", "$sce", "$stateParams", "$cookies", "display", "$state", "$timeout", "$rootScope", "$filter", "SweetAlert", function($scope,$http,$sce,$stateParams,$cookies,display,$state,$timeout,$rootScope,$filter,SweetAlert){
                $scope.type = 'album';
                $scope.preBtn = true;
                addNewDataPage('album',$scope,$stateParams);
                // getDataInfo('album',$http,$scope,$sce,$stateParams,true);
                basicRequest('album',catalogsAlbum,$scope,$http,$sce,$stateParams,$cookies,true);
                //basicRequest('album',$scope,$http,$sce,$stateParams,$cookies,true);
                getTaggingTags('2',$scope,$http);       //获取标签树
                $scope.changeTemplate = function(tp){       //切换模板
                    sweetAlertConfirm(SweetAlert,function(){
                        $state.go('albumEdit',{tp:tp});
                        sweetAlertCommon(SweetAlert,'操作成功','success');
                    },'warning',undefined,'更换模板将丢失部分数据');
                    
                    //$state.go('albumEdit',{tp:tp});
                };
                $scope.getDictionary = function(value, type){    //几种数据字典搜索（发行公司）
                    return $http.get(dictionary_url + type + '.json', {
                        params: {
                            "search": value
                        }
                    }).then(function(response){
                        //console.log(response.data);
                        return response.data.data.map(function(item){
                            return item;
                        });
                    })
                };
                $scope.getSearchResult = function(value,type){      //获取搜索数据
                    var param = {};param.params = {};param.params.data={};
                    param.params.data[type+'Keyword'] = value;
                    param.params.data['isolated'] = 0;
                    return $http.get(_search_url+'search/'+type+'.json', param).then(function(response){
                        var ids = [];
                        for(var i = 0; i < response.data.body.list.length; i++){
                            ids.push(response.data.body.list[i][type+'Id']);
                        }
                        if(ids.size < 0){
                            return;
                        }else{
                            return $http.jsonp(list_url + type + ".json?ids=" + ids.join(',')+'&'+CALLBACK).then(function(res){
                                return res.data.data.map(function(item){
                                    var allstr = item[type+'Name'] + '--' + item.sex + ',' + item.artistNameAlias + ',' + item.nation + ',';
                                    if(item.artists != undefined && item.artists != null){
                                        for (var i = 0; i < item.artists.length; i++){
                                            allstr += item.artists[i].artistName + ',';
                                        }
                                    }
                                    allstr = allstr.substr(0, allstr.length - 1) + ',' + item[type+'Id'];
                                    item.allstr = allstr;
                                    return item;
                                });
                            });
                        }
                    })
                };
                $scope.addRelationData = function(data,arr){        //添加关联关系数据（添加歌手）
                    addRelationData(data,arr,'artist');
                    console.log($scope.data.artists);
                };
                $scope.removeRelationData = function(data, arr){        //删除关联关系数据（删除歌手）
                    arr.remove(data);
                };
                $scope.open = function(flag,model) {     //打开日期框
                    if(flag == 1){
                        $scope.dateStatus.opened1 = true;
                    } else if (flag == 2){
                        $scope.dateStatus.opened2 = true;
                    }
                };
                $scope.dateStatus = {opened1: false, opened2: false};
                $scope.tagging = function(t,type, parentT, grandPT){  //打标签操作
                    setTaggingData(t,type,$scope);
                    if(parentT) setTaggingData(parentT, type, $scope);
                    if(grandPT) setTaggingData(grandPT, type, $scope);
                    console.log(parentT);
                };
                $scope.taggingShow = function (t, $event) {
                    if(t.tagName == '中国方言' || t.isParent){  //展示中国方言二级标签特殊处理
                        if(!t.selectedIndex) t.selectedIndex = t.tagId;
                        else t.selectedIndex = undefined;
                    }
                    $event.stopPropagation();
                };
                $scope.getCStyle = function(tp,property) {   //获取子风格和其他子风格
                    getCStyle(tp,property,$scope,$http);
                };
                $scope.addPlaySong = function(songId,copyId){ //歌曲播放
                    addPlaySong(songId,copyId,SweetAlert);
                };
                $scope.fixDateNew = function(date,data,property){   //修复自定义标签时间
                    if(checkEmpty($scope[data])){
                        $scope[data] = {};
                    }
                    $scope[data][property] = fixDate(date);
                };
                $scope.submit = function(tagExt){     //提交按钮
                    if(!checkEmpty(tagExt)){
                        tagExt.status = 1;
                        $scope.taggingData.tagExt = tagExt;
                    }
                    submit('album',$scope,$http,$stateParams,$filter,SweetAlert);
                };
                $scope.removeTagging = function(t){     //去除已打标签
                    removeTagging(t,$scope);
                };
                $scope.uploadImg = function(id){       //上传图片
                    id = $scope.data ? $scope.data.albumId : undefined;
                    uploadImg(id,'album',$scope,$http,SweetAlert);
                };
                $scope.deleteImg = function () {        //删除图片
                    deleteImg($scope,SweetAlert);
                };
                $scope.new = function(type){        //新增素材
                    addNewMaterialFromTop(type,$state);
                };
                $scope.goBack = function(type,id){      //返回按钮
                    if(checkEmpty($stateParams.albumId)){
                        window.open(returnLastPage($stateParams.lastPage),'_self');
                    }else{
                        unLock(type,id,$http,$stateParams,SweetAlert);     //解锁审核状态
                    }
                };
                $scope.scoreChange = function(s,property){
                    watchScore(s,property);
                };
                loadMoreRecord('album',$scope,$stateParams,$http,SweetAlert);
            }]
        })
        .state('albumCheck',{
            'url':'/albumCheck?:albumId&:lastPage&:taskId',
            templateUrl:'app/views/album/album-info.html',
            resolve: helper.resolveFor('oitozero.ngSweetAlert','icons','lightbox2','modernizr'),
            controller:["$scope", "$http", "$sce", "$stateParams", "$cookies", "display", "$timeout", "$rootScope", "SweetAlert", function($scope,$http,$sce,$stateParams,$cookies,display,$timeout,$rootScope,SweetAlert){
                $scope.check = true;
                $scope.ckTagError = {};
                basicRequest('album',catalogsAlbum,$scope,$http,$sce,$stateParams,$cookies);
                //basicRequest('album',$scope,$http,$sce,$stateParams,$cookies);
                //抽查提交按钮
                $scope.checkMaterial = function(ckResult, ckSuggest, ckTagError){
                    checkCommon('album',ckResult,ckSuggest,ckTagError,$http,$stateParams,SweetAlert);
                };
                $scope.goBack = function(type,id){      //返回按钮
                    unLock(type,id,$http,$stateParams,SweetAlert);     //解锁审核状态
                };
                loadMoreRecord('album',$scope,$stateParams,$http,SweetAlert);
            }]
        })
        .state('material.preAlbum',{
            url: '/preAlbum',
            views: {
                '': {
                    templateUrl: 'app/views/album/album-info.html',
                    controller: 'PreDataController'
                }
            }
        })
}
/**
 * 锚点定点跳转
 */
angular.module('app.routes').controller('GotoAnchor',["$scope", "$location", "$anchorScroll", "$state", function($scope,$location,$anchorScroll,$state){
    $scope.gotoAnchor = function(id) {
        // set the location.hash to the id of
        // the element you wish to scroll to.
        $location.hash(id);
        // call $anchorScroll()
        $anchorScroll();
    };
    $scope.selectImgNext = function(img,imgs){  //下一张图片
        selectImgNext(img,imgs);
    };
    $scope.selectImgPre = function(img,imgs){   //上一张图片
        selectImgPre(img,imgs);
    };
    $scope.jumpInfo = function(type,id,op){     //跳转info界面
        infoNewTabState(type,id,op,$state)
    }
}])

//从全局搜索接口获取id然后获取素材详细信息
function getMaterialBySearch(res, $http, $scope, type){
    // var materialIds = [];
    for(var i = 0; i < res.body.list.length; i++){
        // materialIds.push(res.body.list[i][type + 'Id']);
        $scope.datas.push(res.body.list[i]);
    }
    // if(materialIds.length > 0){
    //     $http.jsonp(list_url + type + ".json?callback=JSON_CALLBACK&ids=" + materialIds.join(',')).success(function(res){
    //         for(var i = 0; i < res.data.length; i++){
    //             if(!judgeRepeat($scope['datas'], res.data[i], type)){
    //                 $scope['datas'].push(res.data[i]);
    //             }
    //         }
    //     });
    // }
}
var catalogsAlbum = [{'name':'概述','id':'catalog-1'},{'name':'基础信息','id':'catalog-2'},{'name':'标签','id':'catalog-3'},{'name':'创作背景','id':'catalog-4'},{'name':'获奖情况','id':'catalog-5'},{'name':'专辑介绍','id':'catalog-6'},{'name':'专辑评价','id':'catalog-7'},{'name':'曲目列表','id':'catalog-8'}];
//专辑页面填充url
function materialListFillUrl(url, $stateParams, flag){
    var data = new Object();
    var pageNo = ($stateParams.pageNo == undefined ? 1 : $stateParams.pageNo);
    var pageSize = ($stateParams.pageSize == undefined ? 100 : $stateParams.pageSize);
    data.pageNo = pageNo;
    data.pageSize =pageSize;
    if(!isPropertyEmpty($stateParams.tagIds)){
        data.tags = stringToArray($stateParams.tagIds);
    }
    if(!isPropertyEmpty($stateParams.tagBeans)){
        data.tagBeans = JSON.parse($stateParams.tagBeans);
    }
    if(!isPropertyEmpty($stateParams.albumIds)){
        data.albumIds = stringToArray($stateParams.albumIds);
    }
    if(!isPropertyEmpty($stateParams.albumKeyword)){
        data.albumKeyword = $stateParams.albumKeyword;
    }
    if(!isPropertyEmpty($stateParams.artistKeyword)){
        data.artistKeyword = $stateParams.artistKeyword;
    }
    if(!isPropertyEmpty($stateParams.artistId)){
        data.artistId = $stateParams.artistId;
    }
    if(!isPropertyEmpty($stateParams.artistIds)){
        data.artistIds = stringToArray($stateParams.artistIds);
    }
    if(!isPropertyEmpty($stateParams.karakalStatus)){
        data.karakalStatus = $stateParams.karakalStatus;
    }
    if(!isPropertyEmpty($stateParams.status)){
        data.status = $stateParams.status;
    }
    if(!isPropertyEmpty($stateParams.songIds)){
        data.songIds = stringToArray($stateParams.songIds);
    }
    if(!isPropertyEmpty($stateParams.songKeyword)){
        data.songKeyword = $stateParams.songKeyword;
    }
    if(!isPropertyEmpty($stateParams.lyricPerson)){
        data.lyricser = $stateParams.lyricPerson;
    }
    if(!isPropertyEmpty($stateParams.composePerson)){
        data.composer = $stateParams.composePerson;
    }
    //指挥者
    if(!isPropertyEmpty($stateParams.conductor)){
        data.cantor = $stateParams.conductor;
    }
    //演奏者
    if(!isPropertyEmpty($stateParams.player)){
        data.performer = $stateParams.player;
    }
    if(!isPropertyEmpty($stateParams.lastEdit)){
        data.editUid = $stateParams.lastEdit;
    }
    if(!isPropertyEmpty($stateParams.copyrightId)){
        data.copyrightId = $stateParams.copyrightId;
    }
    if(!isPropertyEmpty($stateParams.projectName)){
        data.projectName = $stateParams.projectName;
    }
    if(!isPropertyEmpty($stateParams.orderBys)){
        data.orderBys = [],data.orderBys.push($stateParams.orderBys);
    }
    if(!isPropertyEmpty($stateParams.ckResult)) data.ckResult = $stateParams.ckResult;
    if(!isPropertyEmpty($stateParams.mscoreMin)) data.mscoreMin = $stateParams.mscoreMin;
    if(!isPropertyEmpty($stateParams.mscoreMax)) data.mscoreMax = $stateParams.mscoreMax;
    if(!isPropertyEmpty($stateParams.hotScoreMin)) data.hotScoreMin = $stateParams.hotScoreMin;
    if(!isPropertyEmpty($stateParams.hotScoreMax)) data.hotScoreMax = $stateParams.hotScoreMax;
    if(!isPropertyEmpty($stateParams.istag)) data.istag = $stateParams.istag;
    if(!isPropertyEmpty($stateParams.category)) data.category = $stateParams.category;
    if(flag == 'count') data.isQueryCount = 1;
    data.isolated = 0;
    url += '&data=' + encodeURIComponent(JSON.stringify(data));
    return url;
}
function fillSearchCondition($stateParams, $scope, $http, $cookies, songTagTree){
    //获取所有git用户
    //填充最后编辑人
    if($scope.$parent.users ==undefined || $scope.$parent.users.length <= 0){
        getGitUsers($http,$cookies,$scope, 1, function (){
            //console.log($scope.gitUsers);
            $scope.$parent.users = git_users;
            fillUser();
        });
    } else {
        fillUser();
    }
    function fillUser(){
        if(!isPropertyEmpty($stateParams.lastEdit)){
            for(var n = 0; n < $scope.$parent.users.length; n++){
                if($scope.$parent.users[n].uId == $stateParams.lastEdit){
                    $scope.form.lastEditSearch = $scope.$parent.users[n].name;
                }
            }
        }
    }
    if(!isPropertyEmpty($stateParams.tagIds)){
        for(var i = 0; i < $stateParams.tagIds.split(',').length; i++){
            //遍历获取到的标签树获得标签ID对应的标签
            var tag = getTagById($stateParams.tagIds.split(',')[i], songTagTree);
            if(tag != undefined){
                $scope.form.searchTag.push(tag);
            }
        }
    }
    for(var property in $stateParams){
        if(!isPropertyEmpty($stateParams[property])){
            $scope.form[property] = $stateParams[property];
        }
    }
}
//分页显示
function materialListSeparatePage($scope, res){
    if(checkEmpty($scope.page)) $scope.page = {};
    $scope.page.maxSize = 5;
    $scope.page.itemsPerPage = checkEmpty(res.body)?res.data.pageSize:res.body.pageSize;
    $scope.page.currentPage = checkEmpty(res.body)?res.data.pageNo:res.body.pageNo;
    $scope.page.totalItems = checkEmpty(res.body)?res.data.totalCount:res.body.totalCount;
    $scope.page.totalPage = checkEmpty(res.body)?res.data.pageTotal:res.body.pageTotal;
}

//素材去重
function judgeRepeat(datas, data, type){
    for(var i = 0; i < datas.length; i++){
        if(datas[i][type + 'Id'] == data[type + 'Id']){
            return true;
        }
    }
    return false;
}
angular.module('app.routes').config(artistConfig);
artistConfig.$inject = ['$stateProvider', 'RouteHelpersProvider','$httpProvider'];
function artistConfig($stateProvider, helper,$httpProvider){
    //initialize get if not there
    // if (!$httpProvider.defaults.headers.get) {
    //     $httpProvider.defaults.headers.get = {};
    // }

    // Answer edited to include suggestions from comments
    // because previous version of code introduced browser-related errors

    //disable IE ajax request caching
    // $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
    // extra
    // $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';
    // $httpProvider.defaults.headers.get['Pragma'] = 'no-cache';

    $stateProvider
        .state('artist2',{
            url: '/artist2',
            templateUrl: '../artist/artist.html'
        })
        .state('artist2.good',{
            url: '/good',
            views: {
                'artist_good':{
                    templateUrl: '../artist/artist_good.html',
                    controller: ["$http", "$scope", function($http,$scope){

                    }]
                }
            }
        })
        .state('app.artist',{
            url: '/artist?:time&:id&:pageNo&:pageSize&:artistKeyword&:artistIds&:status&:{orderBys:json}&:tagBeans&:style&:score&:manualScore&:mscoreMin&:mscoreMax&:lastEditSearch&:lastEdit&:ckResult&:hotScoreMin&:hotScoreMax',
            templateUrl: 'app/views/artist/all/artist.html',
            resolve: helper.resolveFor('ngGrid'),
            controller:["$scope", "$http", "$stateParams", "permissions", "$timeout", "$rootScope", "display", "$state", "$window", "$cookies", "SweetAlert", function($scope, $http, $stateParams, permissions, $timeout, $rootScope, display, $state,$window,$cookies,SweetAlert){
                //界面元素控制下拉框列表
                var _table = JSON.parse(localStorage.getItem('local-artistHtml'));
                $scope.artist_html = _table ? _table : [{name:'状态', checked:true},{name: '艺人ID', checked:true},{name: '艺人名', checked:true},{name:'别名及昵称', checked:true},{name:'性别', checked:true},{name: '国家', checked:true},{name:'综合评分', checked:true},{name:'人工评分', checked:true}];
                $scope.storageTableShow = function () {
                    var _localStorage = [];
                    $scope.artist_html.forEach(function (val) {
                        _localStorage.push(val);
                    });
                    localStorage.setItem('local-artistHtml', JSON.stringify(_localStorage));
                };
                if(checkEmpty($scope.users)) $scope.users = JSON.parse(localStorage.getItem('users'));
                //初始化界面的artists

                $scope.datas = [];
                $scope.artistTags = [];
                $scope.page = new Object();
                $scope.form = {};
                $scope.form.searchTag = [];
                $scope.form.tagBeans = [];
                getTagList(1,$scope,$stateParams,$http,$cookies,SweetAlert);
                var url = _search_artist + '?' + CALLBACK;
                url = materialListFillUrl(url, $stateParams);
                if(url != undefined){
                    $http.jsonp(url).success(function(res){
                        //填充页面数据
                        getMaterialBySearch(res, $http, $scope, 'artist');
                    });
                }
                //分页
                var page_url = _search_artist + '?' + CALLBACK;
                page_url = materialListFillUrl(page_url, $stateParams, 'count');
                if(page_url != undefined){
                    $http.jsonp(page_url).success(function(res){
                        //分页
                        materialListSeparatePage($scope, res);
                    });
                }

                $scope.submit = function(){
                    var params = $scope.form;
                    if(!isPropertyEmpty(params.searchTag)){
                        var tagIds = '';
                        for(var i = 0; i < params.searchTag.length; i++){
                            tagIds += params.searchTag[i].id + ',';
                        }
                        if(params.searchTag.length != 0){
                            tagIds = tagIds.substr(0, tagIds.length - 1);
                            params.tagIds = tagIds;
                        }
                    }
                    var param = {};
                    for(var p in params){
                        if(p == 'score' || p == 'manualScore'){
                            var map = {};
                            map.key = p;
                            map.value = params[p];
                            param.orderBys = map;
                            param[p] = params[p];
                        }else{
                            param[p] = params[p];
                        }
                    }

                    if(!checkEmpty(param.tagBeans)) param.tagBeans = angular.toJson(param.tagBeans);
                    param.pageNo = '',param.pageSize = '';
                    param.time = new Date().getTime();
                    $state.go('app.artist',param,{reload: false, inherit: false});
                };
                $scope.setScore = function(type){
                    if(!checkEmpty($scope.form) && !checkEmpty($scope.form[type])){
                        $scope.form[type] = '';
                    }
                };
                $scope.scoreSearch = function(type,op){
                    if(checkEmpty($scope.form)) $scope.form = {};
                    $scope.form[type] = op;
                    if(type == 'score'){
                        deleteProperty($scope.form,'manualScore');

                    }else{
                        deleteProperty($scope.form,'score');
                    }
                    this.submit();
                };
                //选择最后编辑人
                $scope.selectLastEdit = function(user){
                    $scope.form.lastEdit = user.uId;
                };
                //重置搜索条件
                $scope.reset = function(){
                    $scope.form = {};
                    $scope.form.searchTag = [];
                };
                //选择标签时候选择顶部标签
                $scope.selectMainTag = function(tag){
                    $scope.tag_list = tag.children;
                };
                $scope.selectSearchTag = function(tag){
                    selectTagSearch(tag,$scope);
                };
                $scope.changeTagType = function (type) {
                    for(var i = 0; i < $scope.form.tagBeans.length; i++){
                        if(!checkEmpty($scope.form.tagBeans[i].type)){
                            $scope.form.tagBeans[i].type = type;
                        }
                    }
                };
                //全文搜索
                $scope.getSearchResult = function(value){
                    //console.log(value);
                    return $http.get(_search_artist, {
                        params: {
                            data:{
                                "artistKeyword": value,
                                "isolated":0
                            }
                        }
                    }).then(function(response){
                        //console.log(response.data);
                        return response.data.body.list.map(function(item){
                            //console.log(item);
                            var allstr = item.artistName + '-';
                            allstr = allstr.substr(0, allstr.length - 1) + '-' + item.artistId;
                            item.allstr = allstr;
                            return item;
                        });
                    })
                };
                //全文检索选择事件
                $scope.addArtist2List = function(data){
                    console.log(data);
                    $state.go('app.artist',{artistIds:data.artistId, artistKeyword:''});
                };
                //全文检索点击搜索按钮
                $scope.searchArtistBtn = function(value){
                    $state.go('app.artist',{artistKeyword:value, artistIds:'', tagIds:''});
                };
                //标签右上角的叉叉函数
                $scope.artistTagRemove = function(tag){
                    console.log(tag);
                    styleTagSearchWay(tag,$scope,false);
                    //tagRemove(tag,$scope,$stateParams,$state,'app.artist');
                    $scope.form.searchTag.remove(tag);
                    $scope.form.tagBeans.remove(tag);
                };
                //点击标签树中的标签跳转相应数据显示页面
                $scope.artistTagClick = function(tag){
                    tagClick(tag,artistTagTree,'artist',$stateParams,$state);
                };
                //重新抽取素材
                $scope.extractedMaterial = function(id, type){
                    extractedMaterial(id, type, $http, SweetAlert);
                };
                //分页跳转
                $scope.choosePage = function(){
                    $state.go('app.artist',{pageNo: $scope.page.currentPage});
                };
                $scope.jumpPage = function(pageNo){ //页面跳转
                    $state.go('app.artist',{pageNo:pageNo});
                };
                $scope.pageSizeOptions = [{'value':'50'},{'value':'100'},{'value':'150'},{'value':'200'}];
                $scope.pageSize = $scope.pageSizeOptions[1].value;
                $scope.choosePageSize = function (pageSize) {   //每页展示数据
                    $state.go('app.artist',{pageSize:pageSize});
                    // console.log(elem.inheritedData('$uiView').state);
                    console.log($state.current);
                };
                //监听键盘按钮事件
                $scope.enter = function(event, searchValue, searchType){
                    if(event.keyCode == 13){
                        //console.log(searchValue);
                        if(searchType == 'artistId'){
                            $state.go('app.artist',{artistIds:searchValue, artistKeyword:'', karakalStatus:''});
                        } else if(searchType == 'artistName'){
                            $state.go('app.artist',{artistKeyword:searchValue, artistIds:''});
                        }
                    }
                };
                //勾选框控制界面元素
                $scope.changeCheck = function(html){
                    //把勾选框去掉
                    html.checked = !html.checked;
                    $scope.html_chooseElem = false;
                };
                //显示所有属性
                $scope.showAllHtmlElem = function(){
                    for(var  i = 0; i < $scope.artist_html.length; i++){
                        $scope.artist_html[i].checked = true;
                    }
                };
                //点击展开自定义界面列表
                $scope.showDropChooseElem = function(){
                    if($scope.html_chooseElem == undefined){
                        $scope.html_chooseElem = true;
                    } else {
                        $scope.html_chooseElem = !$scope.html_chooseElem;
                    }
                };
                //全选
                $scope.checkAll = function(datas){
                    selectAll($scope, datas, 'isCheck', 'allIsCheck');
                };
                //单选
                $scope.checkOne = function(data, datas){
                    selectOne(data, !data.checked, 'checked');
                };
                //添加到抽查工单
                $scope.addToCheckTask = function(datas){
                    var selectedDataIds = getPropertyFromCheckBox(datas, 'isCheck', true, 'artistId');
                    addToCheckTask($http, "artist", selectedDataIds, SweetAlert);
                };
                //编辑按钮
                $scope.editJump = function(data){
                    editJump($http,'artist',data,$state,SweetAlert,'_self');
                };
                $scope.rightClick = function (data) {
                    editJump($http,'artist',data,$state,SweetAlert, '_blank', $stateParams);
                };
                //查看艺人信息按钮
                $scope.showArtistInfo = function(artist){
                    openNewTab('artist',artist,'Info',$state);
                    //window.open("/mls/resources/pages/top/index.html#/artistInfo?artistId=" + artist.artistId + '&lastPage={"url":"' + encodeURIComponent(document.location.href)+'"}', '_blank');
                };
                $scope.separate = function(type,id){
                    var url = $state.href('app.separate',{type:type,id:id,lastPage:returnLastPageTime()});
                    window.open(url,'_blank');
                };
                $scope.new = function (type) {
                    addNewMaterialFromTop(type,$state);
                }

            }]
        })
        .state('app.artist.search',{
            url:'/search?:tags',
            views:{
                'data_list':{
                    templateUrl: '../artist/all/artist_list.html',
                    controller:["$scope", "$http", "$stateParams", "$state", "$filter", function($scope,$http,$stateParams,$state,$filter){
                        if(!isEmpty($stateParams)){
                            if(!checkEmpty($stateParams.tags)){
                                $scope.$parent.tags = $stateParams.tags;

                                var ids =$stateParams.tags.split(',');
                                $scope.$parent.tagList = [];
                                for(var i in ids){
                                    //$scope.$parent.tagList.push(getTagById(ids[i],$scope.$parent.tags_title));
                                }
                            }
                            getSearchData('artist',iteratorStateParam($stateParams,$filter,'tags'),$scope,$http);
                        }
                    }]
                }
            }
        })
        .state('artistInfo',{
            //url:'/artistInfo?:tp&:artistId&:{lastPage:json}',
            url:'/artistInfo?:tp&:artistId&:lastPage&:returnBtn',
            views:{
                '':{
                    templateUrl:'app/views/artist/all/artist-info.html',
                    resolve: helper.resolveFor('oitozero.ngSweetAlert','icons','lightbox2','modernizr'),
                    controller:["$scope", "$stateParams", "$http", "$cookies", "$sce", "$state", "$timeout", "$rootScope", "display", "$location", "$anchorScroll", "SweetAlert", function($scope, $stateParams, $http, $cookies,$sce,$state,$timeout,$rootScope,display,$location,$anchorScroll,SweetAlert){
                        if($stateParams.returnBtn) $scope.returnBtn = $stateParams.returnBtn;
                        $scope.catalogs = [{'name':'概述','id':'catalog-1'},{'name':'基础信息','id':'catalog-2'},{'name':'主要作品','id':'catalog-3'},{'name':'艺人风格','id':'catalog-4'},{'name':'艺人经历','id':'catalog-5'}];
                        $scope.gotoAnchor = function(id) {  //锚点跳转
                            // set the location.hash to the id of
                            // the element you wish to scroll to.
                            $location.hash(id);
                            // call $anchorScroll()
                            $anchorScroll();
                        };
                        getDataInfo('artist',$http,$scope,$sce,$stateParams,true);//获取数据信息
                        getOpRecord('artist',$stateParams.artistId,1,1,$http,$scope);
                        getExamineList('artist',1,$http,$scope,$stateParams,SweetAlert);
                        getCheckRecod('artist',$stateParams.artistId,1,$http,$scope,SweetAlert);
                        var artistTagUrl = tag_edit_new_query + 'artist/' + $stateParams.artistId + '.json?' + CALLBACK;
                        $http.jsonp(artistTagUrl).success(function(res3){
                            $scope.artistTags = res3.data.tags;
                        });

                        $scope.edit = function(type,data){ //编辑按钮
                            editJumpNew(type,data,SweetAlert,$state,'_self', $stateParams);
                        };
                        $scope.goBack = function(){ //返回按钮
                            window.open(returnLastPage($stateParams.lastPage), '_self');
                        };
                        $scope.selectImgNext = function(img,imgs){
                            selectImgNext(img,imgs);
                        };
                        $scope.selectImgPre = function(img,imgs){
                            selectImgPre(img,imgs);
                        };
                        $scope.jumpInfo = function(type,id,op){
                            infoNewTabState(type,id,op,$state)
                        };
                        loadMoreRecord('artist',$scope,$stateParams,$http,SweetAlert);
                    }]
                }
            }
        })
        .state('artistExamine',{
            url:'/artistExamine?:tp&:artistId&:taskId&:lastPage&:returnBtn',
            title: '艺人审核',
            views:{
                '':{
                    templateUrl:'app/views/artist/all/artist-info.html',
                    resolve: helper.resolveFor('oitozero.ngSweetAlert','icons','lightbox2','modernizr'),
                    controller:["$scope", "$stateParams", "$http", "$cookies", "$sce", "SweetAlert", function($scope, $stateParams, $http, $cookies,$sce, SweetAlert){
                        if($stateParams.returnBtn) $scope.returnBtn = $stateParams.returnBtn;
                        $scope.catalogs = [{'name':'概述','id':'catalog-1'},{'name':'基础信息','id':'catalog-2'},{'name':'主要作品','id':'catalog-3'},{'name':'艺人风格','id':'catalog-4'},{'name':'艺人经历','id':'catalog-5'}];
                        $scope.examine = true;
                        getDataInfo('artist',$http,$scope,$sce,$stateParams);//获取数据信息
                        getOpRecord('artist',$stateParams.artistId,1,1,$http,$scope);
                        getExamineList('artist',1,$http,$scope,$stateParams,SweetAlert);
                        getCheckRecod('artist',$stateParams.artistId,1,$http,$scope);
                        var artistTagUrl = tag_edit_new_query + 'artist/' + $stateParams.artistId + '.json?' + CALLBACK;
                        $http.jsonp(artistTagUrl).success(function(res3){
                            $scope.artistTags = res3.data.tags;
                        });

                        //审核提交按钮
                        $scope.examinArtist = function(examineResult, examineSuggest){
                            examineCommon('artist',examineResult,examineSuggest,$http,$stateParams,SweetAlert);
                        };
                        //返回按钮
                        $scope.goBack = function(){ //返回按钮
                            window.open(returnLastPage($stateParams.lastPage), '_self');
                        };
                        $scope.loadMoreOperate = function(){
                            $scope.pageNo = checkEmpty($scope.pageNo) ? 2 : ($scope.pageNo + 1);
                            getOpRecord('artist',$stateParams.artistId,1,$scope.pageNo,$http,$scope,SweetAlert);
                        };
                        $scope.loadMoreExamine = function(){
                            $scope.pageNo = checkEmpty($scope.pageNo) ? 2 : ($scope.pageNo + 1);
                            getExamineList('artist',$scope.pageNo,$http,$scope,$stateParams,SweetAlert);
                        };
                        $scope.loadMoreCheck = function(){
                            $scope.pageNo = checkEmpty($scope.pageNo) ? 2 : ($scope.pageNo + 1);
                            getCheckRecod('artist',$stateParams.artistId,$scope.pageNo,$http,$scope,SweetAlert);
                        };
                        loadMoreRecord('artist',$scope,$stateParams,$http,SweetAlert);
                        $scope.showExamine = function () {
                            console.log('test');
                            $scope.examineStyle = true;
                        }
                    }]
                }
            }
        })
        .state('artistEdit',{
            url:'/artistEdit?:tp&artistId&:taskId&:auth&:lastPage',
            views:{
                '':{
                    templateUrl:'app/views/artist/all/artist-edit.html',
                    resolve: helper.resolveFor('oitozero.ngSweetAlert','icons','inputmask','lightbox2','modernizr'),
                    controller:["$scope", "$stateParams", "$http", "$cookies", "$timeout", "$rootScope", "display", "$anchorScroll", "$location", "$window", "$filter", "$state", "SweetAlert", "$sce", "$filter", function($scope, $stateParams, $http, $cookies,$timeout,$rootScope,display,$anchorScroll,$location,$window,$filter,$state,SweetAlert,$sce,$filter){
                        $scope.birth = '9999-19-39';
                        $scope.type = 'artist';
                        $scope.preBtn = true;
                        addNewDataPage('album',$scope,$stateParams);
                        console.log(decodeURIComponent($stateParams.lastPage));
                        $scope.catalogs = [{'name':'概述','id':'catalog-1'},{'name':'基础信息','id':'catalog-2'},{'name':'主要作品','id':'catalog-3'},{'name':'艺人风格','id':'catalog-4'},{'name':'艺人经历','id':'catalog-5'}];
                        getOpRecord('artist',$stateParams.artistId,1,1,$http,$scope);
                        getDataInfo('artist',$http,$scope,$sce,$stateParams);
                        getCheckRecod('artist',$stateParams.artistId,1,$http,$scope);
                        getExamineList('artist',1,$http,$scope,$stateParams,SweetAlert);
                        var artistInfoUrl = detail_url+'artist/'+$stateParams.artistId+'.json?' + CALLBACK;

                        //几种数据字典搜索
                        $scope.getDictionary = function(value, type){
                            return $http.get(dictionary_url + type + '.json', {
                                params: {
                                    "search": value
                                }
                            }).then(function(response){
                                //console.log(response.data);
                                return response.data.data.map(function(item){
                                    return item;
                                });
                            })
                        };

                        //艺人代表歌曲全文搜索
                        $scope.getSearchResult = function(value,type){
                            var param = {};param.params = {};param.params.data={};
                            param.params.data[type+'Keyword'] = value;
                            param.params.data['isolated'] = 0;
                            return $http.get(_search_url+'search/'+type+'.json', param).then(function(response){
                                var ids = [];
                                for(var i = 0; i < response.data.body.list.length; i++){
                                    ids.push(response.data.body.list[i][type+'Id']);
                                }
                                if(ids.size < 0){
                                    return;
                                }else{
                                    return $http.jsonp(list_url + type + ".json?ids=" + ids.join(',')+'&'+CALLBACK).then(function(res){
                                        return res.data.data.map(function(item){
                                            var allstr = item[type+'Name'] + '--';
                                            if(type == 'artist'){
                                                allstr += item.sex + ',' + item.artistNameAlias + ',' + item.nation + ',';
                                            }
                                            if(item.artists != undefined && item.artists != null){
                                                for (var i = 0; i < item.artists.length; i++){
                                                    allstr += item.artists[i].artistName + ',';
                                                }
                                            }
                                            allstr = allstr.substr(0, allstr.length - 1) + ',' + item[type+'Id'];
                                            item.allstr = allstr;
                                            return item;
                                        });
                                    });
                                }
                            })
                        };

                        //相似艺人全文搜索
                        $scope.getSimilarArtist = function(){};
                        $scope.taggingData = {},$scope.taggingData.rid=$stateParams.artistId,$scope.taggingData.tags=[];     //更新标签参数
                        var artistTagUrl = tag_edit_new_query + 'artist/' + $stateParams.artistId + '.json?' + CALLBACK;
                        $http.jsonp(artistTagUrl).success(function(res3){
                            $scope.artistTags = res3.data.tags;
                            for(var i=0;i < res3.data.tags.length; i++){
                                var tag = {};
                                tag.type = res3.data.tags[i].type;
                                tag.tagId = res3.data.tags[i].tagId;
                                $scope.taggingData.tags.push(tag);
                                if(res3.data.tags[i].type == 11){
                                    $scope.area = {},$scope.area.tagId = res3.data.tags[i].tagId + '',
                                        $scope.area.tagName = res3.data.tags[i].tagName;
                                }
                            }
                            // if($stateParams.tp == 2 || $stateParams.tp == 3 || $stateParams.tp == 4){  //切换模板时特殊处理，没有的标签去掉
                            //     var tagsTemp = [];
                            //     var artistTagsTemp = [];
                            //     for(var i = 0 ; i < $scope.taggingData.tags.length; i++){
                            //         if($scope.taggingData.tags[i].type != 10 && $scope.taggingData.tags[i].type != 12 && $scope.taggingData.tags[i].type != 13){
                            //             tagsTemp.push($scope.taggingData.tags[i]);
                            //             artistTagsTemp.push($scope.artistTags[i]);
                            //         }
                            //     }
                            //     $scope.taggingData.tags = tagsTemp;
                            //     $scope.artistTags = artistTagsTemp;
                            // }else if($stateParams.tp == 0){
                            //     $scope.taggingData.tags = [];
                            // }
                            if($stateParams.tp == 0){
                                $scope.taggingData.tags = [];
                            }
                            getCStyle('1,2','otherSonStyleList',$scope,$http);      //先获取其他子风格的所有标签，以便用于删除一级和二级标签

                            getArtistTags();  //获取艺人标签

                            //console.log($scope.taggingData.tags);
                        }).error(function () {
                            console.log('error');
                            getArtistTags();  //获取艺人标签
                        });
                        //提交按钮
                        $scope.submit = function(){
                            console.log($scope.data);
                            var submitUrl = save_url + 'artist.json';
                            //特殊处理
                            if($scope.data.effectYearsStart != undefined || $scope.data.effectYearsEnd != undefined){
                                //$scope.data.effectYears = $scope.data.effectYearsStart + '-' + $scope.data.effectYearsEnd;
                                var effectYearsStart = checkEmpty($scope.data.effectYearsStart)?'':$scope.data.effectYearsStart;
                                var effectYearsEnd = checkEmpty( $scope.data.effectYearsEnd)?'': '-' + $scope.data.effectYearsEnd;
                                $scope.data.effectYears = effectYearsStart + effectYearsEnd;
                            }
                            if($scope.data.imgUrl != undefined){
                                if($scope.data.imgUrl.indexOf(img_r_url) != -1){
                                    //console.log($scope.data.imgUrl.substring(31,$scope.data.imgUrl.length));
                                    // $scope.data.imgUrl = $scope.data.imgUrl.substring(31,$scope.data.imgUrl.length);

                                    $scope.data.imgUrl = $scope.data.imgUrl.replace(img_r_url,'');
                                }
                            }
                            //$scope.data.imgUrl = $scope.data.avatar;
                            //console.log($scope.data.similarArtists);
                            $scope.data.birth = sliceDate($scope.data.birth);  //特殊裁剪生日
                            $scope.data.deathdate = sliceDate($scope.data.deathdate);  //特殊裁剪逝世日期

                            // if($scope.data.birth)
                            //     if($scope.data.birth.indexOf('_'))
                            //         $scope.data.birth = $scope.data.birth.slice(0, $scope.data.birth.indexOf('_')-1);
                            //需要保留的属性的字段名
                                var propertyArr = [
                                'artistId','description','type','artistName','artistNameAlias','englishName','chineseName','usedName','nickName','birth','deathdate','zodiac','constellation','height','weight','bloodType','recruitment','ethnic','location','degree','graduate','hobby','sex','company','rcompany','archieve','insrument','lover','nation','birthPlace','effectYears','composeTime','missTime','imgUrl','mscore','course','representSongs'//代表歌曲，数组
                                ,'resumes','honors'//荣誉记录，数组
                                ,'bands'//艺人所属组合，数组（type为艺人时才传）
                                ,'artists'//组合包含艺人，数组（type为组合时才传）
                                ,'similarArtists'//相似艺人，数组
                                ,'status','karakalStatus','isolated','honorsJson'
                            ];
                            var data = keepObjectProperty(propertyArr, $scope.data);
                            data.auth = $stateParams.auth;
                            data.tags = $scope.taggingData.tags;
                            data.tagExt = $scope.taggingData.tagExt;
                            console.log(data);
                            //艺人属性
                            $.post(submitUrl,'data='+encodeURIComponent(angular.toJson(data))).success(function(res){
                                if(res.status == 1){
                                    pausePlay();
                                    // sweetAlertCommon(SweetAlert,res.msg,'success');
                                    if(!checkEmpty($stateParams.lastPage)) window.open(returnLastPage($stateParams.lastPage), '_self');
                                    else history.back();
                                }else{
                                    sweetAlertCommon(SweetAlert,res.msg,'error');
                                }
                            });
                            //艺人标签
                            // $http.jsonp(tag_edi_new_update + 'artist.json?'+CALLBACK+'&data='+JSON.stringify($scope.taggingData)).success(function(res){
                            //     if(res.status != 1){
                            //         sweetAlertCommon(SweetAlert,'标签更新失败','error');
                            //     }
                            // });
                        };

                        //打开日期框
                        $scope.open = function(flag,model) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                        $scope.selectSingleProperty = function (val, property) {  //选择单一的数据属性
                            if(!$scope.data) $scope.data = {};
                            $scope.data[property] = val;
                        };
                        $scope.removeSingleProperty = function (property) {     //删除单一的数据属性
                            delete $scope.data[property];
                        };

                        function getArtistTags() {
                            $http.get(tag_tree_url+'getArtisteByClassificationAndTag?type=1').success(function(res){
                                $scope.areaList = res.areaList;     //地域
                                $scope.eraList = res.eraList;       //年代
                                $scope.mainStylesList = res.mainStylesList;     //主风格
                                $scope.occupationList = res.occupationList;     //职业
                                $scope.secondaryStyleList = res.secondaryStyleList;     //次风格
                                $scope.skilledInMusicList = res.skilledInMusicList;     //乐器
                                $scope.timbreList = res.timbreList;     //音色

                                for(var j = 0; j <　$scope.areaList.tagList.length; j++){
                                    if($scope.area.tagId == $scope.areaList.tagList[j].tagId){
                                        $scope.area = $scope.areaList.tagList[j];
                                    }
                                }
                                console.log(res);
                            });
                        }


                        $scope.tagging = function(t,type){  //打标签操作
                            setTaggingData(t,type,$scope);
                        };

                        $scope.selectPlace = function(t,type){  //选择地域操作
                            for(var i = 0; i < $scope.artistTags.length; i++){
                                if(isPropertyEmpty(t) && $scope.artistTags[i].type == type){
                                    for(var j = 0; j < $scope.taggingData.tags.length; j++){
                                        if($scope.taggingData.tags[j].type == type){
                                            $scope.taggingData.tags.del(j);
                                        }
                                    }
                                    $scope.artistTags.del(i);
                                    return;
                                }
                            }
                            setTaggingData(t,type,$scope);
                        };

                        $scope.addRepresentSongs = function(){
                            var s = {};
                            s.songName = '';
                            s.songId = '';
                            if($scope.data.representSongs == undefined){
                                $scope.data.representSongs = [];
                            }
                            $scope.data.representSongs.push(s);
                        };
                        //全文检索选择事件
                        $scope.addDataRepresentSongs = function(item, s){
                            s.songId = item.songId;
                            s.songName = item.songName;
                            $scope.addRepresentSongs();
                        };
                        $scope.deleteRepresentSongs = function(data,index){   //删除对应的代表歌曲
                            $scope.data.representSongs.del(index);
                            //for(var i = 0; i < $scope.data.representSongs.length; i ++){
                            //    if(data.songId == $scope.data.representSongs[i].songId){
                            //        $scope.data.representSongs.del(i);
                            //    }
                            //}
                            console.log($scope.data.representSongs);
                        };
                        $scope.deleteBands = function(data,index){  //删除所属乐队
                            $scope.data.bands.del(index);
                        };
                        $scope.deleteArtists = function(data,index){
                            $scope.data.artists.del(index);
                        };
                        $scope.deleteArr = function(index,arr){
                            arr.del(index);
                        };
                        $scope.addBands = function(tp){ //添加所属组合乐队或者添加成员（添加输入框）
                            if($scope.data[tp] == undefined){
                                $scope.data[tp] = [];
                            }
                            if($scope.data[tp].length >= 10){
                                sweetAlertCommon(SweetAlert,'最多添加十行','warning');
                                return;
                            }
                            var m = {};
                            m.timeRange = '';
                            m.role = '';
                            m.artistName = '';
                            $scope.data[tp].push(m);
                            console.log( $scope.data[tp]);
                        };
                        $scope.addHonors = function(tp){  //添加荣誉记录
                            var m = {};
                            m.prize = '';
                            m.time = '';
                            m.type = '';
                            m.works = '';
                            m.description = '';
                            m.classes = '';
                            if($scope.data[tp] == undefined){
                                $scope.data[tp] = [];
                            }
                            $scope.data[tp].push(m);
                        };
                        $scope.showBands = function(){
                            console.log( $scope.data.bands);
                        };
                        $scope.addDataGroup = function(item,m,tp){  //添加所属组合乐队或者添加成员（往对象里面放数据用于编辑保存数据）
                            console.log(item);
                            console.log(m);
                            m.artistName = item.artistName;
                            m[tp+'Id'] = item.artistId;
                        };
                        //全文检索选择事件
                        $scope.addData2List = function(data, arr){
                            if(arr == undefined){
                                arr = [];
                            }
                            console.log(data);
                            var material = new Object();
                            if(data.hasOwnProperty("songId")){
                                material.songId = data.songId;
                                material.songName = data.songName;
                            } else if (data.hasOwnProperty("albumId")){
                                material.albumId = data.albumId;
                                material.albumName = data.albumName;
                            } else if (data.hasOwnProperty("artistId")){
                                material.similarArtistId = data.artistId;
                                material.artistName = data.artistName;
                            }
                            arr.push(material);
                            //$scope.representSongs = "";
                        };
                        //删除某个相似艺人
                        $scope.removeSimilarArtist = function(artist, artists){
                            artists.remove(artist);
                        };
                        $scope.goBack = function(type,id){  //返回按钮
                            if(checkEmpty($stateParams.artistId)){
                                window.open(returnLastPage($stateParams.lastPage),'_self');
                            }else{
                                $http.jsonp(http_url+'/edit/rollback/'+type+'/'+id+'.json?'+CALLBACK).success(function(res){
                                    if(res.status == 1){
                                        window.open(returnLastPage($stateParams.lastPage), '_self');
                                    }
                                    console.log(res);
                                }).error(function(res){
                                    sweetAlertCommon(SweetAlert,'请求异常','error');
                                });
                            }
                        };
                        $scope.sonStyleList = [];
                        $scope.getCStyle = function(tp,property){   //获取子风格和其他子风格
                            var ids = [];
                            var tps = tp.split(',');
                            for(var i in $scope.taggingData.tags){
                                for(var j in tps){
                                    if($scope.taggingData.tags[i].type == tps[j]){ //只获取主风格的子风格
                                        ids.push($scope.taggingData.tags[i].tagId);
                                    }
                                }

                            }
                            if(ids.length > 0){
                                $http.get(tag_tree_url+'getArtisteBySonStyleListAndTag.do?'+'data='+ids.join(',')).success(function(res){
                                    $scope[property] = res[property];
                                    console.log($scope[property]);
                                })
                            }
                        };
                        function returnChildrenTags(tagList,tagName){
                            for(var i = 0; i < tagList.length; i++){
                                if(tagList[i].tagName == tagName){
                                    return tagList[i].tagList;
                                }
                            }
                        }
                        $scope.removeTagging = function(t,songList,type){
                            console.log($scope.sonStyleList);
                            for(var i in $scope.taggingData.tags){
                                if($scope.taggingData.tags[i].tagId == t.tagId){
                                    $scope.taggingData.tags.del(i);
                                    $scope.artistTags.del(i);
                                }
                            }
                            if(!checkEmpty(songList)){
                                var tempTaggingData = [];
                                var tempArtistTags = [];
                                var type_list = type.split(',');
                                for(var i = 0; i < $scope.taggingData.tags.length; i++){
                                    var childrenTags = returnChildrenTags(songList, t.tagName);
                                    for(var j = 0; j < childrenTags.length;j++){
                                        if($scope.taggingData.tags[i].tagId == childrenTags[j].tagId){
                                            for(var m=0; m < type_list.length; m++){
                                                if($scope.taggingData.tags[i].type == type_list[m]){
                                                    tempTaggingData.push($scope.taggingData.tags[i]);
                                                    tempArtistTags.push($scope.artistTags[i]);
                                                }
                                            }
                                        }
                                    }
                                }
                                $scope.taggingData.tags =  $scope.taggingData.tags.filter(function(el){
                                    return tempTaggingData.indexOf(el) < 0;
                                })
                                $scope.artistTags =  $scope.artistTags.filter(function(el){
                                    return tempArtistTags.indexOf(el) < 0;
                                })
                            }
                            console.log($scope.taggingData.tags);
                            console.log($scope.artistTags);
                        };
                        $scope.changeTemplate = function(tp){
                            sweetAlertConfirm(SweetAlert,function(){
                                $state.go('artistEdit',{tp:tp});
                                sweetAlertCommon(SweetAlert,'操作成功','success');
                            },'warning',undefined,'更换模板将丢失部分数据');
                        };

                        $scope.gotoAnchor = function(id) {
                            // set the location.hash to the id of
                            // the element you wish to scroll to.
                            $location.hash(id);
                            // call $anchorScroll()
                            $anchorScroll();
                        };
                        $scope.uploadImg = function(id){
                            id = $scope.data ? $scope.data.artistId : undefined;
                            uploadImg(id,'artist',$scope,$http,SweetAlert);
                        };
                        $scope.deleteImg = function () {
                            deleteImg($scope,SweetAlert);

                        };
                        $scope.select = function(date){
                            console.log(date);
                        };
                        $scope.inputChange = function (birth) {     //监听生日输入框值变化
                            console.log(birth);
                            if(birth != undefined){
                                if(birth.length == 5){
                                    //var date = formatDate(birth,$filter);
                                    var month = birth.substring(0,2);
                                    var day = birth.substring(3,birth.length);
                                    $scope.data.constellation = (getAstro(month,day) + '座');
                                    // $scope.data.birth = month + '-' + day;
                                    console.log(getAstro(month,day));
                                    // console.log($scope.data.birth);
                                }else{
                                    //var date = formatDate(birth,$filter);
                                    var year = birth.substring(0,4);
                                    var month = birth.substring(5,7);
                                    var day = birth.substring(8,birth.length);
                                    console.log('month'+month);
                                    console.log('day'+day);
                                    if((month.indexOf('_') == -1) && (day.indexOf('_') == -1))  $scope.data.constellation = (getAstro(month,day) + '座');
                                    if(year.indexOf('_') == -1) $scope.data.zodiac = getpet(year,$filter,$http);
                                    // $scope.data.birth = year+ '-'+ month + '-' + day;
                                    // console.log(year+ '--'+ month + '--' + day);
                                    console.log(getpet(year, $filter, $http));
                                    console.log(getAstro(month,day));
                                    // console.log($scope.data.birth);
                                }
                            }
                        };
                        $scope.deathChange = function(date){    //监听逝世日期值变化
                            if(date != undefined){
                                if(date.length == 4){
                                    var month = date.substring(0,2);
                                    var day = date.substring(2,birth.length);
                                    $scope.data.deathdate = month + '-' + day;
                                }else{
                                    var year = date.substring(0,4);
                                    var month = date.substring(4,6);
                                    var day = date.substring(6,birth.length);
                                    $scope.data.deathdate = year+ '-'+ month + '-' + day;
                                }
                            }
                        };
                        $scope.numChange = function(data,property){      //监听身高等值变化
                            if(data != undefined && data.length == 4){
                                var be = data.substring(0,3);
                                var ba = data.substring(3,data.length);
                                $scope.data[property] = be + '.' + ba;
                            }
                        };
                        $scope.deleteSex = function(sex){
                            $scope.data.sex = '';
                            //deleteProperty($scope.data,sex);
                            console.log($scope.data.sex);
                            console.log(sex);
                        };
                        $scope.scoreChange = function(s,property){ //评分变化
                            watchScore(s,property);
                        };
                        loadMoreRecord('artist',$scope,$stateParams,$http,SweetAlert);
                    }]
                }
            }
        })
        .state('artistEdit.preview',{
            'url':'/preview',
            'views':{
                'preview-page':{
                    templateUrl:'app/views/artist/all/artist_info.html',
                    controller:["$scope", function($scope){

                    }]
                }
            }
        })
        .state('app.separate',{
            'url' : '/separate/:type?:id&:lastPage',
            'views' : {
                '':{
                    templateUrl:
                        'app/views/artist/all/separate.html',
                    resolve: helper.resolveFor('oitozero.ngSweetAlert','lightbox2'),
                    controller:'SeparateController'
                }
            }
        })
        .state('artistCheck',{
            'url':'/artistCheck?:tp&:artistId&:taskId&:lastPage',
            'views':{
                '':{
                    templateUrl:'app/views/artist/all/artist-info.html',
                    resolve: helper.resolveFor('oitozero.ngSweetAlert','icons','lightbox2','modernizr'),
                    controller:["$scope", "$stateParams", "$http", "$cookies", "$sce", "SweetAlert", function($scope, $stateParams, $http, $cookies,$sce,SweetAlert){
                        $scope.check = true;
                        $scope.ckTagError = {};
                        $scope.catalogs = [{'name':'概述','id':'catalog-1'},{'name':'基础信息','id':'catalog-2'},{'name':'主要作品','id':'catalog-3'},{'name':'艺人风格','id':'catalog-4'},{'name':'艺人经历','id':'catalog-5'}];
                        getDataInfo('artist',$http,$scope,$sce,$stateParams);//获取数据信息
                        getOpRecord('artist',$stateParams.artistId,1,1,$http,$scope);
                        getCheckRecod('artist',$stateParams.artistId,1,$http,$scope);
                        getExamineList('artist',1,$http,$scope,$stateParams,SweetAlert);
                        //var artistAuditUrl = http_audit+'opinion/artist/' + $stateParams.artistId + '.json?' + CALLBACK;
                        //$http.jsonp(artistAuditUrl).success(function(res2){
                        //    if(res2.status == 1){
                        //        getGitUsers($http, $cookies, $scope, 1, function(){
                        //            $scope.auditDatas = res2.data.list;
                        //            for(var i in $scope.auditDatas){
                        //                for(var p in $scope.gitUsers){
                        //                    if($scope.auditDatas[i].userId == $scope.gitUsers[p].uId){
                        //                        $scope.auditDatas[i].userName = $scope.gitUsers[p].name;
                        //                        //$scope.auditDatas[i].optTime = format($scope.auditDatas[i].optTime,'yyyy-MM-dd');
                        //                    }
                        //                }
                        //            }
                        //        });
                        //    }
                        //});
                        var artistTagUrl = tag_edit_new_query + 'artist/' + $stateParams.artistId + '.json?' + CALLBACK;
                        $http.jsonp(artistTagUrl).success(function(res3){
                            $scope.artistTags = res3.data.tags;
                        });

                        //抽查提交按钮
                        $scope.checkMaterial = function(ckResult, ckSuggest, ckTagError){
                            checkCommon('artist',ckResult,ckSuggest,ckTagError,$http,$stateParams,SweetAlert);
                        };
                        //返回按钮
                        $scope.goBack = function(){ //返回按钮
                            window.open(returnLastPage($stateParams.lastPage), '_self');
                        };
                        loadMoreRecord('artist',$scope,$stateParams,$http,SweetAlert);
                    }]
                }
            }
        })
        .state('material',{
            url: '/material',
            views:{
                '':{
                    templateUrl: helper.basepath('artist/blank.html'),
                    resolve: helper.resolveFor('oitozero.ngSweetAlert','icons','inputmask','lightbox2', 'modernizr')
                }
            }
        })
        .state('material.preArtist',{
            url: '/preArtist',
            views: {
                '': {
                    templateUrl: 'app/views/artist/all/artist-info.html',
                    controller: 'PreDataController'
                }
            }
        })
};
var catalogsArtist = [{'name':'概述','id':'catalog-1'},{'name':'基础信息','id':'catalog-2'},{'name':'主要作品','id':'catalog-3'},{'name':'艺人风格','id':'catalog-4'},{'name':'艺人经历','id':'catalog-5'}];
angular.module('app.routes').controller('artist_chart',["$http", "$scope", function($http,$scope){
    $scope.size_lg = {
        width: 500,
        height: 500
    };
    getChartData();
    function getChartData(){//获取统计图表数据
        var data = {};
        data.tagIds = [1000001672,1000001674,1000001681,1000001682,1000001683,1000001775,1000001783,1000001808,1000001809];
        data.minScore = 3;
        $http.jsonp(charts_artist_tag + '?callback=JSON_CALLBACK&data='+JSON.stringify(data)).success(function(res){
            console.log(res);
            $scope.datas = res.body;
            setConfig($scope,$scope.datas);

            $scope.tag = res.body[0].name;
            var data = {};
            data.tagId = res.body[0].id;
            data.tagIds = _location_tids;
            data.artistSize = 5;
            getData(data);
        });
        //$scope.datas = [{"id":1000001672,"name":"流行","y":925},{"id":1000001681,"name":"爵士","y":171},{"id":1000001682,"name":"电子","y":253},{"id":1000001683,"name":"乡村","y":76},{"id":1000001775,"name":"民谣","y":130},{"id":1000001783,"name":"古典","y":136},{"id":1000001808,"name":"R&B","y":0},{"id":1000001809,"name":"嘻哈","y":0}];
        //setConfig($scope,$scope.datas);
    }
    function getData(data){
        $http.jsonp(charts_artist_data + '?callback=JSON_CALLBACK&data='+JSON.stringify(data)).success(function(res){
            console.log(res);
            $scope.tag_datas = res.body;
            for(var j in $scope.tag_datas){
                for(var i in $scope.tag_datas[j].artists){
                    if($scope.tag_datas[j].artists[i].imgUrl != null && $scope.tag_datas[j].artists[i].imgUrl != undefined){
                        $scope.tag_datas[j].artists[i].imgUrl = $scope.tag_datas[j].artists[i].imgUrl.replace(/http:\/\/218.200.230.40:18089\/files/,'http://218.200.230.40:18089/files/resize');
                    }
                }
            }
            //$scope.datas = $scope.tag_datas;
        });
    }
    function setConfig($scope,data){
        $scope.artistChart = {//抓取总量配置
            options: {
                chart: {
                    type: 'pie'
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            color: '#000000',
                            connectorColor: '#000000',
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %'
                        },
                        point:{
                            events : {
                                click:function($http){
                                    $scope.tag = this.name;
                                    var data = {};
                                    data.tagId = this.id;
                                    data.tagIds = _location_tids;
                                    data.artistSize = 5;
                                    getData(data);
                                    //alert(this.id);
                                }
                            }
                        }
                    }
                }
            },
            series: [{
                type: 'pie',
                name: '艺人所占比例',
                data: data
            }],
            title: {
                text: '优质艺人优质标签统计'
            },
            loading: false,
            useHighStocks: false,
            size:{
                width: 500,
                height: 500
            },
            "credits":{"enabled":false}
        };
        //return $scope.artistChart;
    }

}]);
angular.module('app.routes').controller('SeparateController',["$http", "$scope", "$stateParams", "$timeout", "$rootScope", "display", "$state", "ngDialog", "SweetAlert", function($http,$scope,$stateParams,$timeout,$rootScope,display,$state,ngDialog,SweetAlert){
    $scope.type = $stateParams.type;
    var sites_url = http_url + '/mid2SiteId/all/';
    //var sites_url = 'http://192.168.2.203:17080/mid2SiteId/all/';
    $http.get(SEPARATE_SEARCH + 'karakal/' +$stateParams.type+'/'+$stateParams.id+'.json').success(function(res){
        var param = [];
        var map = [];
        for(var i = 0; i < res.data.length;i++){  //设置获取素材接口参数
            var obj = {};
            obj.id = res.data[i].siteId;
            obj.type = $stateParams.type.toUpperCase();
            obj.site = res.data[i].site.toUpperCase();
            param.push(obj);
            var m = {};
            m.id = res.data[i].siteId;
            m.status =  res.data[i].status;
            map.push(m);
        }
        console.log(param);
        $http.jsonp('http://media.karakal.com.cn:18089/mzk-capture-service/'+'1/extractions.json?jsonParams='+JSON.stringify(param)+'&'+CALLBACK).success(function(res){
            $rootScope.datas = [];
            for(var i = 0; i < res.content.length; i++){
                if(!checkEmpty(res.content[i].data))    $rootScope.datas.push(res.content[i]);
            }
            for(var i = 0;i < $scope.datas.length; i++){
                for(var j = 0; j < map.length; j ++){
                    if($rootScope.datas[i].param.id == map[j].id){
                        $rootScope.datas[i].param.mStatus = map[j].status;
                        if(map[j].status == 1){
                            $rootScope.datas[i].checked = true;
                        }else{
                            $rootScope.datas[i].checked = false;
                        }
                    }
                }
                $rootScope.datas[i].hide =false;
            }
            console.log($rootScope.datas);
        });
    });
    $scope.separateData = function(tp,site,id,name){
        site = site.toLowerCase();
        if(id == $stateParams.id){
            alertTipCommon($timeout,$rootScope,'曲库ID和媒资库ID一致,不允许拆分',display);
            return;
        }
        if($scope.datas.length <= 1){
            alertTipCommon($timeout,$rootScope,'只有一条数据，不能进行此操作',display);
            return;
        }
        $http.jsonp(http_url + '/split/' + tp + '/' + site + '/' + id + '.json?'+CALLBACK).success(function(res){
            if(res.status == 0){
                alertTipCommon($timeout,$rootScope,'拆分失败',display);
            }else{
                alertConfirm('拆分成功',function(){location.reload()},function(){
                    var param = {};
                    param[$stateParams.type+'Keyword'] = name;
                    $state.go($stateParams.type,param);
                },'停留此页面','跳转列表页面');
            }
        });
    };
    $scope.showSiteOnly = function(site){
        for(var i = 0; i < $scope.datas.length; i++){
            if(site == 'ALL'){
                $scope.datas[i].hide = false;
            }else if($scope.datas[i].param.site != site){
                $scope.datas[i].hide = true;
            }else{
                $scope.datas[i].hide = false;
            }
        }
    };
    $scope.dialog = function(){  //抓取
        var dialog = ngDialog.open({
            template: '<div class="ngdialog-message"> <h4 class="mt0">手动抓取</h4> ' +
                '<form class="form-horizontal text-center" name="loginForm"><div class="form-group">' +
            '<label for="param-name" class="col-sm-3 control-label" >URL</label> ' +
            '<div class="col-sm-8"> <input id="param-name" required type="text" placeholder="请输入要抓取的URL地址" class="form-control input-sm" ng-model="url"> </div></div>'+
            '<button type="button" ng-click="catch(url)" class="btn btn-primary" ng-disabled="loginForm.$invalid">确认</button></form></div>',
            plain: true,
            closeByDocument: false,
            closeByEscape: false,
            controller:function($scope){
                $scope.catch = function(url){
                    console.log($stateParams.type);
                    var param = {};param.url =url;
                        //var catch_url = 'http://192.168.2.251:18181/mzk-capture-client/1/captureUrl.json';
                    //var catch_url = 'http://192.168.2.123:18181/mzk-capture-client/1/captureUrl.json';
                    var catch_url = 'http://media.karakal.com.cn:18089/cc217/1/captureUrl.json';
                    //var e_param = encodeURIComponent(JSON.stringify(param));
                    //catch_url = catch_url+JSON.stringify(param)+'&'+CALLBACK;
                    $.post(catch_url,'jsonParams='+encodeURIComponent(JSON.stringify(param))).success(function(res){
                        ngDialog.close();
                        if(res.code == '000000' && res.hasOwnProperty('content')){
                            if(checkEmpty(res.content)){
                                sweetAlertCommon(SweetAlert,'未抓取到数据','warning');
                                return;
                            }
                            var catch_type = res.param.type.substring(0,res.param.type.indexOf('_')).toLowerCase();
                            if(catch_type != $stateParams.type){
                                sweetAlertCommon(SweetAlert,'抓取数据与当前数据类型不一致，请重新抓取','warning');
                                return;
                            }
                            if(checkEmpty($rootScope.datas)){
                                $rootScope.datas = [];
                            }
                            for(var i = 0;i < $rootScope.datas.length;i++){ //判断数据是否存在
                                if(!checkEmpty($rootScope.datas[i].data) && $rootScope.datas[i].data.id == res.content.id){
                                    sweetAlertCommon(SweetAlert,'抓取数据已存在','warning');
                                    return;
                                }
                            }
                            var data = {};
                            data.data= res.content;
                            data.param = res.param;
                            data.isNew = true;
                            data.param.id = res.content.id;
                            $rootScope.datas.push(data);
                            sweetAlertCommon(SweetAlert,res.message,'success');
                        }else{
                            sweetAlertCommon(SweetAlert,res.message,'error');
                        }

                        console.log(res);
                    }).error(function(){
                        sweetAlertCommon(SweetAlert,'抓取请求异常','error');
                    });
                    //ngDialog.close();
                    console.log(url);
                }
            }
        });
    };
    $scope.submit = function(type,datas){       //确认合并关系
        var obj = {};
        obj.type = $stateParams.type;obj.data = [];
        for(var i = 0; i < datas.length; i++){
            var o = {site: datas[i].param.site.toLowerCase(), siteId: datas[i].param.id};
            if(datas[i].hasOwnProperty('isNew')) o.isNew = true;
            if(datas[i].checked){
                o.status = 1;
                if(datas[i].param.id == $stateParams.id) o.target = true;
            }else{
                o.status = -1;
            }
            obj.data.push(o);
        }
        $http(new PostSetup(SEPARATE_CONFIRM, 'data=' + JSON.stringify(obj))).success(function (res) {
            if(res.status == 0) sweetAlertCommon(SweetAlert, res.msg, 'success'),location.reload();
            else sweetAlertCommon(SweetAlert,res.msg,'error');
            console.log(res);
        }).error(function () {
            sweetAlertCommon(SweetAlert, '拆分关系确认接口请求异常', 'error');
        });
        // $http.jsonp(url).success(function(res){
        //     if(res.status == 1){
        //         sweetAlertCommon(SweetAlert,res.msg,'success');
        //         location.reload();
        //     }else{
        //         sweetAlertCommon(SweetAlert,res.msg,'error');
        //     }
        // }).error(function(){
        //     sweetAlertCommon(SweetAlert,'请求异常','error');
        // });
    };
    $scope.back = function(){
        window.open(returnLastPage($stateParams.lastPage),'_self');
    }
}]);
angular.module('app.routes').controller('PreDataController',["BaseService", "$scope", function (BaseService,$scope) {
    $scope.pre = true;
    var preData = JSON.parse(localStorage.getItem('preData'));
    $scope.data = preData[0];
    $scope.artistTags = preData[1];
    $scope.tagExt = preData[2];
    if(checkEmpty($scope.relTags)) $scope.relTags = {};
    var languageTags = JSON.parse(localStorage.getItem('languageTags'));
    if(languageTags)
        $scope.relTags['15'] = languageTags;
    if($scope.data.hasOwnProperty('artistName')) $scope.catalogs = catalogsArtist;
    if($scope.data.hasOwnProperty('albumName')) $scope.catalogs = catalogsAlbum;
    if($scope.data.hasOwnProperty('songName')) $scope.catalogs = catalogs;
    $scope.closeWin = function () { //关闭窗口按钮
        window.close();
    };
    console.log($scope.data);
}]);
angular.module('app.routes').controller('AssignToTaskModal', ["type", "datas", "$scope", "SweetAlert", "$uibModalInstance", "$http", function (type, datas, $scope, SweetAlert, $uibModalInstance, $http) {
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.assign = function () {
        if(!$scope.assign || !$scope.assign.type) return sweetAlertCommon(SweetAlert, '请选择需要添加的工单', 'warning');
        switch($scope.assign.type){
            case '1':
                var _selectedDataIds = getPropertyFromCheckBox(datas, 'isCheck', true, type + 'Id');
                addToCheckTask($http, type, _selectedDataIds, SweetAlert, $uibModalInstance);
                break;
        }
    };
}]);
//地区标签id
var _location_tids = [1002598738,1002598742,1002598740,1000001600,1000001777];
var _neidi = '1002598738';
var _taiwan = '1002598742';
var _hongkong = '1002598740';
var _rihan = '1002598743';
var _oumei = '';

/**
 * 删除一个对象中的不需要的属性，只保留需要的属性
 *
 */
function keepObjectProperty(keepPropertyArr, data){
    var tempData = data;
    //遍历tempData的属性，如果某个属性不在需要保留的属性数组里面，就删除这个属性
    for(var property in tempData){
        if(keepPropertyArr.indexOf(property) == -1){
            delete  tempData[property];
        }else if(tempData[property] instanceof Array){  //如果数组里面的对象为空，则删除该对象
            var tempArr = [];
            for(var i = 0; i < tempData[property].length; i ++){
                if(!checkEmpty(tempData[property][i])){
                    tempArr.push(tempData[property][i]);
                }
            }
            tempData[property] = tempArr;
        }
    }
    return tempData;
}

function editJump($http,type,data,$state,SweetAlert,flag, $stateParams){  //跳转编辑页面
    if(!flag)   flag = '_blank';
    var url = http_url + '/edit/' + type + '/'+ data[type + 'Id'] + '.json';
    if(data.taskId != undefined){
        url += '?taskId=' + data.taskId;
    }
    jQuery.ajax({
        url: url ,
        type: "post",
        async: false,
        timeout: 15000,
        dataType: "jsonp",  // not "json" we'll parse
        jsonp: CALLBACK,
        contentType: "application/jsonp; charset=utf-8",
        success: function(res) {
            if(res.status != 1){
                sweetAlertCommon(SweetAlert,res.msg,'error');
                return;
            } else {
                var param = {};
                param[type+'Id'] = data[type + 'Id'];
                param['auth'] = res.data.auth;
                param['lastPage'] = $stateParams.lastPage ? $stateParams.lastPage : returnLastPageTime();
                if(data.taskId != undefined){
                    param['taskId'] = data.taskId;
                }
                var url = $state.href(type+'Edit',param);
                window.open(url, flag);
                // window.open(url);
            }
        },
        error: function (res) {
            sweetAlertCommon(SweetAlert,'请求异常','error');
        }
    });
}

function addToCheckTask($http, type, ids, SweetAlert, $uibModalInstance){
    if(ids.length == 0) return sweetAlertCommon(SweetAlert,'请选择添加数据','warning');
    var data = {type: type, ids: stringToArray(ids)};
    $http.jsonp(check_sync_add + "?" + CALLBACK + "&data=" + JSON.stringify(data)).success(function(res){
        var message = "成功" + res.successCount + "条,失败" + res.failCount + "条";
        sweetAlertCommon(SweetAlert,message,'success');
        if($uibModalInstance) $uibModalInstance.dismiss('cancel');
    });

}

/**
 * Created by hao.cheng on 2015/12/31.
 * catalog-controller
 */
angular.module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.catalog',{
            url: '/catalog',
            templateUrl: 'app/views/catalog/catalog.html',
            controller: ["$state", "$scope", function($state,$scope){
                $scope.copy = {};
                $scope.clearInput = function(){
                    $scope.copy = {};
                }
            }]
        })
        .state('app.catalog.search',{
            url: '/search?:pageNo&:copyrightId&:projectnameKeyword&:cpArtistKeyword&:cpAlbumKeyword&:songKeyword&:artistKeyword&:albumKeyword&:karakalStatus&:pageSize',
            views:{
                'catalog-list':{
                    templateUrl: 'app/views/catalog/catalog_list.html',
                    controller:["$scope", "$http", "$stateParams", "$state", "SweetAlert", function($scope,$http,$stateParams,$state,SweetAlert){
                        if($stateParams.copyrightId == undefined || $stateParams.copyrightId == null)
                            $stateParams.copyrightId = '';
                        if($stateParams.projectnameKeyword == undefined || $stateParams.projectnameKeyword == null)
                            $stateParams.projectnameKeyword = '';
                        if($stateParams.cpArtistKeyword == undefined || $stateParams.cpArtistKeyword == null)
                            $stateParams.cpArtistKeyword = '';
                        if($stateParams.cpAlbumKeyword == undefined || $stateParams.cpAlbumKeyword == null)
                            $stateParams.cpAlbumKeyword = '';
                        if($stateParams.songKeyword == undefined || $stateParams.songKeyword == null)
                            $stateParams.songKeyword = '';
                        if($stateParams.artistKeyword == undefined || $stateParams.artistKeyword == null)
                            $stateParams.artistKeyword = '';
                        if($stateParams.albumKeyword == undefined || $stateParams.albumKeyword == null)
                            $stateParams.albumKeyword = '';
                        if(checkEmpty($stateParams.karakalStatus)){
                            $stateParams.karakalStatus = '';
                        }
                        var params = {};
                        params.copyrightId = $stateParams.copyrightId,params.projectnameKeyword =$stateParams.projectnameKeyword,
                            params.cpArtistKeyword = $stateParams.cpArtistKeyword,params.cpAlbumKeyword = $stateParams.cpAlbumKeyword,
                            params.songKeyword = $stateParams.songKeyword,params.artistKeyword = $stateParams.artistKeyword,
                            params.albumKeyword =  $stateParams.albumKeyword,params.karakalStatus= $stateParams.karakalStatus,
                            params.pageSize = checkEmpty($stateParams.pageSize)?100:$stateParams.pageSize,params.pageNo= $stateParams.pageNo;
                        for(var p in $stateParams){
                            $scope.copy[p] = $stateParams[p];
                        }
                        $http.jsonp(catalog_seach_all + '?' + CALLBACK + '&data=' + JSON.stringify(params)).success(function(resp){
                            materialListSeparatePage($scope,resp);
                            // paginationCommon($scope,5,resp.body.pageSize,resp.body.totalCount,resp.body.pageTotal,resp.body.pageNo);
                            var ids = [];
                            for(var i = 0; i < resp.body.list.length; i ++){
                                ids.push(resp.body.list[i].copyrightId);
                            }
                            if(ids.length < 1){
                                sweetAlertCommon(SweetAlert,'暂无数据','warning');
                                return;
                            }
                            $http.jsonp(catalog_search + '?callback=JSON_CALLBACK' +'&ids=' + ids.join(',')).success(function(res){
                                //paginationCommon($scope,5,resp.body.pageSize,resp.body.totalCount,resp.body.pageTotal,resp.body.pageNo);
                                $scope.datas = res.data;
                            });
                        });
                        $scope.choosePage = function(){//分页
                            $state.go('catalog.search',{pageNo: $scope.bigCurrentPage});
                        }
                    }]
                }
            }
        })
        .state('app.catalog.info',{
            url: '/info/:copyId',
            views:{
                'catalog-page':{
                    templateUrl: 'app/views/catalog/catalog_info.html',
                    controller:["$scope", "$http", "$stateParams", "SweetAlert", function($scope,$http,$stateParams,SweetAlert){
                        var copy_url = catalog_copy_zqsc + '?copyrightId=' + $stateParams.copyId;
                        $scope.info = {};
                        $scope.info.zqs = [],$scope.info.cl = [],$scope.info.mv = [];
                        //获取所有产品数据彩振全随mv等
                        $http.get(copy_url).success(function(res){
                            $scope.info.fullMusicList = res.body.fullMusicList; //全曲
                            $scope.info.colorRingList = res.body.colorRingList; //彩铃
                            $scope.info.callRingList = res.body.callRingList;   //振铃
                            $scope.info.walkmanList = res.body.walkmanList;   //随身听
                            $scope.info.mvList = res.body.mvList;   //mv
                            $scope.info.losslessList = res.body.losslessList;   //无损
                            $scope.info.dalbumList = res.body.dalbumList;       //数字专辑
                        });
                        //获取已编目的歌曲详情
                        $http.jsonp(catalog_info+$stateParams.copyId + '.json?'+CALLBACK).success(function(res){
                            $scope.info = concatObj(res.data, $scope.info);
                            if(res.data.songId){
                                $http.jsonp(detail_url+'song/'+res.data.songId+'.json?callback=JSON_CALLBACK').success(function(resp){
                                    $scope.detail = resp.data;
                                });
                            }
                            if(res.data.albumId){
                                $http.jsonp(detail_url+'album/'+res.data.albumId+'.json?callback=JSON_CALLBACK').success(function(resp){
                                    $scope.detail = resp.data;
                                });
                            }
                        });
                        $scope.firstIndex = 0;
                        $scope.info_search = function(song,type){//搜索按钮搜索
                            getData(song,type);
                        };
                        $scope.choosePage = function(){//分页
                            $scope.song.pageNo = $scope.bigCurrentPage;
                            $scope.info_search($scope.song);
                        };
                        $scope.addPlaySong = function(songId,copyId){//歌曲播放
                            addPlaySong(songId,SweetAlert, [],copyId.split(','), 0);
                        };
                        $scope.addPlaySong_Catalog = function(copyId,type){//版权信息播放
                            addPlaySong_Catalog(copyId,type,SweetAlert);
                        };
                        $scope.chk = function(data,datas){//单选事件
                            radioBtnChk(data,datas);
                            $scope.catalogInfo = data;
                        };
                        $scope.goBack = function(){//返回
                            history.back();
                        };
                        $scope.update = function(copyId,songId,urge,copyType){
                            if(copyId == undefined ){
                                return sweetAlertCommon(SweetAlert,'无版权信息','warning');
                            }
                            if(songId == undefined){
                                sweetAlertCommon(SweetAlert,'请选择编目的数据','warning');
                                return;
                            }
                            var url = catalog_update + copyId + '/' + songId + '.json?' + CALLBACK +'&copyrightType='+copyType;
                            if(!checkEmpty(urge)){
                                url = url +  '&urge=' + urge;
                            }
                            $http.jsonp(url).success(function(res){
                                if(res.status == 1){
                                    return sweetAlertCommon(SweetAlert, res.msg, 'success'),history.back();
                                }else{
                                    sweetAlertCommon(SweetAlert,'编目失败','error');
                                }
                            });
                        };
                        $scope.catalogPass = function(copyId,type){
                            var pass = '';
                            if(type == 1){
                                pass = 10;
                            }else if(type == 0){
                                pass = 111;
                            }
                            $http.jsonp(catalog_check + copyId + '/' + pass + '.json?' + CALLBACK).success(function(res){
                                if(res.status == 1){
                                    sweetAlertCommon(SweetAlert,'操作成功','success');
                                }else{
                                    sweetAlertCommon(SweetAlert,'操作失败','error');
                                }
                            });
                        };
                        function getData(song,type){//通过歌曲信息获取列表
                            song.status = 10;
                            $http.jsonp(_search_url + 'search/'+type+'.json'+'?callback=JSON_CALLBACK&data='+JSON.stringify(song)).success(function(res){
                                // materialListSeparatePage($scope,res);
                                paginationCommon($scope,5,20,res.body.totalCount,res.body.pageTotal,res.body.pageNo);//分页
                                if(res.body.list.length < 1){   //如果没有数据，则返回
                                    $scope.datas = [];
                                    return;
                                }
                                var ids = [];
                                for(var i in res.body.list){
                                    if(res.body.list[i].songId) ids.push(res.body.list[i].songId);
                                    if(res.body.list[i].albumId) ids.push(res.body.list[i].albumId);
                                }
                                $http.jsonp(list_url + type + '.json?callback=JSON_CALLBACK&ids='+ids.join(',')).success(function(res){
                                    $scope.datas = res.data;
                                    console.log(res);
                                });
                            });
                        }
                    }]
                }
            }
        })
}]);
function paginationCommon($scope,maxSize,itemsPerPage,bigTotalItems,totalPage,bigCurrentPage){  //分页公共方法
    $scope.maxSize = maxSize;
        $scope.itemsPerPage = itemsPerPage;
        $scope.bigCurrentPage = bigCurrentPage;
        $scope.bigTotalItems = bigTotalItems;
        $scope.totalPage = totalPage;
}
function radioBtnChk(data,datas){   //单选框选中
    for(var i in datas){
        datas[i].isCheck = false;
    }
    data.isCheck = true;
}
/**
 * Created by hao.cheng on 2016/6/24.
 * 统一获取编目记录列表service
 */
(function () {
    'use strict';

    angular.module('app.routes').service('CatalogService',CatalogService);

    CatalogService.$inject = ['$http', 'SweetAlert'];

    function CatalogService($http) {
        var _self = this;
        _self.service = {
            'getCatalogs' : getCatalogs,                //获取编目列表
            'createCatalogPre': createCatalogPre,       //创建编目数据
            'getCatalogPre': getCatalogPre,             //获取预编目ID
            'createCatalogTask': createCatalogTask      //创建编目工单未分配任务
        };
        
        function getCatalogs(songId) { //获取编目列表
            
            return $http.jsonp(catalog_list+'?songId='+songId+'&pageNo=1&pageSize=500&'+CALLBACK).then(function (res) {
                return res.data.data.list;
            });
        }
        function createCatalogPre(copyId,songId) {
            return $http.jsonp(CATALOG_CREATE + '?' + CALLBACK + '&copyrightId=' + copyId + '&songId=' + songId).then(function (res) {
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert, '创建编目接口请求异常', 'warning');
            });
        }
        function getCatalogPre(songId) {
            return $http.jsonp(CATALOG_GETPRE + songId + '.json?' + CALLBACK).then(function (res) {
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert, '获取预编目ID接口请求异常', 'warning');
            });
        }
        function createCatalogTask(startTime, endTime) {
            return $http.get(CATALOG_CREATETASK + '?startTime=' + startTime + '&endTime=' + endTime).then(function (res) {
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '创建编目工单任务接口请求异常', 'warning');
            })
        }
    }
})();
/**
 * Created by hao.cheng on 2015/12/3.
 * catch_controller
 */
(function () {
    'use strict';
    angular.module('app.routes').config(CatchConfig);
    CatchConfig.$inject = ['$stateProvider'];
    function CatchConfig($stateProvider){
        $stateProvider
            .state('app.charts',{
                url: '/charts',
                templateUrl: 'app/views/charts/charts.html'
            })
            .state('app.charts.catch',{
                url: '/catch',
                views: {
                    'catch_view' : {
                        templateUrl: 'app/views/charts/catch_charts/catch_charts.html',
                        controller: function(){

                        }
                    }
                }
            })
    }
    angular.module('app.routes').controller('catch_chart',["$scope", "$http", "$timeout", function($scope,$http,$timeout){
        //$timeout(monitor,2000);
        monitor();
        setInterval(function(){
            monitor();
        },30000);
        function monitor(){
            $http.jsonp(charts_catch_monitor + '?callback=JSON_CALLBACK').success(function(res){
                $scope.monitor_data = res.body.statData;
                var currentSite = res.body.currentSite.name;
                var activeThreadNum = res.body.activeThreadNum;
                $scope.monitor_name = [];
                $scope.monitor_success = [];
                $scope.monitor_fail = [];
                for(var i = 0; i < $scope.monitor_data.length; i++){
                    $scope.monitor_name.push($scope.monitor_data[i].name);
                    $scope.monitor_success.push($scope.monitor_data[i].success);
                    $scope.monitor_fail.push($scope.monitor_data[i].fail);
                }
                $scope.chartConfig = {//抓取监控配置
                    options: {
                        chart: {
                            type: 'bar'
                        },
                        tooltip: {
                            style: $scope.style
                        },
                        plotOptions: {
                            bar: {
                                stacking: '',
                                dataLabels: $scope.dataLabels
                            }
                        }
                    },
                    series: [{
                        name: '失败',
                        data: $scope.monitor_fail,
                        color: '#E27B6A'
                    },{
                        name: '成功',
                        data: $scope.monitor_success,
                        color: '#008000'
                    }],
                    title: {
                        text: '抓取实时监控'
                    },
                    subtitle:{
                        text: '当前抓取线程数 '+activeThreadNum+'  当前抓取站点 ' +currentSite + '每30秒更新一次'
                    },
                    loading: false,
                    xAxis: {
                        lineWidth: 1,
                        tickWidth: 5,
                        categories: $scope.monitor_name,
                        title: {
                            align: 'high',
                            offset: 0,
                            text: '状态(次)',
                            rotation: 0,
                            y: -10
                        }
                    },
                    useHighStocks: false,
                    size: $scope.size_lg,
                    "credits":{"enabled":false}
                };
                console.log(res);
            });
        }
        $scope.style = {
            padding: 10,
            fontWeight: 'bold'
        };
        $scope.dataLabels = {
            enabled: true,
            color: '#fffff',
            style: {
                //textShadow: '0 0 3px black'
            }
        };
        $scope.size_lg = {
            width: 1050,
            height: 500
        };
        $scope.size_sm = {
            width: 500,
            height: 500
        };
        $http.jsonp(charts_catch_all + '?callback=JSON_CALLBACK').success(function(res){
            $scope.data_all = res.body;
            $scope.data_artist = [];
            $scope.data_album = [];
            $scope.data_song = [];
            $scope.data_song_form = [];
            for(var i = 0; i < $scope.data_all.length; i ++){//循环设置每个图标的数据
                var obj = {};
                obj.data = [];
                obj.name = $scope.data_all[i].name;
                obj.data.push($scope.data_all[i].data[0]);
                $scope.data_artist.push(obj);
                var obj = {};
                obj.data = [];
                obj.name = $scope.data_all[i].name;
                obj.data.push($scope.data_all[i].data[1]);
                $scope.data_album.push(obj);
                var obj = {};
                obj.data = [];
                obj.name = $scope.data_all[i].name;
                obj.data.push($scope.data_all[i].data[2]);
                $scope.data_song.push(obj);
                var obj = {};
                obj.data = [];
                obj.name = $scope.data_all[i].name;
                obj.data.push($scope.data_all[i].data[3]);
                $scope.data_song_form.push(obj);

            }
            console.log($scope.data_artist);
            $scope.chartConfig_artist = setConfig($scope.data_artist,$scope,'艺人总量');   //艺人总量统计配置
            $scope.chartConfig_album = setConfig($scope.data_album,$scope,'专辑总量');   //专辑总量统计配置
            $scope.chartConfig_song = setConfig($scope.data_song,$scope,'歌曲总量');     //歌曲总量统计配置
            $scope.chartConfig_song_form = setConfig($scope.data_song_form,$scope,'歌单总量');       //歌单总量统计配置
            function setConfig(data,$scope,type){
                return $scope.config = {//抓取总量配置
                    options: {
                        chart: {
                            type: 'column'
                        },
                        tooltip: {
                            style: $scope.style
                        },
                        plotOptions: {
                            column: {
                                stacking: '',
                                dataLabels: $scope.dataLabels
                            }
                        }
                    },
                    series: data,
                    title: {
                        text: '抓取'+type+'统计'
                    },
                    subtitle:{
                        text: ''
                    },
                    loading: false,
                    xAxis: {
                        categories: [type]
                    },
                    yAxis: {
                        lineWidth: 1,
                        tickWidth: 1,
                        title: {
                            align: 'high',
                            offset: 0,
                            text: '数据总量 (条)',
                            rotation: 0,
                            y: -10
                        }
                    },
                    useHighStocks: false,
                    size:$scope.size_sm,
                    "credits":{"enabled":false}
                };
            }
        });
        //实时刷新请求监控
        var y_before,z_before;
        $('#chartConfig_monitor_new').highcharts({
            chart: {
                type: 'spline',
                //animation: Highcharts.svg, // don't animate in old IE
                marginRight: 10,
                events: {
                    load: function() {
                        // set up the updating of the chart each second
                        var series = this.series[0];
                        var series2 = this.series[1];
                        setInterval(function() {
                            $http.jsonp(charts_catch_monitor_all + '?callback=JSON_CALLBACK').success(function(res){
                                if(y_before == '' || y_before == undefined){
                                    y_before = res.body.successTotal;
                                }
                                if(z_before == '' || z_before == undefined){
                                    z_before == res.body.failTotal;
                                }
                                var x = (new Date()).getTime() + 8*60*60*1000, // current time
                                    y = res.body.successTotal - y_before,
                                    z = res.body.failTotal - z_before;
                                y_before = res.body.successTotal;
                                z_before = res.body.failTotal;

                                series.addPoint([x, y], true, true);
                                series.name = '成功总数';
                                series2.addPoint([x,z],true,true);
                                series2.name = '失败总数';
                            });
                        }, 3000);
                    }
                }
            },
            plotOptions: {
                spline: {
                    stacking: '',
                    dataLabels: {
                        enabled: true,
                        color: '#fffff',
                        style: {
                            //textShadow: '0 0 3px black'
                        }
                    }
                }
            },
            title: {
                text: '续点监控抓取状态增量图--每三秒请求一次'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 50
            },
            yAxis: {
                title: {
                    text: '增量总数'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function() {
                    return '<b>'+ this.series.name +'</b><br/>'+
                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) +'<br/>'+
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: false
            },
            exporting: {
                enabled: false
            },
            size:{
                width: 1050,
                height: 500
            },
            credits:{"enabled":false},
            series: [{
                name: '失败总数',
                color: '#008000',
                data: (setInit)()
            },{
                name: '成功总数',
                color: '#E27B6A',
                data: (setInit)()
            }]
        });
        function setInit(){ //初始化图标
            // generate an array of random data
            var data = [],
                time = (new Date()).getTime() + 8*60*60*1000,
                i;
            console.log(time);
            for (i = -10; i <= 0; i++) {
                data.push({
                    x: time + i * 3000,
                    y: 0
                });
            }
            return data;
        }
    }]);
})();
/**
 * Created by hao.cheng on 2016/1/7.
 * comment_controller
 */
var arr_type = ['album','song','playlist'];
var hide_ids = [];
angular.module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.comment',{
            url: '/comment/:type',
            templateUrl: 'app/views/comment/comment.html',
            controller:["$http", "$scope", "$stateParams", "$state", function($http,$scope,$stateParams,$state){
                $scope.type = {};
                $scope.data = {};
                $scope.info = '';
                var arr = ['专辑','歌曲','歌单'];
                $scope.type.name = arr[$stateParams.type];
                $scope.type.num = $stateParams.type;
                $scope.search = function(no){
                    $state.go('app.comment.search',{no:no});
                }
                $scope.export = function(){
                    window.open(comment_export + arr_type[$stateParams.type] + '.do');
                }
            }]
        })
        .state('app.comment.search',{
            url: '/search?:name&:album&:artist&:no&:len&:pageNo&:pageSize',
            views:{
                'comment-saved-list':{
                    templateUrl: 'app/views/comment/comment-saved-list.html',
                    controller:["$http", "$scope", "$stateParams", "display", "$rootScope", "$timeout", "SweetAlert", function($http,$scope,$stateParams,display,$rootScope,$timeout,SweetAlert){
                        //console.log($stateParams.name);
                        var url = comment_song_excelid + arr_type[$stateParams.type] + '.json?callback=JSON_CALLBACK';
                        if($stateParams.no != undefined && $stateParams.no != null && $stateParams.no != ''){
                            url += '&no=' + $stateParams.no;
                        } else {
                            return;
                        }
                        $http.jsonp(url).success(function(res){
                            $scope.info = res.data.list[0];
                            //console.log($scope.info);
                            var id = res.data.list[0].id;
                            $http.jsonp(comment_saved_list + arr_type[$stateParams.type] + '/' + id + '.json?callback=JSON_CALLBACK').success(function(resp){
                                hide_ids = [];
                                $scope.saved_datas = resp.data.list;
                                for(var i in $scope.saved_datas){
                                    for(var p in $scope.saved_datas[i]){
                                        if(p == 'sourceId'){
                                            hide_ids.push($scope.saved_datas[i][p]);
                                        }
                                    }
                                }
                                //console.log(hide_ids);
                            });
                        });
                        $scope.addPlaySong = function(songId,copyId){//歌曲播放
                            if(!copyId) return sweetAlertCommon(SweetAlert, '暂无试听版权', 'warning');
                            addPlaySong(songId, SweetAlert, [], copyId.split(','), 0)
                        };
                        $scope.saveComment = function(data,content,n){//保存评论
                            //console.log(content);
                            if(content == '' || content == undefined){
                                sweetAlertCommon(SweetAlert,'评论不能为空','warning');
                                //alert('评论不能为空');
                                return;
                            }
                            if(content != undefined && content != null && content != '' && content.trim() != '{{data.content}}'){
                                data.content = content;
                            }
                            var param = data;
                            param.status = 0;
                            //alertTooltip(true,$rootScope,'操作进行中...',display);//操作进行中提示
                            $.post(comment_save + arr_type[$stateParams.type] + '.json','data='+encodeURIComponent(JSON.stringify(param))).success(function(res){
                                if(res.status == 1){
                                    data.status = 0;
                                    n.isSaved = true;
                                    sweetAlertCommon(SweetAlert,res.msg,'success');
                                }else{
                                    sweetAlertCommon(SweetAlert,res.msg,'error');
                                }
                            });
                            //$http.jsonp(comment_save + arr_type[$stateParams.type] + '.json?'+CALLBACK+'&data='+JSON.stringify(data)).success(function(res){
                            //    alertCommon(res,'保存');
                            //    n.isSaved = true;
                            //    console.log(res);
                            //});
                        }
                        $scope.deleteComment = function(data){//删除评论
                            data.status = -1;
                            $http.jsonp(comment_save + arr_type[$stateParams.type] + '.json?'+CALLBACK+'&data='+encodeURIComponent(JSON.stringify(data))).success(function(res){
                                if(res.status != 1){
                                    data.status = 0;
                                    sweetAlertCommon(SweetAlert,res.msg,'error');
                                }else{
                                    sweetAlertCommon(SweetAlert,res.msg,'success');
                                }
                                //alertCommon(res,'取消');
                            });
                        }
                        $scope.newComments = [];
                        $scope.addComment =function(){
                            var obj = {};
                            $scope.newComments.push(obj);
                            $scope.newData = {};
                            $scope.newData.relId = $scope.info.id;
                            $scope.newData.isSaved = false;
                        }
                    }]
                },
                'comment-list':{
                    templateUrl: 'app/views/comment/comment-list.html',
                    controller:["$scope", "$http", "$stateParams", "$state", "$timeout", "$rootScope", "display", "SweetAlert", function($scope,$http,$stateParams,$state,$timeout,$rootScope,display,SweetAlert){
                        if($stateParams.len == undefined || $stateParams.len == ''){
                            $stateParams.len = 50;
                        }
                        var t = arr_type[$stateParams.type];
                        var url = comment_song_excelid + arr_type[$stateParams.type] + '.json?callback=JSON_CALLBACK';
                        if($stateParams.no != undefined && $stateParams.no != null && $stateParams.no != ''){
                            url += '&no=' + $stateParams.no;
                        } else {
                            return;
                        }

                        if(checkEmpty($stateParams.pageNo)) $stateParams.pageNo = 1;
                        if(checkEmpty($stateParams.pageSize)) $stateParams.pageSize = 100;
                        function getSourceComment(data){//获取源网站评论数据
                            $http(new PostSetup(MDPFACE_URL + arr_type[$stateParams.type] + '/comments.json', 'data=' + data)).success(function (res) {
                                $scope.comment_all = res.body.list;
                                $http(new PostSetup(MDPFACE_URL + arr_type[$stateParams.type] + '/comment/count.json', 'data=' + data)).success(function (res2) {
                                    $scope.comment_all.totalCount = res2.body;
                                    paginationDiscreteness($scope,5,res.body.pageSize,res2.body, Math.ceil(res2.body / res.body.pageSize),res.body.pageNo);
                                });
                                console.log(res);
                            }).error(function (res) {
                                sweetAlertCommon(SweetAlert, '抓取评论查询接口请求异常');
                            });
                            // $http.jsonp(comment_all + site + '/' + t + '.json?callback=JSON_CALLBACK&relIds=' + siteIds[site].join(',') + '&contentMinLen=' + $stateParams.len + '&pageNo=' + $stateParams.pageNo + '&pageSize=' + $stateParams.pageSize + '&excIds=' + hide_ids.join(',')).success(function (resp) {
                            //     $scope.comment_all = resp.body.list;
                            //     $scope.comment_all.site = site;
                            //     $http.jsonp(comment_all_count + site + '/' + t + '.json?callback=JSON_CALLBACK&relIds=' + siteIds[site].join(',') + '&contentMinLen=' + $stateParams.len + '&excIds=' + hide_ids.join(',')).success(function (resps) {
                            //         $scope.comment_all.totalCount = resps.body;
                            //         paginationDiscreteness($scope,5,resp.body.pageSize,resps.body, Math.ceil(resps.body / resp.body.pageSize),resp.body.pageNo);
                            //         // paginationCommon($scope, 5, resp.body.pageSize, resps.body, Math.ceil(resps.body / resp.body.pageSize), resp.body.pageNo);
                            //     });
                            // });
                        }
                        $http.jsonp(url).success(function(res){
                            $scope.info = res.data.list[0];
                            $scope.siteIds = res.data.list[0].siteIds;
                                var id = res.data.list[0].id;
                            $scope.sites = [];
                            for(var p in $scope.siteIds){ //循环设置网站类型
                                $scope.sites.push(p);
                            }
                            if($stateParams.site == undefined || $stateParams.site == ''){
                                $scope.site = $scope.sites[0];
                            }else{
                                $scope.site = $stateParams.site;
                            }

                            $http.jsonp(comment_saved_list + arr_type[$stateParams.type] + '/' + id + '.json?callback=JSON_CALLBACK').success(function(resp){//获取隐藏的ID后再调用list接口
                                hide_ids = [];
                                $scope.saved_datas = resp.data.list;
                                for(var i in $scope.saved_datas){
                                    for(var p in $scope.saved_datas[i]){
                                        if(p == 'sourceId'){
                                            hide_ids.push($scope.saved_datas[i][p]);
                                        }
                                    }
                                }
                                var data = {site: 'xiami', excIds: hide_ids, pageSize: $stateParams.pageSize, pageNo: $stateParams.pageNo};
                                data[arr_type[$stateParams.type] + 'Name'] = $scope.info[arr_type[$stateParams.type] + 'Name'];
                                data['artistName'] = $scope.info['artistName'];
                                getSourceComment(encodeURIComponent(JSON.stringify(data)));
                            });
                        });
                        $scope.choosePage = function(){//分页
                            $state.go('app.comment.search',{pageNo: $scope.bigCurrentPage,len:$stateParams.len,name:$stateParams.name,no:$stateParams.no,site:$scope.site});
                        }
                        $scope.chooseSite = function(site){//选择源网站进行评论展示
                            getSourceComment(site,hide_ids,$scope.siteIds);
                            //console.log(site);
                        }
                        $scope.saveComment = function(data,id,site,content){//保存评论
                            //console.log(data);
                            var param = {};
                            content = content.trim();
                            //console.log(content);
                            if(content == '' || content == undefined){
                                sweetAlertCommon(SweetAlert,'评论不能为空','warning');
                                //alert('评论不能为空');
                                return;
                            }
                            if(content == undefined || content == null || content == '' || content == "{{data.content}}"){
                                param.content = data.content;
                            }else{
                                param.content = content;
                            }
                            param.relId = id;
                            param.sourceId = data.id;
                            param.sourceSite = site;
                            param.sourceAgreeNum = data.agreeNum;
                            param.sourceDisagreeNum = data.disagreeNum;
                            //alertTooltip(true,$rootScope,'操作进行中...',display);//操作进行中提示
                            $.post(comment_save + arr_type[$stateParams.type] + '.json','data='+encodeURIComponent(JSON.stringify(param))).success(function(res){
                                if(res.status == 1){
                                    sweetAlertCommon(SweetAlert,res.msg,'success');
                                }else{
                                    sweetAlertCommon(SweetAlert,res.msg,'error');
                                }
                            });
                        }
                    }]
                }
            }
        })
}]);
function paginationCommon($scope,maxSize,itemsPerPage,bigTotalItems,totalPage,bigCurrentPage){  //分页公共方法
    $scope.maxSize = maxSize;
    $scope.itemsPerPage = itemsPerPage;
    $scope.bigCurrentPage = bigCurrentPage;
    $scope.bigTotalItems = bigTotalItems;
    $scope.totalPage = totalPage;
}
function alertCommon(res,str){//统一状态返回提示
    if(res.status == 1){
        alert(str + '成功');
    }else{
        alert(str + '失败');
    }
}

/**
 * Created by hao.cheng on 2016/8/29.
 */
(function () {
    'use strict';

    function Directive(template, controller, link) {    //指定公共类
        this.restrict = 'EAC';
        this.replace = true;
        this.controllerAs = 'vm';
        if(template) this.template = template;
        if(controller) this.controller = controller;
        if(link) this.link = link;
    }
    function DirectiveCommonMethod($state) {
        this.goState = function (stateName, param, flag) {
            param.lastPage = returnLastPageTime();
            var _url = $state.href(stateName, param, {inherit: false});
            window.open(_url, flag);
        }
    }
    function tdDirectiveService(template) {   //提取表格自定义指令通用业务方法
        var _controller = function ($state) {
            DirectiveCommonMethod.call(this, $state);
        };
        return new Directive(template, _controller, null);
    }
    angular.module('app.routes').directive('tdArtist', function () {    //自定义表格艺人a标签指令 2016-8-29 16:58:22
        var _template = '<a ng-click="vm.goState(\'artistInfo\', {artistId: data.artistId}, \'_self\');" ng-right-click="vm.goState(\'artistInfo\',{artistId: data.artistId}, \'_blank\');">{{data.artistName}}</a>';
        return tdDirectiveService(_template);
    });
    angular.module('app.routes').directive('tdAlbum', function () {     //自定义表格专辑a标签指令 2016-8-30 10:36:05
        var _template = '<a ng-click="vm.goState(\'albumInfo\', {albumId: data.albumId}, \'_self\');" ng-right-click="vm.goState(\'albumInfo\',{albumId: data.albumId}, \'_blank\');">{{data.albumName}}</a>';
        return tdDirectiveService(_template);
    });
    angular.module('app.routes').directive('tdSong', function () {     //自定义表格歌曲a标签指令 2016-8-30 10:36:05
        var _template = '<a ng-click="vm.goState(\'songInfo\', {songId: data.songId}, \'_self\');" ng-right-click="vm.goState(\'songInfo\', {songId: data.songId}, \'_blank\');">{{data.songName}}</a>';
        return tdDirectiveService(_template);
    });
    angular.module('app.routes').directive('tdArtistSearch', function () {     //自定义表格搜索a标签指令 2016-8-30 11:20:40
        var _template = '<a ng-click="vm.goState(\'app.artist\', {artistKeyword:data.artistName}, \'_self\');" ng-right-click="vm.goState(\'app.artist\', {artistKeyword:data.artistName}, \'_blank\');">【搜】</a>';
        return tdDirectiveService(_template);
    });
    angular.module('app.routes').directive('tdAlbumSearch', function () {       //自定义表格搜索a标签指令 2016-8-30 13:05:06
        var _template = '<a ng-click="vm.goState(\'app.album\', {albumKeyword:data.albumName,artistKeyword:data.artists[0].artistName}, \'_self\');" ng-right-click="vm.goState(\'app.album\', {albumKeyword:data.albumName,artistKeyword:data.artists[0].artistName}, \'_blank\');">【搜】</a>';
        return tdDirectiveService(_template);
    });
    angular.module('app.routes').directive('tdSongSearch', function () {        //自定义表格搜索a标签指令 2016-8-30 13:17:29
        var _template = '<a ng-click="vm.goState(\'app.song\', {songKeyword:data.songName,artistKeyword:data.artists[0].artistName}, \'_self\');" ng-right-click="vm.goState(\'app.song\', {songKeyword:data.songName,artistKeyword:data.artists[0].artistName}, \'_blank\');">【搜】</a>';
        return tdDirectiveService(_template);
    });
    angular.module('app.routes').directive('tdArtists', function () {       //自定义所属多个艺人的表格指令 2016-8-30 13:58:43
        var _template = '<a ng-repeat="artist in data.artists track by $index" ng-click="vm.goState(\'artistInfo\', {artistId: artist.artistId}, \'_self\');" ' +
            'ng-right-click="vm.goState(\'artistInfo\',{artistId: artist.artistId}, \'_blank\');">{{artist.artistName}}<span ng-if="!$last">、</span></a>';
        return tdDirectiveService(_template);
    });
    angular.module('app.routes').directive('tdAlbums', function () {        //自定义所属多个专辑的表格指令 2016-8-30 13:59:05
        var _template = '<a ng-repeat="album in data.albums track by $index" ng-click="vm.goState(\'albumInfo\', {albumId: album.albumId}, \'_self\');" ' +
            'ng-right-click="vm.goState(\'albumInfo\',{albumId: album.albumId}, \'_blank\');">{{album.albumName}}<span ng-if="!$last">、</span></a>';
        return tdDirectiveService(_template);
    });
    angular.module('app.routes').directive('tdCatalog', function () {       //自定义表格编目按钮指令 2016-8-30 14:41:20
        var _template = '<span><span ng-if="data.karakalStatus == 11 "> <a ng-click="vm.goState(\'app.catalog.info\', {copyId:data.copyrightId,karakalStatus:data.karakalStatus}, \'_self\');" ng-right-click="vm.goState(\'app.catalog.info\',{copyId:data.copyrightId,karakalStatus:data.karakalStatus}, \'_blank\');">编目</a> </span> ' +
            '<span ng-if="data.karakalStatus == 10"> <a ng-click="vm.goState(\'app.catalog.info\', {copyId:data.copyrightId,karakalStatus:data.karakalStatus}, \'_self\');" ng-right-click="vm.goState(\'app.catalog.info\',{copyId:data.copyrightId,karakalStatus:data.karakalStatus}, \'_blank\');">重新编目</a> </span></span>';
        return tdDirectiveService(_template);
    })
})();

/**
 * Created by YuChunzhuo on 2015/12/22.
 */
angular.module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.jtsongForm',{
            url:'/jtsongForm',
            cache:'false',
            templateUrl:'app/views/jiutian_song_form/jt_song_form.html',
            controller: ["$scope", "$http", function($scope,$http){
                //console.log('test');
            }]
        })
        .state('app.jtsongForm.main', {
            url: '/main?:index&:searchName',
            cache:'false',
            views: {
                'form-content': {
                    templateUrl: 'app/views/jiutian_song_form/jt_song_form_main.html',
                    controller: ["$scope", "$http", "$state", "$stateParams", function ($scope, $http, $state, $stateParams) {
                        console.log($stateParams.index);
                        var jtsongLists = [];
                        var jturl = 'http://temp.karakal.com.cn:18089/revcpx/t/pl/ls.json?callback=JSON_CALLBACK';
                        //$scope.jtcurrentPage = 1;
                        $scope.index = parseInt($stateParams.index);
                        if($stateParams.searchName != undefined && $stateParams.searchName != null && $stateParams.searchName != ""){
                            jturl += ("&name=" + $stateParams.searchName);
                        }
                        if($stateParams.index != undefined && $stateParams.index != null && $stateParams.index != ""){
                            jturl += ("&firstIndex=" + $stateParams.index);
                        }
                        console.log(jturl);
                        $http.jsonp(jturl).success(function(res){
                            if(res.status == "1"){
                                for(var i = 0; i < res.data.resultlist.length; i++){
                                    jtPushData(res.data.resultlist[i], jtsongLists);
                                }
                                if(res.data.firstIndex < 20){
                                    $scope.prePage = true;
                                } else {
                                    $scope.prePage = false;
                                }
                                if(res.data.totalrecord < ($scope.index + 20)){
                                    $scope.nextPage = true;
                                } else {
                                    $scope.nextPage = false;
                                }
                                //分页显示
                                $scope.jtmaxSize = 5;
                                $scope.jtitemsPerPage = res.data.maxResult;
                                $scope.jtcurrentPage = res.data.firstIndex / res.data.maxResult + 1;
                                $scope.jttotalItems = res.data.totalrecord;
                                //console.log('设置分页完成');
                                //console.log('当前页:' + $scope.jtcurrentPage);
                                //console.log('每页这么多个' + $scope.jtitemsPerPage);
                                //console.log('总共这么多个' + $scope.jttotalItems);
                                //console.log('最大页码' + $scope.jtmaxSize);
                            }
                        });
                        $scope.jiutian = jtsongLists;

                        //监听键盘按钮事件
                        $scope.enter = function(event, searchName){
                            if(event.keyCode == 13){
                                console.log(searchName);
                                $state.go('app.jtsongForm.main',{searchName:searchName,index:0});
                                //console.log("进入了回车事件");
                            }
                        };
                        //分页函数
                        $scope.jtchoosePage = function(){
                            console.log('当前页:' + $scope.jtcurrentPage);
                            //console.log('每页这么多个' + $scope.jtitemsPerPage);
                            //console.log('总共这么多个' + $scope.jttotalItems);
                            //console.log('最大页码' + $scope.jtmaxSize);
                            $state.go('app.jtsongForm.main',{index:(($scope.jtcurrentPage - 1) * $scope.jtitemsPerPage)});
                        };
                    }]
                }
            }
        })
        .state('app.jtsongForm.detail', {
            url: '/detail?:id',
            cache:'false',
            views: {
                'form-content': {
                    templateUrl: 'app/views/jiutian_song_form/jt_song_form_detail.html',
                    controller:["$scope", "$http", "$stateParams", function($scope,$http,$stateParams){
                        $http.jsonp("http://temp.karakal.com.cn:18089/revcpx/t/pl/info.json?callback=JSON_CALLBACK&maxResult=10&id=" + $stateParams.id).success(function(res){
                            var data = new Object();
                            data.id = res.data.id;
                            data.name = res.data.playlistName;
                            var imgs = [];
                            if(res.data.imgs != undefined && res.data.imgs != null && res.data.imgs != ""){
                                for(var i = 0; i < res.data.imgs.length; i++){
                                    var img = new Object();
                                    img.id = res.data.imgs[i].id;
                                    img.img = "";
                                    if(res.data.imgs[i].img != undefined && res.data.imgs[i].img != null && res.data.imgs[i].img != "") {
                                        img.img = 'http://temp.karakal.com.cn:18089/revcpx/imgs/' + res.data.imgs[i].img.replace(/"/g, '').replace('[', '').replace(']', '');
                                    }
                                    imgs.push(img);
                                }
                            }
                            data.imgs = imgs;
                            data.songs = res.data.songs;
                            $scope.data = data;
                        });
                    }]
                }
            }
        })
}]);

function jtPushData(data, songLists){
    var songList = new Object();
    songList.id = data.id;
    songList.name = data.playlistName;
    songList.img = "";
    if(data.img != undefined && data.img != null && data.img != ""){
        songList.img = 'http://temp.karakal.com.cn:18089/revcpx/imgs/' + data.img.img.replace(/"/g,'').replace('[','').replace(']','');
    }
    songLists.push(songList);
};

/**
 * Created by hao.cheng on 2016/7/14.
 */
(function () {
    'use strict';

    angular.module('app.routes').config(MergeConfig);
    MergeConfig.$inject = ['$stateProvider','RouteHelpersProvider'];
    function MergeConfig($stateProvider, helper) {
        $stateProvider
            .state('app.merge',{
                url: '/merge',
                views:{
                    '':{
                        templateUrl: 'app/views/merge/merge-head.html',
                        controller: 'MergeHeadController'
                    }
                }
            })
            .state('app.merge.list',{
                url: '/list?:type&:ids&:mergeIds&:lastPage',
                views:{
                    'data-list':{
                        templateUrl: helper.basepath('merge/merge-list.html'),
                        controller: 'MergeListController'
                    }
                }
            })
    }
    
    angular.module('app.routes').controller('MergeHeadController',["$scope", "$state", "SweetAlert", function ($scope,$state,SweetAlert) {
        $scope.submit = function () { //确认添加按钮
            if(checkEmpty($scope.form.ids)){
                sweetAlertCommon(SweetAlert,'请填写门户ID','warning');
                return;
            }
            var ids = $scope.form.ids.split(',');
            if(checkEmpty($scope.form.mergeIds)) var mergeIds = [];
            else var mergeIds = $scope.form.mergeIds.split(',');
            ids.forEach(function (val) {    //往mergeids里面添加数据
                if(mergeIds.indexOf(val) == -1)
                    mergeIds.push(val);
            });
            $scope.form.mergeIds = mergeIds.join(',');
            $state.go('app.merge.list',$scope.form);
        };
        $scope.changeMergeType = function (type) { //切换类型
            $state.go('app.merge.list',{type: type,ids: '',mergeIds: ''});
        };
        $scope.reset = function () { //重置按钮
            $scope.form.ids = '';
        }

    }]);
    angular.module('app.routes').controller('MergeListController',["$http", "$scope", "BaseService", "$stateParams", "SweetAlert", "$state", function ($http,$scope,BaseService,$stateParams,SweetAlert,$state) {
        $scope.$parent.form = cloneOneObject($stateParams);
        $scope.type = $stateParams.type;
        if(!checkEmpty($stateParams.mergeIds)){//获取合并数据列表
            var data = {isolated: 0};data[$stateParams.type + 'Ids'] = $stateParams.mergeIds.split(',');
            var promise = BaseService.service.excludeIsolateData(JSON.stringify(data),$stateParams.type);
        }
        if(promise)
            promise.then(function (res) {
                if(res.data.length == 0){
                    sweetAlertCommon(SweetAlert,'暂无数据','warning');
                    return;
                }
                $scope.datas = res.data;
                $scope.datas.forEach(function (val) {
                   val.isCheck = false;
                });
                console.log(res.data);
            });
        $scope.mergeData = function (datas) { //合并按钮
            if(!datas)  return sweetAlertCommon(SweetAlert,'请先添加数据','warning');
            var param = {};param.mergeIds = [];
            datas.forEach(function (val) {
                if(val.isCheck) param.targetId = val[$stateParams.type+'Id'];
                else param.mergeIds.push(val[$stateParams.type+'Id']);
            });
            if(!param.hasOwnProperty('targetId')){
                sweetAlertCommon(SweetAlert,'请选择需要保留的数据','warning');
                return;
            }
            sweetAlertConfirm(SweetAlert,function () {
                var promise = BaseService.service.mergeData(JSON.stringify(param),$stateParams.type);
                promise.then(function (res) {
                    if(res.status == 1) sweetAlertCommon(SweetAlert,res.msg,'success'),window.open(returnLastPage($stateParams.lastPage), '_self');
                    else sweetAlertCommon(SweetAlert,res.msg,'error');
                    console.log(res.data);
                });
            },'warning',undefined,'你是否确定合并, 被合并的歌曲将被禁用并放入隔离区无法恢复, 请确认...?');
        };
        $scope.remove = function (datas,data) { //删除按钮
            var mergeIds = [];
            mergeIds =$scope.form.mergeIds.split(',');
            mergeIds.remove(data[$stateParams.type+'Id']);
            $scope.form.mergeIds = mergeIds.join(',');
            $state.go('app.merge.list',{mergeIds: $scope.form.mergeIds});
        }
    }]);

})();

 /**
 * Created by hao.cheng on 2015/12/30.
 */
var iframe = document.getElementById('player_iframe').contentWindow;
//    iframe.showIframe();
var list = [];
function addPlaySong(songId, SweetAlert, playList,copyIds, x ) {//点击添加歌曲试听
    // if (copyId == undefined || copyId == null || copyId == '') {
    //     sweetAlertCommon(SweetAlert,'暂无试听地址','warning');
    //     //alert('暂无试听地址');
    //     return;
    // }
    // var obj = localStorage.getItem('batchSong');
    //if (obj != null && obj.indexOf(songId + '-' + copyId) != -1) {
    //    alert('歌曲已存在播放器中');
    //    return;
    //}
    //var arr = localStorage.getItem('batchSong').split(',');//先取出缓存再保存进新缓存
    //for(var i in arr){
    //    list.push(arr[i]);
    //}
    // list.push(songId + '-' + copyId);
    // localStorage.setItem('nowPlay',songId);
    // localStorage.setItem('batchSong', list.join(','));
    //$('#player_iframe').contents().find("#list_num").text(localStorage.getItem('batchSong').split(',').length);
    if(copyIds.length == 0) return sweetAlertCommon(SweetAlert, '暂无试听版权', 'warning');
    ajaxJson(listen_url, 'get', 'jsonp', 'copyrightFormBean.copyrightId=' + copyIds[x], function (res) {//获取试听地址并添加到播放器中
        if(res.length > 0){
            for (var j = 0; j < res.length; j++) {
                var songList = {};
                songList.title = res[j].title;
                songList.artist = res[j].artist + songId;
                songList.mp3 = res[j].mp3.replace('tyst.migu.cn','218.200.227.130');
                songList.time = new Date().getTime();
                playList.push(songList);
            }
        }
        console.log(playList);
        if(x != copyIds.length - 1){
            addPlaySong(songId,SweetAlert, playList,copyIds, x+1);
        } else {
            if(playList.length == 0){
                sweetAlertCommon(SweetAlert,'暂无试听地址','warning');
                return;
            }
            iframe.myPlaylist.remove();
            for(var i = 0; i < playList.length; i++){
                iframe.myPlaylist.add(playList[i]);
            }
            iframe.myPlaylist.play(0);
        }

            // var type = ['全曲', '随身听', '振铃', '彩铃'];        //只显示单个产品
            //优先选取全曲，然后随身听以此类推
            // choose:
            //     for (var i = 0; i < type.length; i++) {
            //         for (var j = 0; j < res.length; j++) {
            //             if (res[j].title.indexOf(type[i]) != -1) {
            //                 var songList = {};
            //                 songList.title = res[j].title;
            //                 songList.artist = res[j].artist + songId;
            //                 songList.mp3 = res[j].mp3;
            //                 songList.time = new Date().getTime();
            //                 iframe.myPlaylist.add(songList);
            //                 iframe.myPlaylist.play(-1);
            //                 break choose;
            //             }
            //         }
            //     }
    });
}
function  addPlaySong_Catalog(copyId,type,SweetAlert){//编目特殊播放器（播放对应的版权铃音）
    ajaxJson(listen_url, 'get', 'jsonp', 'copyrightFormBean.copyrightId=' + copyId, function (res) {//获取试听地址并添加到播放器中
        if (res['result'] != undefined || res.length < 1) {
            sweetAlertCommon(SweetAlert,'暂无试听地址','warning');
            //alert('暂无试听地址');
        } else {
            //循环播放的类型
            choose:
                for (var i = 0; i < type.length; i++) {
                    for (var j = 0; j < res.length; j++) {
                        if (res[j].title.indexOf(type[i]) != -1) {
                            iframe.myPlaylist.add(res[j]);
                            iframe.myPlaylist.play(-1);
                            break choose;
                        }
                    }
                }
        }
    });
}
function pausePlay() {      //暂停播放器
    iframe.myPlaylist.pause();
}
/**qualityContent.data
 * Created by hao.cheng on 2016/3/3.
 * quality_content_controller
 */
angular.module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.qualityContent',{
            url: '/qualityContent?:type',
            views:{
                '':{
                    templateUrl: 'app/views/quality_content/quality_content.html',
                    controller: ["$scope", "$sce", "$http", "$stateParams", "$filter", "$state", function ($scope,$sce,$http,$stateParams,$filter,$state) {
                        //console.log('进入了顶层');
                        $scope.type = $stateParams.type;
                        $scope.data = {};
                        //$scope.artist = {};
                        //$scope.album = {};
                        //$scope.song = {};
                        if($scope.locations == undefined){      //获取地域标签
                            $http.jsonp(quality_location+'&'+CALLBACK).success(function(res){
                                $scope.locations = res.tagsList;
                            });
                        }
                        $scope.clearInput = function(){   //清空查询条件
                            $scope.data = {};
                            //$scope.artist = {};
                            //$scope.song = {};
                            //$scope.album = {};
                        };
                        $scope.export = function(type){     //导出表格
                            var url = '';
                            if(type == 1)
                                url = quality_artist_export + JSON.stringify(returnObj($scope.data,$stateParams));
                            if(type == 2)
                                url = quality_album_export + JSON.stringify(returnObj($scope.data,$stateParams));
                            if(type == 3)
                                url = quality_song_export + JSON.stringify(returnObj($scope.data,$stateParams));
                            window.open(url);
                        };
                        $scope.searchBtn = function(type){
                            //console.log($scope.data);
                            //console.log(formatDate(Date.parse($scope.data.cendTime), $filter));
                            //console.log(formatDate(Date.parse($scope.data.cstartTime), $filter));
                            //console.log(formatDate(Date.parse($scope.data.uendTime), $filter));
                            //console.log(formatDate(Date.parse($scope.data.ustartTime), $filter));

                            if(type == 1){
                                //console.log($scope.data);
                                $state.go('app.qualityContent.data',{type: type, status: $scope.data.status, cstartTime: ($scope.data.cstartTime != undefined ? formatDate(Date.parse($scope.data.cstartTime), $filter) : ''), cendTime: ($scope.data.cendTime != undefined ? formatDate(Date.parse($scope.data.cendTime), $filter) : ''), ustartTime: ($scope.data.ustartTime != undefined ? formatDate(Date.parse($scope.data.ustartTime), $filter) : ''), uendTime: ($scope.data.uendTime != undefined ? formatDate(Date.parse($scope.data.uendTime), $filter) : ''), artistId: $scope.data.artistId, artistName: $scope.data.artistName, tagIds: $scope.data.tagIds, originScore: $scope.data.originScore, originMigu: $scope.data.originMigu});
                                //console.log('artist');
                            } else if(type == 2){
                                //console.log($scope.data);
                                $state.go('app.qualityContent.data',{type: type, status: $scope.data.status, cstartTime: ($scope.data.cstartTime != undefined ? formatDate(Date.parse($scope.data.cstartTime), $filter) : ''), cendTime: ($scope.data.cendTime != undefined ? formatDate(Date.parse($scope.data.cendTime), $filter) : ''), ustartTime: ($scope.data.ustartTime != undefined ? formatDate(Date.parse($scope.data.ustartTime), $filter) : ''), uendTime: ($scope.data.uendTime != undefined ? formatDate(Date.parse($scope.data.uendTime), $filter) : ''), albumId: $scope.data.albumId, albumName: $scope.data.albumName, artistName: $scope.data.artistName, originArtist: $scope.data.originArtist, originMigu: $scope.data.originMigu, originContent: $scope.data.originContent, originUrgent: $scope.data.originUrgent});
                                //console.log('album');
                            } else if(type == 3){
                                //console.log($scope.data);
                                $state.go('app.qualityContent.data',{type: type, status: $scope.data.status, cstartTime: ($scope.data.cstartTime != undefined ? formatDate(Date.parse($scope.data.cstartTime), $filter) : ''), cendTime: ($scope.data.cendTime != undefined ? formatDate(Date.parse($scope.data.cendTime), $filter) : ''), ustartTime: ($scope.data.ustartTime != undefined ? formatDate(Date.parse($scope.data.ustartTime), $filter) : ''), uendTime: ($scope.data.uendTime != undefined ? formatDate(Date.parse($scope.data.uendTime), $filter) : ''), copyrightId: $scope.data.copyrightId, overdue: $scope.data.overdue, hidden: $scope.data.hidden, songName: $scope.data.songName, artistName: $scope.data.artistName, language: $scope.data.language, originArtist: $scope.data.originArtist, originMigu: $scope.data.originMigu, originContent: $scope.data.originContent, originUrgent: $scope.data.originUrgent});
                                //console.log('song');
                            }
                        };

                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            } else if(flag == 3){
                                $scope.dateStatus.opened3 = true;
                            } else if (flag == 4){
                                $scope.dateStatus.opened4 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false,
                            opened3: false,
                            opened4: false
                        };
                    }]
                }
            }
        })
        .state('app.qualityContent.data',{
            //url: '/data?:status&:artistName&:artistId&:tagIds&:albumId&:albumName&:albumArtist&:copyrightId&:songName' +
            //'&:hidden&:songArtist&:arOriginScore&:arOriginMigu&:alOriginArtist&:alOriginMigu&:alOriginContent' +
            //'&:alOriginUrgent&:sOriginArtist&:sOriginMigu&:sOriginContent&:sOriginUrgent&:pageNo&:overdue',     //type=1,2,3分别表示艺人,专辑,歌曲
            url: '/data?:status&:pageNo&:pageSize&:cstartTime&:cendTime&:ustartTime&:uendTime&:artistId&:artistName&:tagIds&:originScore&:originMigu' +
            '&:albumId&:albumName&:originArtist&:originContent&:originUrgent' +
            '&:copyrightId&:overdue&:hidden&:songName&:language',
            views: {
                'data-list':{
                    templateUrl: 'app/views/quality_content/data_list.html',
                    controller: ["$scope", "$stateParams", "$http", "$state", "$timeout", "$rootScope", "display", "$window", function($scope,$stateParams,$http,$state,$timeout,$rootScope,display,$window){
                        if(checkEmpty($stateParams.pageSize)) $stateParams.pageSize = 100;
                        var data = {};
                        data = compeleteUrl($stateParams, data);
                        var url = '';
                        if($stateParams.type == 1){     //优质艺人处理逻辑
                            url = quality_artist + JSON.stringify(data);
                        }else if($stateParams.type == 2){   //优质专辑处理逻辑
                            url = quality_album + JSON.stringify(data);
                        }else if($stateParams.type == 3){      //优质歌曲处理逻辑
                            url = quality_song + JSON.stringify(data);
                        }
                        if(url != ''){
                            $http.jsonp(url + '&' + CALLBACK).success(function(res){
                                $scope.datas = res.data.list;
                                paginationDiscreteness($scope,5,res.data.pageSize,res.data.totalCount,res.data.pageTotal,res.data.pageNo);
                                paginationCommon($scope,5,res.data.pageSize,res.data.totalCount,res.data.pageTotal,res.data.pageNo);
                            });
                        }
                        $scope.deleteMaterial = function(data, type){
                            console.log(data);
                            console.log(type);
                            var con = confirm('确认删除该条数据吗？');
                            if(con){
                                var url = '';
                                if(type != 'song'){
                                    url = quality_delete + type + '/' + data[type + 'Id'] + '.json?' + CALLBACK;
                                } else if (type == 'song'){
                                    url = quality_delete + type + '/' + data['copyrightId'] + '.json?' + CALLBACK;
                                }
                                if(url != ''){
                                    $http.jsonp(url).success(function(res){
                                        if(res.status == 1){
                                            alertTipCommon($timeout,$rootScope,res.msg,display);
                                            location.reload(true);
                                        }
                                    });
                                }
                            }
                        };

                        $scope.showDataInfo = function(data, type){
                            var url = '';
                            if(type == 'artist'){
                                url = quality_tyqk + 'getArtist?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&artistId=' + data.artistId;
                            } else if(type == 'album'){
                                url = quality_tyqk + 'getAlbum?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&albumId=' + data.albumId;
                            } else if(type == 'song'){
                                url = quality_tyqk + 'getSong?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&copyrightId=' + data.copyrightId;
                            }
                            jQuery.ajax({
                                url: url ,
                                type: "post",
                                async: false,
                                timeout: 15000,
                                dataType: "jsonp",  // not "json" we'll parse
                                jsonp: CALLBACK,
                                contentType: "application/jsonp; charset=utf-8",
                                success: function(res) {
                                    if(res.status == '000000'){
                                        var uuid = '';
                                        var tyqkUrl = '';
                                        if(type == 'artist'){
                                            uuid = res.artists[0].uuid;
                                            tyqkUrl = 'http://218.200.230.40:18089/material/artist!showArtistInfo.action?artistFormBean.artistId=' + uuid;
                                        } else if(type == 'album'){
                                            uuid = res.albumList[0].uuid;
                                            tyqkUrl = 'http://218.200.230.40:18089/material/album!showAlbumInfo.action?albumFormBean.albumId=' + uuid;
                                        } else if(type == 'song'){
                                            uuid = res.songList[0].uuid;
                                            tyqkUrl = 'http://218.200.230.40:18089/musiclibrary/song!showSongInfo.action?songFormBean.songId=' + uuid;
                                        }
                                        if(tyqkUrl != ''){
                                            $window.open(tyqkUrl);
                                        }
                                    } else {
                                        alertTipCommon($timeout,$rootScope,'反向接口返回异常',display);
                                    }
                                },
                                error: function (res) {
                                    alertTipCommon($timeout,$rootScope,'获取反向接口网络异常',display);
                                }
                            });
                        };

                        $scope.editData = function(data, type){
                            var url = '';
                                if(type == 'artist'){
                                url = quality_tyqk + 'getArtist?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&artistId=' + data.artistId;
                            } else if(type == 'album'){
                                url = quality_tyqk + 'getAlbum?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&albumId=' + data.albumId;
                            } else if(type == 'song'){
                                url = quality_tyqk + 'getSong?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&copyrightId=' + data.copyrightId;
                            }
                            jQuery.ajax({
                                url: url ,
                                type: "post",
                                async: false,
                                timeout: 15000,
                                dataType: "jsonp",  // not "json" we'll parse
                                jsonp: CALLBACK,
                                contentType: "application/jsonp; charset=utf-8",
                                success: function(res) {
                                    if(res.status == '000000'){
                                        var uuid = '';
                                        var tyqkUrl = '';
                                        if(type == 'artist'){
                                            uuid = res.artists[0].uuid;
                                            tyqkUrl = 'http://218.200.230.40:18089/material/artist!showUpdateArtistPage.action?artistFormBean.artistId=' + uuid;
                                        } else if(type == 'album'){
                                            uuid = res.albumList[0].uuid;
                                            tyqkUrl = 'http://218.200.230.40:18089/material/album!showUpdateAlbumPage.action?albumFormBean.albumId=' + uuid;
                                        } else if(type == 'song'){
                                            uuid = res.songList[0].uuid;
                                            tyqkUrl = 'http://218.200.230.40:18089/musiclibrary/song!showUpdateSongPage.action?songFormBean.songId=' + uuid;
                                        }
                                        if(tyqkUrl != '' && uuid != undefined && uuid != ''){
                                            $window.open(tyqkUrl);
                                        }
                                    } else {
                                        alertTipCommon($timeout,$rootScope,'反向接口返回异常',display);
                                    }
                                },
                                error: function (res) {
                                    alertTipCommon($timeout,$rootScope,'获取反向接口网络异常',display);
                                }
                            });
                        };

                        $scope.checkAll = function(datas){
                            selectAll($scope, datas, 'checked', 'allIsCheck');
                            var needProperty = '';
                            if($scope.type == 1){
                                needProperty = 'artistId';
                            } else if($scope.type == 2){
                                needProperty = 'albumId';
                            } else if($scope.type == 3){
                                needProperty = 'copyrightId';
                            }
                            $scope.$parent.selectedDataIds = getPropertyFromCheckBox(datas, 'checked', true, needProperty);
                        };

                        $scope.checkOne = function(data, datas){
                            selectOne(data, !data.checked, 'checked');
                            var needProperty = '';
                            if($scope.type == 1){
                                needProperty = 'artistId';
                            } else if($scope.type == 2){
                                needProperty = 'albumId';
                            } else if($scope.type == 3){
                                needProperty = 'copyrightId';
                            }
                            $scope.$parent.selectedDataIds = getPropertyFromCheckBox(datas, 'checked', true, needProperty);
                        };

                        $scope.choosePage = function(){//分页
                            $state.go('app.qualityContent.data',{pageNo: $scope.bigCurrentPage});
                        };
                        //console.log($stateParams);
                        //$scope.artist.artistName = $stateParams.artist.artistName;
                    }]
                }
            }
        })
        .state('app.qualityContent.staistics',{
            url:'/staistics',
            views:{
                'quality_statistics':{
                    templateUrl: 'app/views/quality_content/quality_statistics.html',
                    controller: ["$scope", "$http", "$stateParams", function($scope,$http,$stateParams){
                        $http.jsonp(quality_url + 'countArtist.json?'+CALLBACK).success(function(res){      //获取优质艺人统计
                            $scope.artist_staistics = res.data.list;
                        });
                        $http.jsonp(quality_url + 'countAlbum.json?'+CALLBACK).success(function(res){      //获取优质专辑统计
                            $scope.album_staistics = res.data.list;
                        });
                        $http.jsonp(quality_url + 'countSong.json?'+CALLBACK).success(function(res){      //获取歌曲无损音源统计
                            $scope.song_staistics = res.data.list;
                        });
                        //$http.jsonp(quality_url + 'countSongGq.json?'+CALLBACK).success(function(res){      //获取歌曲高清音源统计
                        //    $scope.song_gq = res.data;
                        //})
                        //$http.jsonp(quality_url + 'countSongBq.json?'+CALLBACK).success(function(res){      //获取歌曲标签统计
                        //    $scope.song_bq = res.data;
                        //})
                        //$http.jsonp(quality_url + 'countSongGc.json?'+CALLBACK).success(function(res){      //获取歌曲歌词统计
                        //    $scope.song_gc = res.data;
                        //})
                        //$http.jsonp(quality_url + 'countSongSc.json?'+CALLBACK).success(function(res){      //获取歌曲素材统计
                        //    $scope.song_sc = res.data;
                        //})
                    }]
                }
            }
        });
}]);
    function returnObj(o,$stateParams){//转换对象返回
        var obj = o;
        for(var p in obj){
            if(obj[p] == true)
                obj[p] = 1;
            else if(obj[p] == false)
                delete obj[p];
            else if(p == 'tagIds' && !(obj[p] instanceof Array)){
                var tagIds = obj[p];
                obj.tagIds = [];
                obj.tagIds.push(tagIds);       //将字符串转成数组
            }
        }
        //if($stateParams.pageNo == undefined){
        //    obj.pageNo = 1;
        //} else {
        //    obj.pageNo = $stateParams.pageNo;
        //}
    return obj;
}

function compeleteUrl($stateParams, data){
    if($stateParams.status != undefined && $stateParams.status != ''){
        data.status = $stateParams.status;
    }
    if($stateParams.cstartTime != undefined && $stateParams.cstartTime != ''){
        data.cstartTime = $stateParams.cstartTime;
    }
    if($stateParams.cendTime != undefined && $stateParams.cendTime != ''){
        data.cendTime = $stateParams.cendTime;
    }
    if($stateParams.ustartTime != undefined && $stateParams.ustartTime != ''){
        data.ustartTime = $stateParams.ustartTime;
    }
    if($stateParams.uendTime != undefined && $stateParams.uendTime != ''){
        data.uendTime = $stateParams.uendTime;
    }
    if($stateParams.pageNo != undefined && $stateParams.pageNo != ''){
        data.pageNo = $stateParams.pageNo;
    }
    if($stateParams.pageSize != undefined && $stateParams.pageSize != ''){
        data.pageSize = $stateParams.pageSize;
    }
    //上面是通用的属性
    //下面是艺人属性
    if($stateParams.artistId != undefined && $stateParams.artistId != ''){
        data.artistId = $stateParams.artistId;
    }
    if($stateParams.artistName != undefined && $stateParams.artistName != ''){
        data.artistName = $stateParams.artistName;
    }
    if($stateParams.tagIds != undefined && $stateParams.tagIds != ''){
        data.tagIds = stringToArray($stateParams.tagIds);
    }
    if($stateParams.status != undefined && $stateParams.status != ''){
        data.status = $stateParams.status;
    }
    if($stateParams.originScore != undefined && $stateParams.originScore != ''){
        data.originScore = $stateParams.originScore;
    }
    if($stateParams.originMigu != undefined && $stateParams.originMigu != ''){
        data.originMigu = $stateParams.originMigu;
    }
    //下面是专辑的属性
    if($stateParams.albumId != undefined && $stateParams.albumId != ''){
        data.albumId = $stateParams.albumId;
    }
    if($stateParams.albumName != undefined && $stateParams.albumName != ''){
        data.albumName = $stateParams.albumName;
    }
    if($stateParams.originArtist != undefined && $stateParams.originArtist != ''){
        data.originArtist = $stateParams.originArtist;
    }
    if($stateParams.originContent != undefined && $stateParams.originContent != ''){
        data.originContent = $stateParams.originContent;
    }
    if($stateParams.originUrgent != undefined && $stateParams.originUrgent != ''){
        data.originUrgent = $stateParams.originUrgent;
    }
    //下面是歌曲的属性
    if($stateParams.copyrightId != undefined && $stateParams.copyrightId != ''){
        data.copyrightId = $stateParams.copyrightId;
    }
    if($stateParams.overdue != undefined && $stateParams.overdue != ''){
        data.overdue = $stateParams.overdue;
    }
    if($stateParams.hidden != undefined && $stateParams.hidden != ''){
        data.hidden = $stateParams.hidden;
    }
    if($stateParams.songName != undefined && $stateParams.songName != ''){
        data.songName = $stateParams.songName;
    }
    if($stateParams.language != undefined && $stateParams.language != ''){
        data.language = $stateParams.language;
    }
    return data;
}

//优质库的导入导出控件
angular.module('app.routes').controller('quality_controller', ["$scope", "$uibModal", function($scope,$uibModal){
    $scope.animationsEnabled = true;
    //导入excel
    $scope.import = function(type){
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'quality_import.html',
            controller: 'quality_import_ctrl',
            resolve: {
                type: function(){
                    if(type == 1){
                        return 'artist';
                    } else if(type == 2){
                        return 'album';
                    } else if(type == 3){
                        return 'song';
                    }
                }
            }
        });
    };
    //导出excel
    $scope.export = function(type, selectedDataIds){
        //console.log(selectedDataIds);
        //console.log($scope.data);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'quality_export.html',
            controller: 'quality_export_ctrl',
            resolve: {
                type: function(){
                    if(type == 1){
                        return 'artist';
                    } else if(type == 2){
                        return 'album';
                    } else if(type == 3){
                        return 'song';
                    }
                },
                data: function(){return $scope.data;},
                ids: function(){return selectedDataIds;}
            }
        });
    };
}]);

angular.module('app.routes').controller('quality_import_ctrl', ["$scope", "$uibModalInstance", "$http", "$filter", "type", "$stateParams", "SweetAlert", function($scope,$uibModalInstance,$http,$filter,type,$stateParams,SweetAlert){
    //console.log(_session.id);
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(){
        if($scope.import_status == undefined){
            $scope.error = '未选择导入状态';
            return;
        }
        if($scope.import_ctime == undefined){
            $scope.error = '未选择入库时间';
            return;
        }
        //console.log($scope.import_status);
        //console.log($scope.import_ctime != undefined ? formatDate(Date.parse($scope.import_ctime), $filter) : '');
        //return;
        var ctime = $scope.import_ctime != undefined ? formatDate(Date.parse($scope.import_ctime), $filter) : '';
        console.log(ctime);
        var filename = $('#file').val();
        if(filename == ''){
            $scope.error = '请选择上传的excel文件';
        }else{
            $scope.error= '';
            //$.ajaxFileUpload({
            //    url: quality_import_excel + type + '.json',
            //    type: 'post',
            //    secureuri: false, //一般设置为false
            //    fileElementId: 'file', // 上传文件的id、name属性名
            //    dataType: 'json', //返回值类型，一般设置为json、application/json
            //    data: {'status':$scope.import_status,'ctime': ctime, 'kuid': _session.id},
            //    success: function(res){
            //        console.log(res);
            //        if(res.status == 1){
            //            alert(res.msg);
            //            $uibModalInstance.dismiss('cancel');
            //            location.reload();
            //            //alert(res.msg,function(){
            //            //    location.reload();
            //            //})
            //        }else{
            //            $scope.error = res.msg;
            //            //$scope.error = '上传失败';
            //        }
            //    },
            //    error: function(res){
            //        console.log(res);
            //        $scope.error = '访问接口发生异常';
            //    }
            //});
            var url = quality_import_excel + type + '.json';
            var datas = {'status':$scope.import_status,'ctime': ctime, 'kuid': JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid};
            ajaxFileUpload(url, $scope, datas, $uibModalInstance,SweetAlert, 'file', $stateParams,undefined);
        }
    };

    //打开日期框
    $scope.open = function(flag) {
        if(flag == 1){
            $scope.dateStatus.opened1 = true;
        }
    };
    $scope.dateStatus = {
        opened1: false
    };
}]);

//通用方法
angular.module('app.routes').factory('display',["$rootScope", function($rootScope){
    $rootScope.display = false;
    $rootScope.msg = '';
    $rootScope.date = new Date();
    return {
        setShow: function(){
            return true;
        },
        setHide: function(){
            return false;
        }
    }
}]);


angular.module('app.routes').controller('quality_export_ctrl', ["$scope", "$uibModalInstance", "$http", "$filter", "$filter", "type", "data", "ids", function($scope, $uibModalInstance, $http, $filter, $filter, type, data, ids){
    //console.log(type);
    //console.log(data);
    //console.log(ids);
    $scope.cancel = function(){
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(){
        //console.log(data);
        var export_data = formatExportCondition(cloneOneObject(data), $filter);
        //console.log(export_data);
        //console.log($scope.export_type);
        if($scope.export_type == 1){
            //console.log("选择了按照选中导出");
            if(ids == undefined || ids == null || ids === '' || ids.length <= 0){
                $scope.error = '没有选中数据，无法导出';
                return;
            }
            if(type != 'song'){
                export_data[type + 'Ids'] = stringToArray(ids);
            } else if (type == 'song'){
                export_data['copyrightIds'] = stringToArray(ids);
            } else {
                return;
            }
        } else if($scope.export_type == 2){
            if($scope.numberStart == undefined || $scope.numberEnd == undefined || $scope.numberStart == '' || $scope.numberEnd == ''){
                $scope.error = '请输入序号起止';
                return;
            }
            export_data.startNo = $scope.numberStart - 1;
            export_data.endNo = $scope.numberEnd - 1;
            //console.log($scope.numberStart + " +++++ " + $scope.numberEnd);
        } else if($scope.export_type == 3){
            if($scope.pageStart == undefined || $scope.pageEnd == undefined || $scope.pageStart == '' || $scope.pageEnd == ''){
                $scope.error = '请输入页码起止';
                return;
            }
            export_data.startNo = ($scope.pageStart - 1) * 50;
            export_data.endNo = $scope.pageEnd * 50 - 1;
            //console.log($scope.pageStart + " +++++ " + $scope.pageEnd);
        } else {
            $scope.error = '请选择导出类型';
            return;
        }
        var url = quality_url + 'export/' + type + '.do?data=' + JSON.stringify(export_data);
        window.open(url);
        $uibModalInstance.dismiss('cancel');
    };

}]);

function formatExportCondition(data, $filter){
    if(data.cstartTime != undefined){
        data.cstartTime = formatDate(Date.parse(data.cstartTime), $filter);
    }
    if(data.cendTime != undefined){
        data.cendTime = formatDate(Date.parse(data.cendTime), $filter);
    }
    if(data.ustartTime != undefined){
        data.ustartTime = formatDate(Date.parse(data.ustartTime), $filter);
    }
    if(data.uendTime != undefined){
        data.uendTime = formatDate(Date.parse(data.uendTime), $filter);
    }
    return data;
}

//上传文件函数
function ajaxFileUpload(url, $scope, datas, $uibModalInstance,SweetAlert, fileName,$stateParams, method, $timeout){
    $.ajaxFileUpload({
        url: url,
        type: 'post',
        secureuri: false, //一般设置为false
        fileElementId: fileName, // 上传文件的id、name属性名
        dataType: 'json', //返回值类型，一般设置为json、application/json
        data: datas,
        success: function(res){
            console.log(res);
            if(res.returnCode != undefined){
                res.status = res.returnCode;
            }
            if(res.description != undefined){
                res.msg = res.description;
            }
            if(res.status === "1" || res.code === "000000" || res.status === '000000' || res.status === 1){
                sweetAlertCommon(SweetAlert,res.msg,'success');
                $uibModalInstance.dismiss('cancel');
                if(!checkEmpty(method)){
                    method($stateParams);
                    return;
                }
                setTimeout(function(){
                    location.reload();
                }, 1000);
            }else{
                $scope.error = res.msg;
                sweetAlertCommon(SweetAlert,res.msg,'error');
                $uibModalInstance.dismiss('cancel');
            }
        },
        error: function(res){
            console.log(res);
            // sweetAlertCommon(SweetAlert,'请求异常','error');
            $uibModalInstance.dismiss('cancel');
        }
    });
}
function editTyqk(data, type, $timeout,$rootScope, display, $window){
    var url = '';
    if(type == 'artist'){
        url = quality_tyqk + 'getArtist?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&artistId=' + data.artistId;
    } else if(type == 'album'){
        url = quality_tyqk + 'getAlbum?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&albumId=' + data.albumId;
    } else if(type == 'song'){
        url = quality_tyqk + 'getSong?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&copyrightId=' + data.copyrightId;
    }
    jQuery.ajax({
        url: url ,
        type: "post",
        async: false,
        timeout: 15000,
        dataType: "jsonp",  // not "json" we'll parse
        jsonp: CALLBACK,
        contentType: "application/jsonp; charset=utf-8",
        success: function(res) {
            if(res.status == '000000'){
                var uuid = '';
                var tyqkUrl = '';
                if(type == 'artist'){
                    uuid = res.artists[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/material/artist!showUpdateArtistPage.action?artistFormBean.artistId=' + uuid;
                } else if(type == 'album'){
                    uuid = res.albumList[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/material/album!showUpdateAlbumPage.action?albumFormBean.albumId=' + uuid;
                } else if(type == 'song'){
                    uuid = res.songList[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/musiclibrary/song!showUpdateSongPage.action?songFormBean.songId=' + uuid;
                }
                if(tyqkUrl != '' && uuid != undefined && uuid != ''){
                    $window.open(tyqkUrl);
                }
            } else {
                alertTipCommon($timeout,$rootScope,'反向接口返回异常',display);
            }
        },
        error: function (res) {
            alertTipCommon($timeout,$rootScope,'获取反向接口网络异常',display);
        }
    });
}
function showTyqk(data, type, $timeout,$rootScope, display, $window){
    var url = '';
    if(type == 'artist'){
        url = quality_tyqk + 'getArtist?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&artistId=' + data.artistId;
    } else if(type == 'album'){
        url = quality_tyqk + 'getAlbum?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&albumId=' + data.albumId;
    } else if(type == 'song'){
        url = quality_tyqk + 'getSong?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&copyrightId=' + data.copyrightId;
    }
    jQuery.ajax({
        url: url ,
        type: "post",
        async: false,
        timeout: 15000,
        dataType: "jsonp",  // not "json" we'll parse
        jsonp: CALLBACK,
        contentType: "application/jsonp; charset=utf-8",
        success: function(res) {
            if(res.status == '000000'){
                var uuid = '';
                var tyqkUrl = '';
                if(type == 'artist'){
                    uuid = res.artists[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/material/artist!showArtistInfo.action?artistFormBean.artistId=' + uuid;
                } else if(type == 'album'){
                    uuid = res.albumList[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/material/album!showAlbumInfo.action?albumFormBean.albumId=' + uuid;
                } else if(type == 'song'){
                    uuid = res.songList[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/musiclibrary/song!showSongInfo.action?songFormBean.songId=' + uuid;
                }
                if(tyqkUrl != ''){
                    $window.open(tyqkUrl);
                }
            } else {
                alertTipCommon($timeout,$rootScope,'反向接口返回异常',display);
            }
        },
        error: function (res) {
            alertTipCommon($timeout,$rootScope,'获取反向接口网络异常',display);
        }
    });
}
/**
 * Created by kiraCheng on 2016/2/25.
 * song_controller
 */
'use strict';
var tags_title = [];
var catalogs = [{'name':'编目记录','id':'catalog-10'},{'name':'图片','id':'catalog-1'},{'name':'基础信息','id':'catalog-2'},{'name':'标签','id':'catalog-3'},{'name':'歌曲介绍','id':'catalog-4'},{'name':'创作背景','id':'catalog-5'},{'name':'获奖记录','id':'catalog-6'},{'name':'歌曲评价','id':'catalog-7'},{'name':'歌曲故事','id':'catalog-8'},{'name':'版权信息表','id':'catalog-9'}];
angular.module('app.routes').config(songConfig);
songConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
function songConfig($stateProvider, helper){
    $stateProvider
        .state('app.song', {//缺歌页面
            url: '/song?:time&:tagIds&:pageNo&:pageSize&:songKeyword&:songIds&:artistKeyword&:artistId&:status&:albumKeyword&:lyricPerson&:composePerson&:conductor&:player&:lastEdit&:copyrightId&:projectName&:lastEditSearch&:accurateArtist&:ckResult&:mscoreMin&:mscoreMax&:hotScoreMin&:hotScoreMax&:istag',
            templateUrl: 'app/views/song/song.html',
            controller: ["$scope", "$http", "$stateParams", "permissions", "$cookies", "$timeout", "$rootScope", "display", "$state", "SweetAlert", "BaseService", function ($scope, $http, $stateParams, permissions, $cookies, $timeout, $rootScope, display, $state,SweetAlert, BaseService) {
                $scope.form = {};
                $scope.form.searchTag = [];
                if(checkEmpty($scope.users)) $scope.users = JSON.parse(localStorage.getItem('users'));

                //界面元素控制下拉框列表
                var _table = JSON.parse(localStorage.getItem('local-songHtml'));
                $scope.song_html = _table ? _table : [{name:'状态', checked:true},{name:'版权ID', checked:true},{name:'歌曲ID', checked:true},{name:'歌曲名', checked:true},{name:'专辑名', checked:true},{name:'艺人名', checked:true},{name:'时长', checked:true},{name: '语言', checked: true}];
                $scope.storageTableShow = function () {
                    var _localStorage = [];
                    $scope.song_html.forEach(function (val) {
                        _localStorage.push(val);
                    });
                    localStorage.setItem('local-songHtml', JSON.stringify(_localStorage));
                };
                //初始化界面的songs
                $scope.datas = [];
                $scope.songTags = [];
                $scope.page = new Object();
                var songTagTree = [];
                var songFilterTagTree = [];
                var url = _search_song + '?' + CALLBACK;
                url = materialListFillUrl(url, $stateParams);
                if(url != undefined){
                    $http.jsonp(url).success(function(res){
                        //填充页面数据
                        getMaterialBySearch(res, $http, $scope, 'song');
                    });
                }
                //分页
                var page_url = _search_song + '?' + CALLBACK;
                page_url = materialListFillUrl(page_url, $stateParams, 'count');
                if(page_url != undefined){
                    $http.jsonp(page_url).success(function(res){
                        //分页
                        materialListSeparatePage($scope, res);
                    });
                }

                //获取歌曲的标签搜索树
                getTagList(3,$scope,$stateParams,$http,$cookies,SweetAlert);
                // var song_tag_url = tag_tree_url + 'getTagsByMaterialAndUser.do?userId=' + $cookies.get("kuid") + '&materialType=3&maxLevel=3';
                // $http.get(song_tag_url).success(function(res){
                //     //console.log(res);
                //     if(res.message == 'success'){
                //         //把标签树保存下来供其它地方根据ID获取标签
                //         songTagTree = res.tnList;
                //         songFilterTagTree.length = 0;
                //         for(var n = 0; n < songTagTree.length; n++ ){
                //             for(var m = 0; m < songTagTree[n].children.length; m++){
                //                 songFilterTagTree.push(songTagTree[n].children[m]);
                //             }
                //         }
                //         $scope.songFilterTagTree = songFilterTagTree;
                //         songFillSearchCondition($stateParams, $scope, $http, $cookies, songTagTree);
                //         ////下面的代码是拼凑歌曲页面顶部的标签树的结构
                //         var tags = [];
                //         for(var i=0; i < songTagTree.length; i++){
                //             var nodeList = [];
                //             var tag_all = getAllNode(songTagTree[i],nodeList);
                //             var tag = tag_all[tag_all.length -1];
                //             tag.children = [];
                //             for(var j = 0; j < tag_all.length - 1;j++){
                //                 tag.children.push(tag_all[j]);
                //             }
                //             tags.push(tag);
                //         }
                //         //console.log(tags);
                //         $scope.tags_title = tags;
                //     } else {
                //         console.log(res);
                //         //alert('返回异常，无法加载标签，返回值:' + JSON.stringify(res));
                //         sweetAlertCommon(SweetAlert,'请求标签树异常','warning');
                //     }
                //     //点击顶部标签展开下级的标签
                //     if($stateParams.id != undefined){
                //         for(var i = 0; i < $scope.tags_title.length; i++){
                //             if($scope.tags_title[i].id == $stateParams.id){
                //                 $scope.tags_list = $scope.tags_title[i].children;
                //             }
                //         }
                //     }
                // }).error(function(res){
                //     //alert('网络错误，无法加载标签');
                //     sweetAlertCommon(SweetAlert,'请求标签树异常','warning');
                // });
                //提交搜索条件
                $scope.submit = function(){
                    var params = $scope.form;
                    if(!isPropertyEmpty(params.searchTag)){
                        var tagIds = '';
                        for(var i = 0; i < params.searchTag.length; i++){
                            tagIds += params.searchTag[i].id + ',';
                        }
                        if(params.searchTag.length != 0){
                            tagIds = tagIds.substr(0, tagIds.length - 1);
                            params.tagIds = tagIds;
                        }
                    }
                    // if(isPropertyEmpty(params.lastEditSearch)) params.lastEdit = returnUidByUname(params.lastEdtiSearch,$scope.users);
                    // $state.go('app.song',{songIds: params.songIds, songKeyword: params.songKeyword, artistKeyword: params.artistKeyword, albumKeyword: params.albumKeyword, status: params.status, lyricPerson: params.lyricPerson, composePerson: params.composePerson, conductor: params.conductor, player: params.player, lastEdit: params.lastEdit, copyrightId: params.copyrightId, projectName: params.projectName, tagIds: params.tagIds},{reload: true, inherit: false});
                    params.pageNo = '',params.pageSize = '';
                    params.time = new Date().getTime();
                    $state.go('app.song',params,{reload: false, inherit: false});
                };

                //重置搜索条件
                $scope.reset = function(){
                    $scope.form = {};
                    $scope.form.searchTag = [];
                };

                //选择标签时候选择顶部标签
                $scope.selectMainTag = function(tag){
                    //console.log(tag);
                    $scope.tag_list = tag.children;
                };
                //选择需要搜索的标签
                $scope.songSelectSearchTag = function(tag){
                    //首先判断重复
                    if($scope.form.searchTag != undefined && $scope.form.searchTag.length != 0){
                        for(var i = 0; i < $scope.form.searchTag.length; i++){
                            if($scope.form.searchTag[i].id == tag.id){
                                return;
                            }
                        }
                    }
                    //然后判断父标签是否重复
                    //var tagIds = getPropertyFromCheckBox($scope.form.searchTag, 'undefined', undefined, 'id');
                    if($scope.form.searchTag != undefined && $scope.form.searchTag.length != 0){
                        //下面要判断新来的tag的一级类别，如果一级类别相同，那么把原有标签替换掉
                        //如果和原有的所有标签一级类别都不重复，也就是新类别的标签，那么在原有的标签上面新增
                        for(var n = 0; n < $scope.form.searchTag.length; n++){
                            var tempTag = $scope.form.searchTag[n];
                            if(tag.ancestorId == tempTag.ancestorId){
                                $scope.form.searchTag[n] = tag;
                                return;
                            }
                        }
                    }
                    $scope.form.searchTag.push(tag);
                };
                //全文搜索
                $scope.getSearchResult = function(value){
                    //console.log(value);
                    return $http.get(_search_song, {
                        params: {
                            data:{
                                "songKeyword": value,
                                "isolated": 0
                            }
                        }
                    }).then(function(response){
                        //console.log(response.data);
                        return response.data.body.list.map(function(item){
                            //console.log(item);
                            var allstr = item.songName + ' —';
                            if(item.artists != undefined && item.artists != null){
                                for (var i = 0; i < item.artists.length; i++){
                                    allstr += ' ' + item.artists[i].artistName + ',';
                                }
                            }
                            allstr = allstr.substr(0, allstr.length - 1) + ' —';
                            if(item.albums != undefined && item.albums != null){
                                //for (var i = 0; i < item.albums.length; i++){
                                allstr += ' ' + item.albums[0].albumName + ',';
                                //}
                            }
                            allstr = allstr.substr(0, allstr.length - 1) + '—' + item.songId;
                            item.allstr = allstr;
                            return item;
                        });
                    })
                };
                //全文检索选择事件
                $scope.addSong2List = function(song){
                    console.log(song);
                    $state.go('app.song',{songIds:song.songId},{inherit: false});
                };
                //全文检索点击搜索按钮
                $scope.searchSongBtn = function(value){
                    $state.go('app.song',{songKeyword:value, songIds:''});
                };
                //标签右上角的叉叉函数
                $scope.songTagRemove = function(tag){
                    //tagRemove(tag,$scope,$stateParams,$state,'app.song');
                    $scope.form.searchTag.remove(tag);
                };
                //点击标签树中的标签跳转相应数据显示页面
                $scope.songTagClick = function(tag){
                    if($stateParams.tagIds == undefined){
                        $state.go('app.song',{tagIds:tag.id});
                    } else {
                        //下面要判断新来的tag的一级类别，如果一级类别相同，那么把原有标签替换掉
                        //如果和原有的所有标签一级类别都不重复，也就是新类别的标签，那么在原有的标签上面新增
                        var parentRepeatTag = judgeParentTagRepeat(tag, $stateParams.tagIds.split(','), songTagTree);
                        if(parentRepeatTag == undefined){
                            $state.go('app.song',{tagIds:$stateParams.tagIds + ',' + tag.id});
                        } else {
                            var ids = $stateParams.tagIds.split(',');
                            ids[ids.indexOf(parentRepeatTag.id)] = tag.id;
                            $state.go('app.song',{tagIds:ids.join(',')});
                        }
                    }
                };
                //重新抽取素材
                $scope.extractedMaterial = function(id, type){
                    extractedMaterial(id, type, $http, $timeout, $rootScope, display);
                };
                //分页跳转
                $scope.choosePage = function(){
                    $state.go('app.song',{pageNo: $scope.page.currentPage});
                };
                //监听键盘按钮事件
                $scope.enter = function(event, searchValue, searchType){
                    if(event.keyCode == 13){
                        //console.log(searchValue);
                        if(searchType == 'songId'){
                            $state.go('app.song',{songIds:searchValue, songKeyword:'', artistKeyword:'', tagIds:'', status:''});
                        } else if(searchType == 'songName'){
                            $state.go('app.song',{songIds:'', songKeyword:searchValue});
                        } else if(searchType == 'artistName'){
                            $state.go('app.song',{songIds:'', artistKeyword:searchValue});
                        }
                    }
                };
                //勾选框控制界面元素
                $scope.changeCheck = function(html){
                    //把勾选框去掉
                    html.cheched = !html.cheched;
                    $scope.html_chooseElem = false;
                };
                //显示所有属性
                $scope.showAllHtmlElem = function(){
                    for(var  i = 0; i < $scope.song_html.length; i++){
                        $scope.song_html[i].checked = true;
                    }
                };
                //查看歌曲信息按钮
                $scope.showInfo = function(type,data){
                    openNewTab(type,data,'Info',$state);
                };
                //播放歌曲按钮
                $scope.playSong = function(data){
                    if(isPropertyEmpty(data.cids)){
                        sweetAlertCommon(SweetAlert,'当前歌曲没有版权id,无法播放','warning');
                    } else {
                        addPlaySong(data.songId, SweetAlert, data.cids.copyrightId,SweetAlert);
                    }
                };
                //全选
                $scope.checkAll = function(datas){
                    selectAll($scope, datas, 'isCheck', 'allIsCheck');
                };
                //单选
                $scope.checkOne = function(data, datas){
                    selectOne(data, !data.checked, 'checked');
                };
                //添加到抽查工单
                $scope.addToCheckTask = function(datas){
                    var selectedDataIds = getPropertyFromCheckBox(datas, 'isCheck', true, 'songId');
                    addToCheckTask($http, "song", selectedDataIds, SweetAlert);
                };
                $scope.editJump = function(data){//编辑按钮
                    editJumpNew('song',data,SweetAlert,$state,'_self');
                };
                $scope.rightClick = function (data) {
                    editJumpNew('song',data,SweetAlert,$state,  '_blank', $stateParams);
                };
                $scope.extractedMaterial = function(id, type){//重新抽取素材
                    extractedMaterial(id, type, $http, SweetAlert);
                };
                $scope.new = function(type){
                    addNewMaterialFromTop(type,$state);
                };
                //选择最后编辑人
                $scope.selectLastEdit = function(user){
                    $scope.form.lastEdit = user.uId;
                };
                $scope.separate = function(type,id){
                    var url = $state.href('app.separate',{type:type,id:id,lastPage:returnLastPageTime()});
                    window.open(url,'_blank');
                };
                $scope.getArtistInputSearch = function(value){   //精确输入框搜索艺人
                    //console.log(value);
                    return $http.jsonp(_search_artist+'?'+CALLBACK+'&data='+JSON.stringify({"artistKeyword": value, "isolated":0})).then(function(response){
                        //console.log(response.data);
                        var ids = [];
                        for(var i = 0; i < response.data.body.list.length; i++){
                            ids.push(response.data.body.list[i].artistId);
                        }
                        return $http.jsonp(list_url + "artist.json?callback=JSON_CALLBACK&ids=" + ids.join(',')).then(function(res){
                            return res.data.data.map(function(item){
                                //console.log(item);
                                var allstr = item.artistName + '-' + item.artistNameAlias + '-' + item.sex;
                                allstr = allstr.substr(0, allstr.length - 1) + '-' + item.artistId;
                                item.allstr = allstr;
                                return item;
                            });
                        });
                    })
                };
                $scope.addAccurateArtist = function(data){ //添加精确搜索
                    if(checkEmpty($scope.form)) $scope.form={};
                    $scope.form.artistId = data.artistId;
                    $scope.form.accurateArtist = data.artistName;
                    // $scope.accurateSearch = data;
                };
                $scope.removeAccurateSearch = function(accurateSearch){ //删除精确搜索
                    if(!checkEmpty($scope.form)) deleteProperty($scope.form,'artistId');
                    deleteProperty($scope.form,'accurateArtist');
                };
                $scope.tagging = function (id, blank) {
                    taggingAloneCheck(id, blank, 'song', null, $state, SweetAlert);
                }
            }]
        })
        .state('songInfo',{
            url: '/songInfo?:songId&:lastPage&:returnBtn',
            templateUrl: 'app/views/song/song-info.html',
            resolve: helper.resolveFor('oitozero.ngSweetAlert','lightbox2','modernizr'),
            controller: ["$scope", "$http", "$sce", "$stateParams", "$cookies", "authority", "$timeout", "$rootScope", "display", "$state", "SweetAlert", "CatalogService", function($scope,$http,$sce,$stateParams,$cookies,authority, $timeout, $rootScope, display,$state,SweetAlert,CatalogService){
                if($stateParams.returnBtn) $scope.returnBtn = $stateParams.returnBtn;
                basicRequest('song',catalogs,$scope,$http,$sce,$stateParams,$cookies,true);
                var promise = CatalogService.service.getCatalogs($stateParams.songId);  //获取版权
                promise.then(function (res) {
                    $scope.catalog_list = res;
                });
                $scope.goBack = function(){
                    window.open(returnLastPage($stateParams.lastPage), '_self');
                };
                $scope.edit = function(type,id){    //编辑按钮
                    toEdit(type,id,$stateParams,$state,SweetAlert);
                };
                loadMoreRecord('song',$scope,$stateParams,$http,SweetAlert);
                getSongCatalogPre($scope, $stateParams, CatalogService);
            }]
        })
        .state('songExamine',{
            url: '/songExamine?:songId&:lastPage&:taskId&:returnBtn',
            templateUrl: 'app/views/song/song-info.html',
            resolve: helper.resolveFor('oitozero.ngSweetAlert','lightbox2','modernizr'),
            controller: ["$scope", "$http", "$sce", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", "SweetAlert", "CatalogService", "mails", function($scope,$http,$sce,$stateParams,$cookies,$timeout,$rootScope,display,SweetAlert,CatalogService,mails){
                if($stateParams.returnBtn) $scope.returnBtn = $stateParams.returnBtn;
                var promise = CatalogService.service.getCatalogs($stateParams.songId);  //获取版权
                promise.then(function (res) {
                    $scope.catalog_list = res;
                });
                $scope.examine = true;
                basicRequest('song',catalogs,$scope,$http,$sce,$stateParams,$cookies);
                $scope.examineConfirm = function(examineResult, examineSuggest){    //审核确认
                    examineCommon('song',examineResult,examineSuggest,$http,$stateParams,SweetAlert);
                };
                $scope.goBack = function(type,id){      //返回按钮
                    unLock(type,id,$http,$stateParams,SweetAlert);     //解锁审核状态
                };
                loadMoreRecord('song',$scope,$stateParams,$http,SweetAlert);
            }]
        })
        .state('songEdit',{
            url: '/songEdit?songId&:lastPage&:tp&:auth&:taskId',
            'views' : {
                '':{
                    templateUrl:'app/views/song/song-edit.html',
                    resolve: helper.resolveFor('oitozero.ngSweetAlert','icons','lightbox2','ztree','inputmask','modernizr'),
                    controller:'songController'
                }
            }
        })
        .state('songCheck',{
            url: '/songCheck?:songId&:lastPage&:taskId',
            templateUrl: 'app/views/song/song-info.html',
            resolve: helper.resolveFor('oitozero.ngSweetAlert','lightbox2','modernizr'),
            controller: ["$scope", "$http", "$sce", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", "SweetAlert", "CatalogService", function($scope,$http,$sce,$stateParams,$cookies,$timeout,$rootScope,display,SweetAlert,CatalogService){
                $scope.check = true;
                $scope.ckTagError = {};
                basicRequest('song',catalogs,$scope,$http,$sce,$stateParams,$cookies);
                var promise = CatalogService.service.getCatalogs($stateParams.songId);  //获取版权
                promise.then(function (res) {
                    $scope.catalog_list = res;
                });
                //抽查提交按钮
                $scope.checkMaterial = function(ckResult, ckSuggest, ckTagError){
                    checkCommon('song',ckResult,ckSuggest,ckTagError,$http,$stateParams,SweetAlert);
                };
                $scope.goBack = function(type,id){      //返回按钮
                    unLock(type,id,$http,$stateParams,SweetAlert);     //解锁审核状态
                };
                loadMoreRecord('songTag',$scope,$stateParams,$http,SweetAlert);
            }]
        })
        .state('material.preSong',{
            url: '/preSong',
            views: {
                '': {
                    templateUrl: 'app/views/song/song-info.html',
                    controller: 'PreDataController'
                }
            }
        })
}

angular.module('app.routes').controller('songController',["$scope", "$http", "$sce", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", "$state", "$filter", "SweetAlert", "SongService", "CatalogService", function($scope,$http,$sce,$stateParams,$cookies,$timeout,$rootScope,display,$state,$filter,SweetAlert,SongService,CatalogService){
    $scope.preBtn = true;
    $scope.type = 'song';
    if(checkEmpty($stateParams.songId)){ //新增页面逻辑
        $scope.data = {};
        $scope.data.composers = [];$scope.data.lyricsers = [];$scope.data.performers = [];$scope.data.albums = [];$scope.data.artists = [];
        $timeout(function () {
            $('#playTime').setTime({drag:true,a:0.05});
        }, 2000);
    }
    if(!checkEmpty($stateParams.tp)){
        if(checkEmpty($stateParams.songId)){ //新增页面逻辑
            $scope.data.type = $stateParams.tp;
        }
    }
    var catalogs = [{'name':'图片','id':'catalog-1'},{'name':'基础信息','id':'catalog-2'},{'name':'歌曲介绍','id':'catalog-3'},{'name':'创作背景','id':'catalog-4'},{'name':'获奖情况','id':'catalog-5'},{'name':'歌曲评价','id':'catalog-6'},{'name':'歌曲故事','id':'catalog-7'},{'name':'歌曲标签','id':'catalog-8'}];
    basicRequest('song',catalogs,$scope,$http,$sce,$stateParams,$cookies,true);
    getSongCatalogPre($scope, $stateParams, CatalogService);
    $scope.changeTemplate = function(tp){       //切换模板
        sweetAlertConfirm(SweetAlert,function(){
            $state.go('songEdit',{tp:tp});
            sweetAlertCommon(SweetAlert,'操作成功','success');
        },undefined,undefined,'更换模板将丢失部分数据');
    };
    $scope.getSearchResult = function(value,type,id){      //获取搜索数据
        var param = {};param.params = {};param.params.data={};
        if(id) param.params.data[id] = [],param.params.data[id].push(value);
        if(!id) param.params.data[type+'Keyword'] = value;
        param.params.data['isolated'] = 0;
        return $http.get(_search_url+'search/'+type+'.json', param).then(function(response){
            var ids = [];
            for(var i = 0; i < response.data.body.list.length; i++){
                ids.push(response.data.body.list[i][type+'Id']);
            }
            if(ids.size < 0){
                return;
            }else{
                return $http.jsonp(list_url + type + ".json?ids=" + ids.join(',')+'&'+CALLBACK).then(function(res){
                    var results = [];
                    for(var i in res.data.data){
                        if(res.data.data[i].status == 10){
                            results.push(res.data.data[i]);
                        }
                    }
                    return results.map(function(item){
                        if(item.status == 10){
                            var allstr = item[type+'Name'] + '--' + returnStatus(item.status) + ',';
                            if(type == 'artist')
                                allstr += item.sex + ','  + item.artistNameAlias + ',' + item.nation + ','
                            if(item.artists != undefined && item.artists != null){
                                for (var i = 0; i < item.artists.length; i++){
                                    allstr += item.artists[i].artistName + ',';
                                }
                            }
                            if(type == 'album')
                                allstr += item.publishTime;
                            allstr = allstr.substr(0, allstr.length - 1) + ',' + item[type+'Id'];
                            item.allstr = allstr;
                            return item;
                        }else{
                            return null;
                        }
                    });
                });
            }
        })
    };
    $scope.getDictionary = function(value, type){    //几种数据字典搜索（发行公司）
        return $http.get(dictionary_url + type + '.json', {
            params: {
                "search": value
            }
        }).then(function(response){
            //console.log(response.data);
            return response.data.data.map(function(item){
                return item;
            });
        })
    };
    $scope.addRelationData = function(data,arr,type){        //添加关联关系数据（添加歌手等）
        addRelationData(data,arr,type);
    };
    $scope.removeRelationData = function(data, arr){        //删除关联关系数据（删除歌手等）
        arr.remove(data);
    };
    $scope.addMovie = function (type) {
        if($scope.data[type] == undefined){
            $scope.data[type] = [];
        }
        var m = {movieType:'',name:'',type:''};
        $scope.data[type].push(m);
    };
    $scope.addOnlyData = function(data,obj,type,property){
        addOnlyData(data,obj,type,property);
    };
    $scope.removeOnlyData = function(property,data){
        deleteProperty(data,property);
        deleteProperty(data,property+'Id');
    };
    $scope.addUnknown = function(arr,type,id,name){
        addUnknown(arr,type,id,name);
    };
    $scope.goBack = function(){
        window.open(returnLastPage($stateParams.lastPage),'_self');
    };
    $scope.uploadImg = function(id){
        id = $scope.data ? $scope.data.songId : undefined;
        uploadImg(id,'song',$scope,$http,SweetAlert);
    };
    $scope.uploadLyric = function(data){
        uploadLyric($scope.data,$scope,SweetAlert);
    };
    $scope.clearLyric = function(){
        $scope.data.lyric = '';
    };
    $scope.editLyric = function(){
        $scope.lyricEdited = true;
    };
    $scope.new = function(type){
        addNewMaterial(type,$state,$stateParams);
    };
    $scope.deleteImg = function () {        //删除图片
        deleteImg($scope,$timeout,$rootScope,display);
    };
    $scope.downloadLyric = function(copyid){
        if(checkEmpty(copyid)){
            sweetAlertCommon(SweetAlert,'请填写版权ID','warning');
            return;
        }
        $.post(http_url + '/lyric/download/'+copyid+'.json').success(function(res){
            if(res.status == undefined){
                location.href = http_url + '/lyric/download/'+copyid+'.json';
            }else{
                sweetAlertCommon(SweetAlert,'暂无歌词','warning');
            }
            console.log(res);
        });
    };
    $scope.scoreChange = function(s,property){
        watchScore(s,property);
    };

    $scope.fixDateNew = function(date,data,property){
        if(checkEmpty($scope[data])){
            $scope[data] = {};
        }
        $scope[data][property] = fixDate(date);
    };
    $scope.submit = function(tagExt,albumId,preCatalogId){
        $scope.taggingData.tags = [];
        $("input[name=taggingCheck]:checked").each(function () {
            var tag = {};
            tag.tagId = $(this).val();
            tag.type = 0;
            $scope.taggingData.tags.push(tag);
        });
        if(!checkEmpty(tagExt)){
            tagExt.status = 1;
            $scope.taggingData.tagExt = tagExt;
        }
        if(!checkEmpty(albumId)) addRelationData({albumId:albumId}, $scope.data.albums,'album');
        $scope.data.publishTime = sliceDate($scope.data.publishTime);
        $scope.data.playTime = $('#playTime').val();
        if($scope.data.hasOwnProperty('movies')){   //排除字段全为空的值
            var movies = [];
            $scope.data.movies.forEach(function (obj) {
                movies.push(obj);
            });
            movies.forEach(function (obj) {
                var tempArr = [];
                for(var pro in obj){
                    tempArr.push(obj[pro]);
                }
                var flag = tempArr.every(function (value) { //如果都为空，才返回true否则false
                    return value === '';
                });
                if(flag) $scope.data.movies.remove(obj);
            });
        }
        // if($scope.preCatalogId) CatalogService.service.createCatalogPre($scope.preCatalogId, $scope.data)
        submit('song',$scope,$http,$stateParams,$filter,SweetAlert,preCatalogId,CatalogService);
    };
    $scope.tagTagging = function(item){
        $('.tag-content').append(getTag(item.name,item.id));
    };
    $scope.createSongRel = function (songId) {  //一键创建词曲作者并且关联标签
        var promise = SongService.service.createSongRel(songId);
        promise.then(function (res) {
            var obj = res.data;
            if(obj.status != 1){
                sweetAlertCommon(SweetAlert,'创建失败','error');
                return;
            }
            if(obj.data.hasOwnProperty('composers')){
                if(!$scope.data.hasOwnProperty('composers')) $scope.data.composers = [];
                $scope.data.composers = obj.data.composers;
            }
            if(obj.data.hasOwnProperty('lyricsers')){
                if(!$scope.data.hasOwnProperty('lyricsers')) $scope.data.lyricsers = [];
                $scope.data.lyricsers = obj.data.lyricsers;
            }
            if(obj.data.hasOwnProperty('tags')){
                obj.data.tags.forEach(function (val) {
                    var nodes = $('.tag-content').children();
                    var flag = true;
                    for(var j = 0; j < nodes.length; j++){
                        if(nodes[j].innerText.trim() == val.tagName){
                            flag = false;
                            break;
                        }
                    }
                    if(flag){
                        $('.tag-content').append(getTag(val.tagName,val.tagId));
                    }
                });

            }
            if(obj.data.hasOwnProperty('language')){
                if(!$scope.hasOwnProperty('artistTags')) $scope.artistTags = [];
                for(var i = 0; i < $scope.artistTags.length; i++){
                    if($scope.artistTags[i].tagId == obj.data.language.tagId) return;
                }
                obj.data.language.type = 15;
                $scope.artistTags.push(obj.data.language);
            }
            sweetAlertCommon(SweetAlert,'创建成功','success');
        });
    };
    loadMoreRecord('song',$scope,$stateParams,$http,SweetAlert);

    /*标签操作*/
    setTaggingTree($http, $scope);
    $scope.deleteAll = function(){
        sweetAlertConfirm(SweetAlert,function(){
            $('.level1').removeClass('checked');
            $('.W_btn_b.W_btn_tag').remove();
            sweetAlertCommon(SweetAlert, '删除成功', 'success');
        },undefined,'确认要删除全部标签?',undefined);
    };
    $scope.expandAll = function(){
        expandAll('treeDemo');
    };
    $scope.collapseAll = function(){
        collapseAll('treeDemo');
    }
}]);
function setTaggingTree($http, $scope) {
    var url = tag_tree_url + 'getTagsTreeByMaterialType?materialType=3&maxLevel=4';
    $http.get(url).success(function(res){
        $scope.tagTreeFilter = [];
        for(var i = 0; i < res.treeEntityList.length; i++){
            if(res.treeEntityList[i].tagType == 0){
                res.treeEntityList[i].iconSkin = 'pIcon01';
                $scope.tagTreeFilter.push(res.treeEntityList[i]);
            }
        }
        function compare(a,b) {
            var _sub = a.tagSort - b.tagSort;
            var _result = ((a.parent && b.parent) && _sub) ||
                ((!a.parent && b.parent) && 1) || ((a.parent && !b.parent) && -1)|| ((!a.parent && !b.parent) && _sub);
            // if(a.pId == 1002598952 || b.pId == 1002598952) return a.tagSort - b.tagSort;
            // if(a.parent && b.parent) return a.tagSort - b.tagSort;
            // if(a.parent && !b.parent) return -1;
            // if(!a.parent && b.parent) return 1;
            // if(!a.parent && !b.parent) return a.tagSort - b.tagSort;

            // if (b.parent)   return 1;
            return _result;
        }

        $scope.tagTreeNodes = res.treeEntityList;
        for(var i =0;i < $scope.tagTreeNodes.length;i++){
            $scope.tagTreeNodes[i].open = false;
        }
        $scope.tagTreeNodes.sort(compare);
        $.fn.zTree.init($("#treeDemo"), tagTreeSetting_tagging, $scope.tagTreeNodes);
        var treeObj = $.fn.zTree.getZTreeObj('treeDemo');

        expandAll('treeDemo');
        collapseAll('treeDemo');

        //默认展开ROOT节点
        var rootNode = treeObj.getNodeByParam("name", "ROOT", null);
        treeObj.expandNode(rootNode, true, false, false, false);
        var allNodes =  treeObj.transformToArray(treeObj.getNodes());
        for(var i = 0; i < allNodes.length; i++){   //将没有children的节点设置为浮动
            if(checkEmpty(allNodes[i].children)){
                var c = $('#'+allNodes[i].tId).attr('class');
                if((c == 'level2' || c == 'level3' || c == 'level4') && allNodes[i].tagType == 0){
                    if(allNodes[i].pId == 1000001851) var _width = '220px';  //蓝调宽度特殊处理
                    else var _width = '150px';
                    $('#'+allNodes[i].tId).css({'float':'left','clear':'inherit', 'width': _width});
                }
            }
        }

        var lastValue = "", nodeList = [], fontCss = {};
        var key = $('#key');
        function searchNode(e) {
            var zTree = $.fn.zTree.getZTreeObj("treeDemo");
            var value = $.trim(key.get(0).value);
            var keyType = "";
            keyType = "name";
            if (key.hasClass("empty")) {
                value = "";
            }
            if (lastValue === value) return;
            lastValue = value;
            if (value === "") return;
            updateNodes(false);

            nodeList = zTree.getNodesByParamFuzzy(keyType, value);

            updateNodes(true);

        }
        function updateNodes(highlight) {
            var zTree = $.fn.zTree.getZTreeObj("treeDemo");
            for( var i=0, l=nodeList.length; i<l; i++) {
                nodeList[i].highlight = highlight;
                zTree.updateNode(nodeList[i]);
            }
        }
        function focusKey(e) {
            if (key.hasClass("empty")) {
                key.removeClass("empty");
            }
        }
        function blurKey(e) {
            if (key.get(0).value === "") {
                key.addClass("empty");
            }
        }
        key.bind("focus", focusKey)
            .bind("blur", blurKey)
            .bind("propertychange", searchNode)
            .bind("input", searchNode);

    });
}
function getSongCatalogPre($scope,$stateParams,CatalogService) { //获取预编目版权ID
    if(!checkEmpty($stateParams.songId)) var _promise = CatalogService.service.getCatalogPre($stateParams.songId);
    if(_promise) _promise.then(function (res) {
        if(res.data.copyrightPre) $scope.preCatalogId = res.data.copyrightPre[0];
    });
}
function removeTag(obj){
    $(obj).parent().remove();
    var tagId = $(obj).prev().attr('id');
    var treeObj = $.fn.zTree.getZTreeObj('treeDemo');
    var checkedNodes = treeObj.getCheckedNodes();
    for(var i = 0; i < checkedNodes.length; i++){
        if(checkedNodes[i].id == tagId){
            $('#'+checkedNodes[i].tId).children('a').removeClass('checked');
            treeObj.checkNode(checkedNodes[i], false, true, true);
            checkedNodes[i].checked = false;
            var childrenNodes = getAllChildNode(checkedNodes[i], []);
            childrenNodes.forEach(function(node){
                $('#'+node.tId).children('a').removeClass('checked');
                $('input[value=' + node.id + ']').parent().remove();
            });
        }
    }
}
function songFillSearchCondition($stateParams, $scope, $http, $cookies, songTagTree){
    //获取所有git用户
    //填充最后编辑人
    if(!isPropertyEmpty($stateParams.lastEdit)){
        if($scope.$parent.users ==undefined || $scope.$parent.users.length <= 0){
            getAllUser($http,function(users){
                $scope.$parent.users = git_users;
                fillUser();
            })
        } else {
            fillUser();
        }
    }
    function fillUser(){
        if(!isPropertyEmpty($stateParams.lastEdit)){
            for(var n = 0; n < $scope.$parent.users.length; n++){
                if($scope.$parent.users[n].uId == $stateParams.lastEdit){
                    $scope.form.lastEditSearch = $scope.$parent.users[n].name;
                }
            }
        }
    }


    //if(!isPropertyEmpty($stateParams.songIds)){
    //    $scope.form.songIds = $stateParams.songIds;
    //}
    //if(!isPropertyEmpty($stateParams.songKeyword)){
    //    $scope.form.songKeyword = $stateParams.songKeyword;
    //}
    //if(!isPropertyEmpty($stateParams.artistKeyword)){
    //    $scope.form.artistKeyword = $stateParams.artistKeyword;
    //}
    //if(!isPropertyEmpty($stateParams.albumKeyword)){
    //    $scope.form.albumKeyword = $stateParams.albumKeyword;
    //}
    //if(!isPropertyEmpty($stateParams.karakalStatus)){
    //    $scope.form.karakalStatus = $stateParams.karakalStatus;
    //}
    //if(!isPropertyEmpty($stateParams.lyricPerson)){
    //    $scope.form.lyricPerson = $stateParams.lyricPerson;
    //}
    //if(!isPropertyEmpty($stateParams.composePerson)){
    //    $scope.form.composePerson = $stateParams.composePerson;
    //}
    //if(!isPropertyEmpty($stateParams.conductor)){
    //    $scope.form.conductor = $stateParams.conductor;
    //}
    //if(!isPropertyEmpty($stateParams.player)){
    //    $scope.form.player = $stateParams.player;
    //}
    //if(!isPropertyEmpty($stateParams.copyrightId)){
    //    $scope.form.copyrightId = $stateParams.copyrightId;
    //}
    //if(!isPropertyEmpty($stateParams.projectName)){
    //    $scope.form.projectName = $stateParams.projectName;
    //}
    if(!isPropertyEmpty($stateParams.tagIds)){
        for(var i = 0; i < $stateParams.tagIds.split(',').length; i++){
            //遍历获取到的标签树获得标签ID对应的标签
            var tag = getTagById($stateParams.tagIds.split(',')[i], songTagTree);
            if(tag != undefined){
                $scope.form.searchTag.push(tag);
            }
        }
    }
    if(!isPropertyEmpty($stateParams.tagBeans)) $stateParams.tagBeans = JSON.parse($stateParams.tagBeans);
    for(var property in $stateParams){
        if(!isPropertyEmpty($stateParams[property])){
            $scope.form[property] = $stateParams[property];
        }
    }
    if(!checkEmpty($stateParams.pageNo)) $scope.pageNo = $stateParams.pageNo;
    if(!checkEmpty($stateParams.pageSize)) $scope.pageSize = $stateParams.pageSize;
}
function returnStatus(s){
    if(s == 1)
        return '抽';
    if(s == 10)
        return '正常';
    if(s == 11)
        return '正常待编目';
    if(s == 12)
        return '正常待审核';
    if(s == 14)
        return '审核中';
    if(s == 15)
        return '编辑中';
    if(s == 20)
        return '删除';
    if(s == 30)
        return '禁用';
    if(s == 111)
        return '审核未通过';
    if(s == -1)
        return '未关联曲库';
}
angular.module('app.routes').controller('PaginationCustomController',["$scope", "$state", "$stateParams", function($scope,$state,$stateParams){
    if(!checkEmpty($stateParams.pageNo)) $scope.pageNo = $stateParams.pageNo;
    if(!checkEmpty($stateParams.pageSize)) $scope.pageSize = $stateParams.pageSize;
    $scope.choosePage = function(){//分页跳转
        $state.go($state.current.name,{pageNo: $scope.page.currentPage});
    };
    $scope.jumpPage = function(pageNo){ //页面跳转
        $state.go($state.current.name,{pageNo:pageNo});
    };
    $scope.pageSizeOptions = [{'value':'20'},{'value':'50'},{'value':'100'},{'value':'150'},{'value':'200'}];
    if(checkEmpty($scope.pageSize)) $scope.pageSize = $scope.pageSizeOptions[1].value;
        // $scope.pageSize = $scope.pageSize == undefined ? $scope.pageSizeOptions[1].value : $scope.pageSize;
    $scope.choosePageSize = function (pageSize) {   //每页展示数据
        $state.go($state.current.name,{pageSize:pageSize,pageNo:1});
        console.log($state.current);
    };
}]);

/**
 * Created by hao.cheng on 2016/7/6.
 */
(function () {
    'use strict';

    angular.module('app.routes').service('SongService',SongService);
    SongService.$inject = ['$http','BaseService'];
    function SongService($http,BaseService) {
        var _self = this;
        this.service = {
            'changeSongStatus': changeSongStatus,
            'createSongRel': createSongRel,
            'getCount': getCount
        };
        function changeSongStatus(id,status) {  //改变歌曲状态
            BaseService.service.changeDataStatus('song',id,status);
        }
        function createSongRel(songId) { //创建词曲作者并且关联标签
            return  $http.jsonp(CATALOG_CREATESONGREL + songId + '.json?' + CALLBACK).then(function (res) {
                return res;
            });
        }
        function getCount(){

        }
    }
})();

/**
 * Created by kiraCheng on 2015/11/30.
 */
angular
    .module('app.routes').config(["$stateProvider", "$urlRouterProvider", function($stateProvider,$urlRouterProvider){
    $stateProvider
        .state('app.songForm',{
            url:'/songForm',
            cache:'false',
            templateUrl:'app/views/songform/song_form.html',
            controller: ["$scope", "$http", function($scope,$http){
            }]
        })
        .state('app.songForm.main', {
            url: '/main',
            cache:'false',
            views: {
                'form-content': {
                    templateUrl: 'app/views/songform/song_form_main.html',
                    controller: ["$scope", "$http", "$stateParams", function ($scope, $http, $stateParams) {
                        var wangyiList = [];
                        var wangyiurl = song_form_list + 'wangyi.json?callback=JSON_CALLBACK&maxResult=10&ctrl=es&';
                        $http.jsonp(wangyiurl).success(function(res){
                            for(var i = 0; i < res.data.resultlist.length; i++){
                                pushData(res.data.resultlist[i], wangyiList);
                            }
                            //console.log(wangyiList);
                        });
                        var xiamiList = [];
                        var xiamiurl = song_form_list + 'xiami.json?callback=JSON_CALLBACK&maxResult=10&ctrl=es';
                        $http.jsonp(xiamiurl).success(function(res){
                            for(var i = 0; i < res.data.resultlist.length; i++){
                                pushData(res.data.resultlist[i], xiamiList);
                            }
                        });
                        var tencentList = [];
                        var tencenturl = song_form_list + 'tencent.json?callback=JSON_CALLBACK&maxResult=10&ctrl=es';
                        $http.jsonp(tencenturl).success(function(res){
                            for(var i = 0; i < res.data.resultlist.length; i++){
                                pushData(res.data.resultlist[i], tencentList);
                            }
                        });
                        $scope.wangyi = wangyiList;
                        $scope.xiami = xiamiList;
                        $scope.tencent = tencentList;
                    }]
                }
            }
        })
        .state('app.songForm.more',{
            url:'/more?:site$:firstIndex$:searchName$:order&:pageNo&:pageSize',
            cache:'false',
            views:{
                'form-content':{
                    templateUrl: 'app/views/songform/song_form_more.html',
                    controller:["$scope", "$http", "$stateParams", "$state", function($scope,$http,$stateParams,$state){
                        //console.log($stateParams.order);
                        //控制是否显示下拉列表
                        //$scope.showList = false;
                        //console.log('进入了' + $stateParams.site + '更多界面');
                        $scope.site = $stateParams.site;
                        $scope.firstIndex = parseInt($stateParams.firstIndex);
                        if($scope.firstIndex < 0){
                            console.log('1');
                            return;
                        }
                        $scope.searchName = $stateParams.searchName;
                        var site = $stateParams.site;
                        $scope.siteName = new Object();
                        if(site == 'wangyi'){
                            $scope.siteName.cn = '网易';
                            $scope.siteName.en = site;
                        } else if(site == 'xiami'){
                            $scope.siteName.cn = '虾米';
                            $scope.siteName.en = site;
                        } else if(site == 'tencent'){
                            $scope.siteName.cn = '腾讯';
                            $scope.siteName.en = site;
                        }
                        if($stateParams.pageNo != undefined && $stateParams.pageNo != '') $stateParams.firstIndex = ($stateParams.pageNo - 1) * 100;
                        $scope.itemsPerPage = checkEmpty($stateParams.pageSize)?100:$stateParams.pageSize;
                        var moreList = [];
                        var url = song_form_url + '/pl/ls/' + $stateParams.site + '.json?callback=JSON_CALLBACK&firstIndex=' + $stateParams.firstIndex + '&ctrl=es&order='+ $stateParams.order +  '&maxResult='+$scope.itemsPerPage+'&srhname=';
                        if($stateParams.searchName != undefined && $stateParams.searchName != null && $stateParams.searchName != ''){
                            url += $stateParams.searchName;
                        }
                        $http.jsonp(url).success(function(res){
                            for(var i = 0; i < res.data.resultlist.length; i++){
                                pushData(res.data.resultlist[i], moreList);
                            }
                            //分页显示
                            console.log($scope.currentPage);
                            paginationDiscreteness($scope,5,res.data.maxResult,res.data.totalrecord,Math.ceil(res.data.totalrecord/ res.data.maxResult),res.data.firstIndex / res.data.maxResult + 1);
                            $scope.maxSize = 5;
                            $scope.itemsPerPage = res.data.maxResult;

                            $scope.totalItems = res.data.totalrecord;
                        });
                        $scope.moreList = moreList;
                        //分页函数
                        $scope.choosePage = function(){
                            console.log($scope.currentPage);
                            $state.go('app.songForm.more',{firstIndex:(($scope.currentPage - 1) * $scope.itemsPerPage)});
                        }
                    }]
                }
            }
        })
        .state('app.songForm.detail',{
            url:'/detail?:site&:id',
            cache:'false',
            views:{
                'form-content':{
                    templateUrl: 'app/views/songform/song_form_detail.html',
                    controller:["$scope", "$http", "$stateParams", "SweetAlert", function($scope,$http,$stateParams,SweetAlert){
                        $scope.addPlaySong = function(songId,copyId){
                            addPlaySong(songId,copyId,SweetAlert);
                        };
                        $http.jsonp(song_form_detail + $stateParams.site + '/' + $stateParams.id + '.json?callback=JSON_CALLBACK&ctrl=pset').success(function(res){
                            $scope.data = res.data;
                            if(res.data.imgs != null){
                                $scope.data.img = JSON.parse(res.data.imgs)[0];
                            }else{
                                $scope.data.img = '/mls/resources/img/album_separate.gif';
                            }
                            $scope.data.tags = JSON.parse(res.data.tags);
                            var ids = [];
                            var site_map = {};
                            for(var i = 0; i < res.data.playlistSongs.length;i ++){
                                ids.push(res.data.playlistSongs[i].songId);
                            }
                            $http.jsonp(song_form_list_mls + '/' + $stateParams.site + '/song.json?callback=JSON_CALLBACK&ids=' + ids.join(',') + '&ctrl=11').success(function(data){
                                var songIds = [];
                                $scope.data.songs = data.data;
                                for(var a = 0; a < $scope.data.songs.length; a++){
                                    $scope.data.songs[a].album =  $scope.data.songs[a].albums[0];
                                    songIds.push($scope.data.songs[a].songId);
                                }
                                //查询歌曲的曲库ID跳转到咪咕音乐用

                                $http.jsonp(http_url + "/mbs/karakal/song.json?callback=JSON_CALLBACK&mids=" + songIds.join(',')).success(function(res){
                                    var songQidMap = new HashMap();
                                    for (var i = 0; i < res.data.list.length; i++){
                                        //console.log(res.data.resultlist[i][0]);
                                        songQidMap.put(res.data.list[i][0], res.data.list[i][1].split(',')[0]);
                                    }
                                    //console.log(songQidMap.keys());
                                    for (var j = 0; j < $scope.data.songs.length; j++){
                                        //console.log(songQidMap.get($scope.data.songs[j].songId));
                                        if(songQidMap.containsKey($scope.data.songs[j].songId)){
                                            $scope.data.songs[j].qid = songQidMap.get($scope.data.songs[j].songId);
                                            //console.log($scope.data.songs[j]);
                                        } else {
                                            $scope.data.songs[j].qid = '';
                                        }
                                    }
                                    //console.log($scope.data.songs);
                                });

                            });
                        });
                    }]
                }
            }
        })
}]);
function pushData(data, siteList){
    var songList = new Object();
    songList.id = data.id;
    songList.name = data.name;
    songList.ctime = data.ctime;
    if(data.imgs != undefined && data.imgs!= null && data.imgs != ''){
        songList.img = data.imgs.replace(/"/g,'').replace('[','').replace(']','');
    } else {
        songList.img = '';
    }

    songList.listenNum = data.playlistExt.playNum;
    songList.songNum = data.playlistSongs.length;
    songList.tag = data.tags.replace(/"/g,'').replace('[','').replace(']','');
//console.log(res.data[i].tags.replace(/"/g,'').replace('[','').replace(']',''));
    siteList.push(songList);
}
angular
    .module('app.routes').filter('to_trusted', ['$sce', function ($sce) {//解析html标签过滤器
    return function (text) {
        return $sce.trustAsHtml(text);
    }
}]);
function HashMap() {
    /** Map 大小 **/
    var size = 0;
    /** 对象 **/
    var entry = new Object();
    /** 存 **/
    this.put = function (key, value) {
        if (!this.containsKey(key)) {
            size++;
        }
        entry[key] = value;
    };
    /** 取 **/
    this.get = function (key) {
        if (this.containsKey(key)) {
            return entry[key];
        }
        else {
            return null;
        }
    };
    /** 删除 **/
    this.remove = function (key) {
        if (delete entry[key]) {
            size--;
        }
    };
    /** 是否包含 Key **/
    this.containsKey = function (key) {
        return (key in entry);
    };
    /** 是否包含 Value **/
    this.containsValue = function (value) {
        for (var prop in entry) {
            if (entry[prop] == value) {
                return true;
            }
        }
        return false;
    };
    /** 所有 Value **/
    this.values = function () {
        var values = new Array(size);
        for (var prop in entry) {
            values.push(entry[prop]);
        }
        return values;
    };
    /** 所有 Key **/
    this.keys = function () {
        var keys = new Array(size);
        for (var prop in entry) {
            keys.push(prop);
        }
        return keys;
    };
    /** Map Size **/
    this.size = function () {
        return size;
    }
}
/**
 * Created by YuChunzhuo on 2015/11/22.
 */

/**
 * 页面数据的各种操作
 */
angular.module('app.routes').controller('tagTableDataController',["$scope", "$http", "$stateParams", "$state", "$timeout", "$rootScope", "display", "SweetAlert", function($scope, $http, $stateParams, $state, $timeout, $rootScope, display,SweetAlert) {
    //审核通过单条数据
    $scope.postUrl = function (data) {
        checkOneData(data, $scope, $http, $timeout, $rootScope, display);
    };
    //置顶
    $scope.useTop = function(song){
        setDataPosition(song, $http, $scope, $uibModal);
    };
    //取消置顶
    $scope.unuseTop = function(song){
        resetDataPosition(song, $http, $scope,$timeout,$rootScope,display);
    };
    //播放试听歌曲
    $scope.addPlaySong = function(datas, data){
        //当前播放歌曲显示红色边框
        playSelectOne(datas, data);
        //播放歌曲
        addPlaySong(data.songId, data.cid,SweetAlert);
    };
    //复选框的单个选择
    $scope.chk = function (data, checkb, datas) {
        selectOne(data, checkb, 'isCheck');
        //listSongId = $scope.choseIds;
        listSongId = getPropertyFromCheckBox(datas, 'isCheck', true, 'songId');
    };
    //复选框的全选
    $scope.checkAll = function (all, datas) {
        selectAll($scope, datas, 'isCheck', 'allIsCheck');
        //listSongId = $scope.choseIds;
        listSongId = getPropertyFromCheckBox(datas, 'isCheck', true, 'songId');
    };
    //批量提交审核数据
    $scope.batchPass = function (flag, datas) {
        var chooseArray = getPropertyFromCheckBox(datas, 'isCheck', true, 'id');
        var unChooseArray = getPropertyFromCheckBox(datas, 'isCheck', false, 'id');
        batchCheckData(flag, $http, chooseArray, unChooseArray,$stateParams.tagId,$timeout,$rootScope,display);
    };
}]);
angular.module('app.routes').controller('tagTableDataSeparatPageController',["$scope", "$http", "$stateParams", "$state", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $state, $timeout, $rootScope, display) {
    //分页函数
    $scope.choosePage = function(nowurl){
        console.log(nowurl);
        console.log($scope.currentPage);
        $state.go(nowurl,{firstIndex:(($scope.currentPage - 1) * $scope.itemsPerPage)});
    };
    //跳转指定页码
    $scope.setPage = function(num, nowurl){
        console.log(nowurl);
        console.log(num);
        jump2PageNum(nowurl, num, $state,$timeout,$rootScope,display);
    };
}]);



angular.module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.tag',{                  //标签管理页面
            url: '/tag',
            views: {
                '':{
                    templateUrl: "app/views/tags/tag-title.html"
                }
            }

        })
        .state('app.tag.list',{             //标签列表页面
            url: '/:id',
            views: {
                "view-list": {
                    templateUrl: "app/views/tags/tag-list.html",
                    controller: ["$scope", "$http", "$stateParams", function($scope,$http,$stateParams){
                        $http.get(tag_tree_url + 'getTagsByMaterialAndUser.do?userId=' + _session.id + '&materialType=3').success(function (res) {
                            var tags = [];
                            for(var i=0; i < res.tnList.length; i ++){
                                var nodeList = [];
                                var tag_all = getAllNode(res.tnList[i],nodeList);
                                var tag = tag_all[tag_all.length -1];
                                tag.children = [];
                                for(var j = 0; j < tag_all.length - 1;j++){
                                    tag.children.push(tag_all[j]);
                                }
                                tags.push(tag);
                            }
                            $scope.tags_title = tags;

                            for(var i = 0; i < $scope.tags_title.length; i++){
                                if($scope.tags_title[i].id == $stateParams.id){
                                    $scope.tags_list = $scope.tags_title[i].children;
                                    //console.log('获取到了子数据');
                                }
                            }
                        });
                    }]
                }
            }
        })
        .state('app.tag.list.cpr',{
            url:'/cpr?:tagId$:tagName$:firstIndex$:status$:ctype$:searchSongName$:searchArtistName$:searchCpId$:searchUser$:dt1$:dt2$:searchOrder',
            views:{
                "tag-uib-tab":{
                    templateUrl:"app/views/tags/tag-uib-tab.html",
                    controller:["$scope", "$http", "$stateParams", "$filter", "$state", "$cookies", "$uibModal", function($scope,$http,$stateParams, $filter, $state, $cookies, $uibModal){
                        $scope.tagId = $stateParams.tagId;
                        $scope.tagName = $stateParams.tagName;
                        $scope.status = $stateParams.status;
                        $scope.firstIndex = $stateParams.firstIndex;
                        $scope.ctype = $stateParams.ctype;
                        $scope.params = new Object();
                        //console.log($stateParams.tagId + $stateParams.tagName + $stateParams.status + $stateParams.firstIndex + $stateParams.ctype);
                        //统计各种版权多少数量
                        $http.jsonp(http_tag_url + 'tag/'+$stateParams.tagId+'/99.json?callback=JSON_CALLBACK&firstIndex=0&maxResulet=1&order=&count=counted').success(function(res){
                            $scope.allNum = res.data.totalrecord;
                        });
                        $http.jsonp(http_tag_url + 'tag/'+$stateParams.tagId+'/99.json?callback=JSON_CALLBACK&firstIndex=0&ctp=cr&maxResulet=1&order=&count=counted').success(function(res){
                            $scope.crNum = res.data.totalrecord;
                        });
                        //获取所有用户的ID和名字
                        $scope.users = [];
                        $http.get(git_user + '&private_token=' +  $cookies.get('kpk')).success(function(res){
                            //console.log('成功获得所有用户');
                            for(var i = 0; i < res.length; i++){
                                if(res[i].state == 'active'){
                                    var user = new Object();
                                    user.userId = res[i].id;
                                    user.userName = res[i].name + "——" + res[i].username;
                                    $scope.users.push(user);
                                }
                            }
                        });
                        //console.log(formatDate(Date.parse($stateParams.dt1),$filter));
                        bindSearch($scope,$stateParams,$filter);
                        //一边输入一边调用获得结果的接口
                        $scope.getSearchResult = function(value){
                            //console.log(value);
                            //return $http.get('/cmssearch/1/search/song.json', {
                            //console.log(value);
                            var condition = value.split('@@');
                            console.log(condition.length > 1 ? (condition.length - 1) : 0);
                            return $http.get(_search_song, {
                                params: {
                                    data:{
                                        "songKeyword": condition[0],
                                        //"artistKeyword": condition[condition.length > 1 ? (condition.length - 1) : 1] ,
                                        "artistKeyword": condition[1]
                                    }
                                }
                            }).then(function(response){
                                return response.data.body.list.map(function(item){
                                    //console.log(item);
                                    var allstr = item.songName + '-';
                                    if(item.artists != undefined && item.artists != null){
                                        for (var i = 0; i < item.artists.length; i++){
                                            allstr += item.artists[i].artistName + ',';
                                        }
                                    }
                                    allstr = allstr.substr(0, allstr.length - 1);
                                    item.allstr = allstr;
                                    return item;
                                });
                            });
                        };
                        //把搜索出来的结果打上标签
                        $scope.addSong2Tag = function(song){
                            var modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: 'myModalContent.html',
                                controller: 'addSong2TagCtrl',
                                resolve: {
                                    song: function () {
                                        return song;
                                    },
                                    tagId: function(){
                                        return $stateParams.tagId;
                                    }
                                }
                            });
                            //console.log(song);
                            //console.log($stateParams.tagId);
                            //var r=confirm("确认添加当前歌曲并置顶吗？");
                            //if(r){
                            //    var url = tag_add_reltags + "song/" + song.songId + '.json?callback=JSON_CALLBACK&tids=' + $stateParams.tagId;
                            //    console.log(url);
                            //    $http.jsonp(url).success(function(res){
                            //        if(1){
                            //            var url2 = http_tag_url + 'rank/add.json?callback=JSON_CALLBACK&songId=' + song.songId + '&tagId=' + $stateParams.tagId + '&idx=0';
                            //            $http.jsonp(url2).success(function(res2){
                            //                console.log(res2);
                            //            });
                            //            alert('打标签成功');
                            //        } else {
                            //            alert('打标签失败');
                            //        }
                            //    }).error(function(res){
                            //        alert('发生异常');
                            //    });
                            //}
                        };
                        //改变排序条件
                        $scope.selectOrder = function(params){
                            if(params.searchUser == undefined){
                                $state.go('app.tag.list.cpr.tagIdCr',{tagId:$scope.tagId,tagName:$scope.tagName,firstIndex:0,status:$scope.status,ctype:$scope.ctype,searchSongName:params.searchSongName,searchArtistName:params.searchArtistName,searchCpId:params.searchCpId,dt1:params.dt1,dt2:params.dt2,searchOrder:params.searchOrder});
                            } else {
                                $state.go('app.tag.list.cpr.tagIdCr',{tagId:$scope.tagId,tagName:$scope.tagName,firstIndex:0,status:$scope.status,ctype:$scope.ctype,searchSongName:params.searchSongName,searchArtistName:params.searchArtistName,searchCpId:params.searchCpId,searchUser:params.searchUser.userId,dt1:params.dt1,dt2:params.dt2,searchOrder:params.searchOrder});
                            }

                        };
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                    }]
                },
                "tag-view": {               //选择查询的标签
                    templateUrl: "app/views/tags/tag.html",
                    controller:["$scope", "$http", "$stateParams", function($scope,$http,$stateParams){
                        //console.log("进入了tag.html");
                        $scope.id = $stateParams.tagName;
                    }]
                }
            }
        })
        .state('app.tag.list.cpr.tagId', {
            //url: '/tagId$:searchSongName$:searchArtistName$:searchCpId$:searchUser$:dt1$:dt2$:searchOrder',
            url: '/tagId',
            views: {
                "data-list": {              //全部标签数据页面
                    templateUrl: "app/views/tags/data-list.html",
                    controller: ["$cookieStore", "$cookies", "$scope", "$http", "$stateParams", "$uibModal", "$state", "$filter", "$timeout", "$rootScope", "display", function ($cookieStore, $cookies, $scope, $http, $stateParams, $uibModal, $state, $filter, $timeout, $rootScope, display) {
                        $scope.parseInt = parseInt;        //转换数值函数
                        $scope.nowurl = 'app.tag.list.cpr.tagId';
                        //console.log($stateParams.tagId + $stateParams.tagName + $stateParams.status + $stateParams.firstIndex + $stateParams.ctype);
                        var firstIndex = parseInt($stateParams.firstIndex);
                        if (firstIndex < 0) {
                            return;
                        }
                        //bindSearch($scope, $stateParams);
                        //拼接当前界面数据url
                        // /全部
                        var url = http_tag_url + 'tag/' + $stateParams.tagId + '/' + $scope.status + '.json?callback=JSON_CALLBACK&firstIndex=' + firstIndex;
                        //console.log($scope.params);
                        //completeUrl();
                        url = completeUrl($stateParams, $scope, url, $filter);
                        console.log(url);
                        $http.jsonp(url).success(function (res) {
                            var songMaps = new HashMap();  //新接口只有歌曲ID标签ID等少数数据，需要自己再查一次
                            var songIds = [];
                            getDataMap(res, songMaps, songIds ,$stateParams);
                            //把所有ID一起查询
                            if (songIds.length > 0) {
                                getSongByIds($http, songMaps, songIds,$stateParams,$scope);
                            }

                            var songList = [];
                            for (var p = 0; p < songIds.length; p++) {
                                songList.push(songMaps.get(songIds[p]));
                            }
                            getTagDatas(songList, res.data.totalrecord, res.data.maxResult, res.data.firstIndex, $stateParams.tagId, $scope);
//                                    console.log($scope.datas);
                            $scope.choseArr = [];
                            $scope.unchoseArr = [];
                            $scope.choseIds = [];
                            $scope.allIsCheck = false;
                            for (var i = 0; i < $scope.datas.length; i++) {
                                $scope.datas[i].isCheck = false;
                                $scope.datas[i].playCheck = false;
                                data = $scope.datas[i];
                                $scope.unchoseArr.push(data.id);
                            }
                            //分页显示
                            $http.jsonp(url + "&count=counted").success(function(res){
                                tagSeparatePage($scope, res, $stateParams);
                            });
                            getPageData(res.data.maxResult, res.data.firstIndex, $stateParams.tagId, $stateParams.tagName, $stateParams.status, "");
                        });
                    }]
                }
            }
        })
        .state('app.tag.list.cpr.tagIdCr', {
            //url: '/tagIdCr$:searchSongName$:searchArtistName$:searchCpId$:searchUser$:dt1$:dt2$:searchOrder',
            url: '/tagIdCr',
            views: {
                "data-list": {              //正式未过期标签数据页面
                    templateUrl: "app/views/tags/data-list.html",
                    controller: ["$cookieStore", "$cookies", "$scope", "$http", "$stateParams", "$uibModal", "$state", "$filter", "$timeout", "$rootScope", "display", function ($cookieStore, $cookies, $scope, $http, $stateParams, $uibModal, $state, $filter, $timeout, $rootScope, display) {
                        //console.log($stateParams.tagId + $stateParams.tagName + $stateParams.status + $stateParams.firstIndex + $stateParams.ctype);
                        //console.log($stateParams.tagId);
                        $scope.nowurl = 'app.tag.list.cpr.tagIdCr';
                        $scope.parseInt = parseInt;        //转换数值函数
                        $scope.tagId = $stateParams.tagId;
                        $scope.tagName = $stateParams.tagName;
                        $scope.status = $stateParams.status;
                        $scope.ctype = $stateParams.ctype;
                        var firstIndex = parseInt($stateParams.firstIndex);
                        if (firstIndex < 0) {
                            return;
                        }
                        //bindSearch($scope, $stateParams);
                        //正式未过期
                        var url = http_tag_url + 'tag/' + $stateParams.tagId + '/' + $scope.status + '.json?callback=JSON_CALLBACK&firstIndex=' + firstIndex + '&ctp=cr';
                        url = completeUrl($stateParams, $scope, url, $filter);
                        $http.jsonp(url).success(function (res) {
                            var songMaps = new HashMap();  //新接口只有歌曲ID标签ID等少数数据，需要自己再查一次
                            var songIds = [];
                            getDataMap(res, songMaps, songIds, $stateParams);
                            //console.log(songIds.join(','));
                            //把所有ID一起查询
                            if (songIds.length > 0) {
                                getSongByIds($http, songMaps, songIds,$stateParams,$scope);
                            }
                            var songList = [];
                            for (var p = 0; p < songIds.length; p++) {
                                songList.push(songMaps.get(songIds[p]));
                            }
                            getTagDatas(songList, res.data.totalrecord, res.data.maxResult, res.data.firstIndex, $stateParams.tagId, $scope);
//                                    console.log($scope.datas);
                            $scope.choseArr = [];
                            $scope.unchoseArr = [];
                            $scope.choseIds = [];
                            $scope.allIsCheck = false;
                            for (var i = 0; i < $scope.datas.length; i++) {
                                $scope.datas[i].isCheck = false;
                                $scope.datas[i].playCheck = false;
                                data = $scope.datas[i];
                                $scope.unchoseArr.push(data.id);
                            }
                            //分页显示
                            //分页显示
                            $http.jsonp(url + "&count=counted").success(function(res){
                                tagSeparatePage($scope, res, $stateParams);
                            });
                            getPageData(res.data.maxResult, res.data.firstIndex, $stateParams.tagId, $stateParams.tagName, $stateParams.status, "cr");
                        });
                    }]
                }
            }
        })
        .state('app.tag.list.cpr.tagIdHc', {
            //url: '/tagIdHc$:searchSongName$:searchArtistName$:searchCpId$:searchUser$:dt1$:dt2$:searchOrder',
            url: '/tagIdHc',
            views: {
                "data-list": {              //互联网版权标签数据页面
                    templateUrl: "app/views/tags/data-list.html",
                    controller: ["$cookieStore", "$cookies", "$scope", "$http", "$stateParams", "$uibModal", "$state", "$filter", "$timeout", "$rootScope", "display", function ($cookieStore, $cookies, $scope, $http, $stateParams, $uibModal, $state, $filter, $timeout, $rootScope, display) {
                        $scope.nowurl = 'app.tag.list.cpr.tagIdHc';
                        $scope.parseInt = parseInt;        //转换数值函数
                        $scope.tagId = $stateParams.tagId;
                        $scope.tagName = $stateParams.tagName;
                        $scope.status = $stateParams.status;
                        $scope.ctype = $stateParams.ctype;
                        var firstIndex = parseInt($stateParams.firstIndex);
                        if (firstIndex < 0) {
                            return;
                        }
                        //bindSearch($scope, $stateParams);
                        //互联网
                        var url = http_tag_url + 'tag/' + $stateParams.tagId + '/' + $scope.status + '.json?callback=JSON_CALLBACK&firstIndex=' + firstIndex + '&ctp=hc';
                        url = completeUrl($stateParams, $scope, url, $filter);
                        console.log(url);
                        $http.jsonp(url).success(function (res) {
                            var songMaps = new HashMap();  //新接口只有歌曲ID标签ID等少数数据，需要自己再查一次
                            var songIds = [];
                            getDataMap(res, songMaps, songIds, $stateParams);
                            console.log(songIds.join(','));
//                                    console.log(songList);
                            //把所有ID一起查询
                            if (songIds.length > 0) {
                                getSongByIds($http, songMaps, songIds,$stateParams,$scope);
                            }
                            var songList = [];
                            for (var p = 0; p < songIds.length; p++) {
                                songList.push(songMaps.get(songIds[p]));
                            }
                            getTagDatas(songList, res.data.totalrecord, res.data.maxResult, res.data.firstIndex, $stateParams.tagId, $scope);
//                                    console.log($scope.datas);
                            $scope.choseArr = [];
                            $scope.unchoseArr = [];
                            $scope.choseIds = [];
                            $scope.allIsCheck = false;
                            for (var i = 0; i < $scope.datas.length; i++) {
                                $scope.datas[i].isCheck = false;
                                $scope.datas[i].playCheck = false;
                                data = $scope.datas[i];
                                $scope.unchoseArr.push(data.id);
                            }
                            //分页显示
                            $http.jsonp(url + "&count=counted").success(function(res){
                                tagSeparatePage($scope, res, $stateParams);
                            });
                            getPageData(res.data.maxResult, res.data.firstIndex, $stateParams.tagId, $stateParams.tagName, $stateParams.status, "hc");
                        });
                    }]
                }
            }
        })
        .state('app.tag.list.cpr.tagIdCp',{
            //url: '/tagIdCp$:searchSongName$:searchArtistName$:searchCpId$:searchUser$:dt1$:dt2$:searchOrder',
            url: '/tagIdCp',
            views:{
                "data-list": {              //正式过期标签数据页面
                    templateUrl: "app/views/tags/data-list.html",
                    controller: ["$cookieStore", "$cookies", "$scope", "$http", "$stateParams", "$uibModal", "$state", "$filter", "$timeout", "$rootScope", "display", function($cookieStore,$cookies,$scope,$http,$stateParams, $uibModal, $state, $filter, $timeout, $rootScope, display){
                        $scope.nowurl = 'app.tag.list.cpr.tagIdCp';
                        $scope.parseInt = parseInt;        //转换数值函数
                        $scope.tagId = $stateParams.tagId;
                        $scope.tagName = $stateParams.tagName;
                        $scope.status = $stateParams.status;
                        $scope.ctype = $stateParams.ctype;
                        var firstIndex = parseInt($stateParams.firstIndex);
                        if(firstIndex < 0){
                            return;
                        }
                        //bindSearch($scope, $stateParams);
//                                console.log($stateParams.tagId);
                        //正式过期
                        var url = http_tag_url + 'tag/'+$stateParams.tagId+'/'+ $scope.status + '.json?callback=JSON_CALLBACK&firstIndex='+firstIndex+'&ctp=cp';
                        url = completeUrl($stateParams, $scope, url, $filter);
                        console.log(url);
                        $http.jsonp(url).success(function (res) {
                            var songMaps = new HashMap();  //新接口只有歌曲ID标签ID等少数数据，需要自己再查一次
                            var songIds = [];
                            getDataMap(res, songMaps, songIds, $stateParams);
                            console.log(songIds.join(','));
//                                    console.log(songList);
                            //把所有ID一起查询
                            if (songIds.length > 0){
                                getSongByIds($http, songMaps, songIds,$stateParams,$scope);
                            }
                            var songList = [];
                            for(var p=0; p < songIds.length; p++){
                                songList.push(songMaps.get(songIds[p]));
                            }
                            getTagDatas(songList,res.data.totalrecord,res.data.maxResult,res.data.firstIndex,$stateParams.tagId,$scope);
//                                    console.log($scope.datas);
                            $scope.choseArr = [];
                            $scope.unchoseArr = [];
                            $scope.choseIds = [];
                            $scope.allIsCheck = false;
                            for(var i=0; i < $scope.datas.length; i++){
                                $scope.datas[i].isCheck = false;
                                $scope.datas[i].playCheck = false;
                                data = $scope.datas[i];
                                $scope.unchoseArr.push(data.id);
                            }
                            //分页显示
                            $http.jsonp(url + "&count=counted").success(function(res){
                                tagSeparatePage($scope, res, $stateParams);
                            });
                            getPageData(res.data.maxResult, res.data.firstIndex, $stateParams.tagId, $stateParams.tagName, $stateParams.status, "cp");
                        });
                    }]
                }
            }
        })
        .state('app.tag.list.cpr.tagId.songTag',{
            url:'/songTag/:songId',
            views:{
                "song-tag":{
                    templateUrl:"app/views/tags/song-tag.html",
                    controller:["$scope", "$http", "$stateParams", function($scope,$http,$stateParams){
                        $http.jsonp(http_tag_url + 'songtags/' + $stateParams.songId + '.json?callback=JSON_CALLBACK').success(function (res) {
//                                    console.log($stateParams.songId);
                            $scope.datas = res.data;
                        });
                        $scope.postUrl = function($scope){
                            var url = http_tag_url + "check.json?callback=JSON_CALLBACK&ids=" + $scope.songId + "_" + $scope.tagId + "&stat=" + $scope.stat;
//                                    console.log(url);
                            $http.jsonp(url).success(function(res){
                                if (res.status == 1)
                                    alert("操作成功");
                                else
                                    alert("res" + res.msg);
                            })
                                .error(function(err){
                                    alert("error" + err);
                                });
                        }
                    }]
                }
            }
        })
}]);

//url获取的结果有的信息放入songMaps里面
//ID放入songIds里面以供后面查询
function getDataMap(res, songMaps, songIds, $stateParams){
    for (var i = 0; i < res.data.resultlist.length; i++) {
        var songId = res.data.resultlist[i].songId;
        var song = new Object();
        song.id = res.data.resultlist[i].id;
        song.songId = songId;
        song.tagId = $stateParams.tagId;
        song.tagName = $stateParams.tagName;
        song.num = res.data.resultlist[i].num;
        song.userName = res.data.resultlist[i].email;
        if (song.userName != null && song.userName != "" && song.userName.indexOf("@") != -1){
            song.userName = song.userName.substr(0, song.userName.length-15);
        }
        //获取歌曲时间
        song.utime = res.data.resultlist[i].utime;
        //获取歌曲置顶状态
        song.topStatus = res.data.resultlist[i].spstat;
        //获取歌曲的状态
        song.status = res.data.resultlist[i].stat;
        if (song.status != "undefined" && song.status != null) {
            if (song.status == 1) {
                song.status = "通过";
                //                                                        console.log(song.songName + "通过");
            } else if (song.status == 0) {
                song.status = "默认";
//                                                            console.log(song.songName + "默认");
            } else if (song.status == -1) {
                song.status = "禁用";
                //                                                        console.log(song.songName + "禁用");
            }
        } else {
            song.status = "";
            console.log(song.songName + "没有状态");
        }
        songMaps.put(songId, song);
        songIds.push(songId);
    }
}

//把所有ID一起查询把获得的数据塞入songMaps里面
function getSongByIds($http, songMaps, songIds, $stateParams,$scope){
    $http.jsonp(list_url + "song.json?callback=JSON_CALLBACK&ids=" + songIds.join(',') + "&sp=01").success(function (res) {
        for (var i = 0; i < res.data.length; i++) {
            var tempId = res.data[i].songId;
            var song = songMaps.get(tempId);
            if (song != null) {
                //                                                console.log(tempId + "获得了歌曲");
                //获取歌曲名字
                song.songName = res.data[i].songName;
                //获取歌手名字
                //song.artists = "";
                if(res.data[i].artists != undefined && res.data[i].artists != null && res.data[i].artists != ''){
                    song.artists = res.data[i].artists;
                    //for (var j = 0; j < res.data[i].artists.length; j++) {
                        //song.artistName = song.artistName + res.data[i].artists[j].artistName + ",";
                        //song.artists.push(res.data[i].artists[j]);
                        //                                                    console.log(song.artistName);
                    //}
                }
                //if (song.artistName.length > 1) {
                //    song.artistName = song.artistName.substr(0, song.artistName.length - 1);
                //}
                //获取版权，可能没有
                if (res.data[i].cids != undefined && res.data[i].cids != null && res.data[i].cids != "") {
                    song.cid = res.data[i].cids.copyrightId;
                    song.cidDate = res.data[i].cids.expirationDate;
                    //                                                    console.log(tempId + "的歌曲有版权")
                }
                //数据获取完毕，去掉原来这个ID的歌曲，放入后来的歌曲
                songMaps.remove(tempId);
                songMaps.put(tempId, song);
                //                                                console.log(song);
            }
        }
    });
    //
    if($stateParams.id == '1002599047'){
        $scope.sahala = true;
        $http.jsonp(http_tag_url + 'songbpm.json?songIds=' + songIds.join(',') + '&' + CALLBACK).success(function(res){
            console.log(res);
            for (var i = 0; i < res.data.length; i++){
                var tempId = res.data[i].songId;
                var song = songMaps.get(tempId);
                if (song != null){
                    song.bpmVal = res.data[i].bpmVal;
                    song.paceVal = res.data[i].paceVal;
                    song.weightVal = res.data[i].weightVal;
                }
                songMaps.remove(tempId);
                songMaps.put(tempId, song);
            }
        });
    }
    //查询歌曲的曲库ID跳转到咪咕音乐用
    //$http.jsonp(http_url + "/mbs/karakal/song.json?callback=JSON_CALLBACK&mids=" + songIds.join(',')).success(function(res){
    //    for (var i = 0; i < res.data.list.length; i++){
    //        var tempId = res.data.list[i][0];
    //        var song = songMaps.get(tempId);
    //        if (song != null){
    //            song.qid = res.data.list[i][1].split(',')[0];
    //        }
    //        songMaps.remove(tempId);
    //        songMaps.put(tempId, song);
    //    }
    //});
}

//补全url
function completeUrl($stateParams, $scope, url, $filter){
    if ($stateParams.searchSongName != undefined && $stateParams.searchSongName != null && $stateParams.searchSongName != '') {
        url += '&songname=' + $stateParams.searchSongName;
    }
    if($stateParams.searchArtistName != undefined && $stateParams.searchArtistName != null && $stateParams.searchArtistName != ''){
        url += '&artistname=' + $stateParams.searchArtistName;
    }
    if($stateParams.searchCpId != undefined && $stateParams.searchCpId != null && $stateParams.searchCpId != ''){
        url += '&cid=' + $stateParams.searchCpId;
    }
    if($stateParams.searchUser != undefined && $stateParams.searchUser != null && $stateParams.searchUser != ''){
        url += '&uid=' + $stateParams.searchUser;
    }
    if($scope.params.dt1 != undefined && $scope.params.dt1 != null && $scope.params.dt1 != ''){
        console.log($scope.params.dt1);
        url += '&stime=' + formatDate($scope.params.dt1,$filter);
    }
    if($scope.params.dt2 != undefined && $scope.params.dt2 != null && $scope.params.dt2 != ''){
        url += '&etime=' + formatDate($scope.params.dt2,$filter);
    }
    if($stateParams.searchOrder != undefined && $stateParams.searchOrder != null && $stateParams.searchOrder != ''){
        console.log($stateParams.searchOrder);
        if($stateParams.searchOrder == 'ranked'){
            url += '&rank=ranked';
        } else {
            url += '&order=' + $stateParams.searchOrder;
        }
    }
    //console.log(url);
    return url;
}

//让搜索之后页面显示以前的搜索条件,给所有搜索条件绑定值
function bindSearch($scope, $stateParams,$filter){
    $scope.params.searchSongName = $stateParams.searchSongName;
    $scope.params.searchArtistName = $stateParams.searchArtistName;
    $scope.params.searchCpId = $stateParams.searchCpId;
    $scope.params.searchUser = $stateParams.searchUser;
    //$scope.params.dt1 = formatDate($scope.params.dt1,$filter);
    if($stateParams.dt1 != undefined){
        $scope.params.dt1 = formatDate(Date.parse($stateParams.dt1),$filter);
    }
    //$scope.params.dt2 = formatDate($scope.params.dt2,$filter);
    if($stateParams.dt2 != undefined){
        $scope.params.dt2 = formatDate(Date.parse($stateParams.dt2),$filter);
    }
    $scope.params.searchOrder = $stateParams.searchOrder;
    //console.log($scope.params);
}
//审核通过单条数据
function checkOneData(data, $scope, $http, $timeout, $rootScope, display){
    selectOne($scope, data.data, data.data.isCheck);
    console.log(data);
    var url = http_tag_url + "check.json?callback=JSON_CALLBACK&ids=" + data.data.id + "&stat=" + data.stat +'&tagId=' +data.data.tagId;
    console.log(url);
    $http.jsonp(url).success(function (res) {
        if (res.status == 1) {
            //alert("操作成功");
            alertTipCommon($timeout,$rootScope,'操作成功',display);
            if (data.stat == '1') {
                data.data.status = "通过";
            } else if (data.stat == '0') {
                data.data.status = "默认";
            } else if (data.stat == '-1') {
                data.data.status = "禁用";
            }
        }
        else {
            //alert("res:" + res.msg);
            alertTipCommon($timeout,$rootScope,"res:" + JSON.stringify(res.msg), display);
            console.log($scope.data);
        }
    }).error(function (err) {
        //alert("error:" + err);
        alertTipCommon($timeout,$rootScope,"error:" + JSON.stringify(err), display);
    });
}
//批量提交审核数据
function batchCheckData(flag, $http, chooseArray, unChooseArray,tagId,$timeout,$rootScope,display){
    var url = http_tag_url + "opscheck.json?callback=JSON_CALLBACK&pids=" + chooseArray.join(',') + "&upids=" + unChooseArray.join(',') +'&tagId=' +tagId;
    if(flag == -1){
        url = http_tag_url + "opscheck.json?callback=JSON_CALLBACK&pids=" + unChooseArray.join(',') + "&upids=" + chooseArray.join(',') +'&tagId=' +tagId;
    }
    console.log(url);
    //$http.jsonp(url).success(function (res) {
    //    if (res.status == 1){
    //        //alert("操作成功");
    //        alertTipCommon($timeout,$rootScope,'操作成功',display);
    //        location.reload(true);
    //    } else {
    //        //alert("res:" + res.msg);
    //        alertTipCommon($timeout,$rootScope,"res:" + JSON.stringify(res.msg),display);
    //    }
    //}).error(function (err) {
    //    //alert("error:" + err);
    //    alertTipCommon($timeout,$rootScope,"error:" + JSON.stringify(err),display);
    //});
}

//人工排序数据
function setDataPosition(song, $http, $scope, $uibModal){
    selectOne($scope, song.song, song.song.isCheck);
    //弹出一个层来输入插入到多少位置
    var modalInstance = $uibModal.open({
        animation: true,
        templateUrl: 'myModalContent.html',
        controller: 'tagSetPositionCtrl',
        resolve: {
            song: function () {
                return song.song;
            },
            tagId: function(){
                return song.song.tagId;
            }
        }
    });
}

//编辑人工排序弹出层
angular.module('app.routes').controller('tagSetPositionCtrl', ["$scope", "$uibModalInstance", "$http", "song", "tagId", "$timeout", "$rootScope", "display", function ($scope, $uibModalInstance, $http, song, tagId,$timeout,$rootScope,display) {
    //$scope.song = song.song;
    //提交歌曲排序
    $scope.setPosition = function(position){
        if(position == undefined || position == null || position == ''){
            $scope.error = "请输入插入排序位置";
            return;
        }
        if(parseInt(position) < 1){
            $scope.error = "请输入正整数";
            return;
        }
        //console.log(position - 1);
        var url = http_tag_url + 'rank/add.json?callback=JSON_CALLBACK&songId=' + song.songId + '&tagId=' + tagId + '&idx=' + (position-1);
        console.log(url);
        $http.jsonp(url).success(function(res){
            console.log(res);
            if(res.status == 1){
                //把这首歌排到第一位
                //var temp = 0;
                //for(var i = 0; i < $scope.datas.length; i++){
                //    if($scope.datas[i].songId == song.song.songId){
                //        temp = i;
                //    }
                //}
                //$scope.datas.splice(temp, 1);
                //song.song.topStatus = 2;
                //$scope.datas.unshift(song.song);
                //alert('置顶成功');
                alertTipCommon($timeout,$rootScope,"排序成功",display);
                $uibModalInstance.dismiss('cancel');
                location.reload(true);
            } else {
                //alert('置顶失败,返回结果:' + JSON.stringify(res));
                alertTipCommon($timeout,$rootScope,'置顶失败,返回结果:' + JSON.stringify(res),display);
            }
        }).error(function(res){
            //alert('发生异常');
            alertTipCommon($timeout,$rootScope,"发生异常",display);
        });
    };

    $scope.ok = function () {
        console.log(song);
    };
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}]);

//给歌曲打标签同时指定排序弹出层
angular.module('app.routes').controller('addSong2TagCtrl', ["$scope", "$uibModalInstance", "$http", "song", "tagId", "$timeout", "$rootScope", "display", function ($scope, $uibModalInstance, $http, song, tagId,$timeout,$rootScope,display) {
    //$scope.song = song.song;
    //提交歌曲排序
    $scope.setPosition = function(position){
        if(position == undefined || position == null || position == ''){
            $scope.error = "请输入插入排序位置";
            return;
        }
        if(parseInt(position) < 1){
            $scope.error = "请输入正整数";
            return;
        }
        var url = tag_add_reltags + "song/" + song.songId + '.json?callback=JSON_CALLBACK&tids=' + tagId;
        console.log(url);
        $http.jsonp(url).success(function(res){
            if(1){
                var url2 = http_tag_url + 'rank/add.json?callback=JSON_CALLBACK&songId=' + song.songId + '&tagId=' + tagId + '&idx=' + (position-1);
                $http.jsonp(url2).success(function(res2){
                    console.log(res2);
                    if(res2.status == 1){
                        //alert('打标签置顶成功');
                        alertTipCommon($timeout,$rootScope,"打标签排序成功",display);
                        $uibModalInstance.dismiss('cancel');
                        location.reload(true);
                    } else {
                        //alert('打标签置顶失败,返回结果:' + JSON.stringify(res2));
                        alertTipCommon($timeout,$rootScope,"打标签排序失败，返回结果:" + JSON.stringify(res2),display);
                    }
                }).error(function(){
                    //alert('发生异常');
                    alertTipCommon($timeout,$rootScope,"打标签排序发生异常",display);
                });
            } else {
                //alert("打标签失败，返回结果:" + JSON.stringify(res));
                alertTipCommon($timeout,$rootScope,"打标签失败，返回结果:" + JSON.stringify(res),display);
            }
        }).error(function(){
            //alert('发生异常');
            alertTipCommon($timeout,$rootScope,"打标签异常",display);
        });
    };

    $scope.ok = function () {
        console.log(song);
    };
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}]);

//取消置顶数据
function resetDataPosition(song, $http, $scope,$timeout,$rootScope,display){
    selectOne($scope, song.song, song.song.isCheck);
    //selectOne($scope, $scope.song, $scope.song.isCheck);
    console.log(song.song);
    var url = http_tag_url + 'rank/del.json?callback=JSON_CALLBACK&songId=' + song.song.songId + '&tagId=' + song.song.tagId;
    console.log(url);
    $http.jsonp(url).success(function(res){
        console.log(res);
        if(res.status == 1){
            //把这首歌排到最后一位
            //var temp = 0;
            //for(var i = 0; i < $scope.datas.length; i++){
            //    if($scope.datas[i].songId == song.song.songId){
            //        temp = i;
            //    }
            //}
            //$scope.datas.splice(temp, 1);
            //song.song.topStatus = 0;
            //$scope.datas.push(song.song);
            //alert('取消置顶成功');
            alertTipCommon($timeout,$rootScope,"取消排序成功",display);
            location.reload(true);
        } else {
            //alert('取消置顶失败');
            alertTipCommon($timeout,$rootScope,"取消排序失败",display);
        }
    }).error(function(res){
        //alert('发生异常');
        alertTipCommon($timeout,$rootScope,"发生异常",display);
    });
}

//复选框单选
//function selectOne($scope, data, checkb){
//    var choseIdsStr = '';
//    var str = '';
//    var unstr = '';
//    if($scope.choseIds.length > 0){
//        choseIdsStr = $scope.choseIds.join(',') + ',';
//    }
//    if($scope.choseArr.length > 0){
//        str = $scope.choseArr.join(',') + ',';
//    }
//    if($scope.unchoseArr.length > 0){
//        unstr = $scope.unchoseArr.join(',') + ',';
//    }
//    //console.log(checkb + "+" + data.songId);
//    if (checkb != true) {//选中
//        str = str + data.id + ',';
//        unstr = unstr.replace(data.id + ',', '');
//        choseIdsStr = choseIdsStr + data.songId + ',';
//        data.isCheck = true;
//    } else {
//        str = str.replace(data.id + ',', '');//取消选中
//        unstr = unstr + data.id + ',';
//        choseIdsStr = choseIdsStr.replace(data.songId + ',', '');
//        data.isCheck = false;
//    }
//    if (str.length == 0) {
//        $scope.choseArr = [];
//    } else {
//        $scope.choseArr = (str.substr(0, str.length - 1)).split(',');
//    }
//    if (unstr.length == 0) {
//        $scope.unchoseArr = [];
//    } else {
//        $scope.unchoseArr = (unstr.substr(0, unstr.length - 1)).split(',');
//    }
//    if (choseIdsStr.length == 0) {
//        $scope.choseIds = [];
//    } else {
//        $scope.choseIds = (choseIdsStr.substr(0, choseIdsStr.length-1)).split(',');
//    }
//}

//复选框全选
//function selectAll($scope, all, datas){
//    $scope.choseIds = [];
//    $scope.choseArr = [];
//    $scope.unchoseArr = [];
//    if (all == true) {
//        $scope.allIsCheck = true;
//        for (var i = 0; i < datas.length; i++) {
//            var data = datas[i];
//            $scope.choseArr.push(data.id + "");
//            $scope.choseIds.push(data.songId + "");
//            data.isCheck = true;
//        }
//    } else {
//        $scope.allIsCheck = false;
//        for (var i = 0; i < datas.length; i++) {
//            data = datas[i];
//            $scope.unchoseArr.push(data.id + "");
//            data.isCheck = false;
//        }
//    }
//}


//分页显示
function tagSeparatePage($scope, res, $stateParams){
    $scope.maxSize = 5;
    $scope.maxResult = res.data.maxResult;
    //$scope.itemsPerPage = res.data.maxResult;
    $scope.itemsPerPage = 20;
    //$scope.currentPage = res.data.firstIndex / res.data.maxResult + 1;
    $scope.currentPage = $stateParams.firstIndex / 20 + 1;
    $scope.totalItems = res.data.totalrecord;
    $scope.totalrecord = res.data.totalrecord;
    $scope.totalPage = ($scope.totalrecord - ($scope.totalrecord%$scope.maxResult != 0 ? $scope.totalrecord%$scope.maxResult : $scope.maxResult)) / $scope.maxResult + 1;
}
//通用渲染页面数据
function getPageData(maxResult, firstIndex, tagId, tagName, status, ctp){
    _maxResult = maxResult;
    _firstIndex = firstIndex;
    _tagId = tagId;
    _tagName = tagName;
    _status = status;
    _ctp = ctp;
}

//当前播放歌曲出现边框效果
function playSelectOne(datas, data){
    for(var i = 0; i < datas.length; i++){
        datas[i].playCheck = false;
    }
    data.playCheck = true;
}

//指定去多少页码
function jump2PageNum(pageType, num, $state,$timeout,$rootScope,display){
    if(num == undefined || num == null || num === ''){
        console.log(num);
        return;
    }
    if(num < 1){
        //alert("请输入正确的页码，不要乱玩好吗");
        alertTipCommon($timeout,$rootScope,"请输入正确的页码不要乱玩好吗",display);
        return;
    }
    $state.go("app." + pageType,{firstIndex:((num - 1) * 20)});
}

// /**
//  * 此处应该是公共函数，需要多个界面重复调用
//  * @param a
//  * @param nodeList
//  * @returns {*}
//  */
// //递归调用json，返回所有的叶子节点
// //a 待处理的数组
// //nodeList 返回的结果list
// function getAllNode(a, nodeList) {
//     for (var key in a) {
//         if (key == 'children') {  //如果是子节点数组，那么循环里面每一个对象
//             for (var i in a.children) {
//                 getAllNode(a.children[i], nodeList);
//             }
//         } else if (key == 'name') {  //如果是名字,就记录
//             var obj = {};
//             obj.id = a.id;
//             obj.name = a.name;
//             obj.pId = a.parentId;
//             nodeList.push(obj);
//         }
//     }
//     return nodeList;
// }

//通用渲染便签数据列表
function getTagDatas(resultlist, totalrecord, maxResult, firstIndex, tagId, $scope) {
    $scope.datas = resultlist;
//        $scope.totalrecord = totalrecord;
    $scope.maxResult = maxResult;
    $scope.firstIndex = firstIndex;
    $scope.tagId = tagId;
}

var myApp = angular.module('app.routes').filter('cut', function () {   //filter过滤器，数据超长部分显示省略号
    return function (value, wordwise, max, tail) {
        if (!value) return '';

        max = parseInt(max, 10);
        if (!max) return value;
        if (value.length <= max) return value;

        value = value.substr(0, max);
        if (wordwise) {
            var lastspace = value.lastIndexOf(' ');
            if (lastspace != -1) {
                value = value.substr(0, lastspace);
            }
        }

        return value + (tail || ' …');
    };
});

/**
 * Created by hao.cheng on 2015/12/1.
 * top-controller
 */
angular
    .module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.song-lack',{//缺歌页面
            url: '/songLack',
            templateUrl: 'app/views/top/top-song-lack.html',
            controller: ["$scope", "$http", "permissions", "$cookies", "SweetAlert", function($scope,$http,permissions,$cookies,SweetAlert){
                $scope.params = {};
                $scope.reset = function(){//重置按钮
                    $scope.params = {};
                    //location.reload();
                }
                $scope.downloadModel = function(){//下载模板
                   window.open(song_lack_model);
                }
                $scope.export = function(params){
                    //$scope.params == false;
                    //if(isEmpty($scope.params)){
                    //    alert('请先查询数据');
                    //}else{
                    //    location.href = song_lack_export + '?data=' + JSON.stringify($scope.params);
                    //}
                    console.log(params);
                    location.href = song_lack_export + '?data=' + JSON.stringify(params);
                }
                $scope.del = function(){
                    if(permissions.choseArr == undefined || permissions.choseArr.length < 1){
                        sweetAlertCommon(SweetAlert,'请选择要删除的数据','warning');
                        return;
                    }
                    $http.jsonp(song_lack_del + '?callback=JSON_CALLBACK&ids=' +
                        permissions.choseArr.join(',') + '&uid=' + $cookies.kuid + '&uname=' +_session.name).success(function(res){
                            if(res.returnCode == '000000'){
                                sweetAlertCommon(SweetAlert,'删除成功','success');
                                location.reload();
                            }else{
                                sweetAlertCommon(SweetAlert,'删除失败','error');
                            }
                    })
                }
            }]
        })
        .state('app.song-lack.search',{ //查询
            url:'/search?:songName&:singerName&:copyfName&:lange&:oneStatus&:twoStatus&:qgType&:stdbDate&:enddbDate&:firstIndex&:pageNo&:pageSize',
            views:{
                'song_lack_list':{
                    templateUrl: 'app/views/top/top-song-lack-list.html',
                    controller: ["$scope", "$http", "$filter", "$stateParams", "permissions", "$state", function($scope,$http,$filter,$stateParams,permissions,$state){
                        //$scope.$parent.params = {};
                        //console.log('parmas:'+$scope.$parent.params);
                        $scope.maxSize = 5;
                        $scope.itemsPerPage = checkEmpty($stateParams.pageSize)?20:$stateParams.pageSize;
                        $scope.bigCurrentPage = 1;
                        if($stateParams.songName != undefined && $stateParams.songName != '')
                            $scope.params.songName = $stateParams.songName;
                        if($stateParams.singerName != undefined && $stateParams.singerName != '')
                            $scope.params.singerName = $stateParams.singerName;
                        if($stateParams.copyfName != undefined && $stateParams.copyfName != '')
                            $scope.params.copyfName = $stateParams.copyfName;
                        if($stateParams.lange != undefined && $stateParams.lange != '')
                            $scope.params.lange = $stateParams.lange;
                        if($stateParams.oneStatus != undefined && $stateParams.oneStatus != '')
                            $scope.params.oneStatus = $stateParams.oneStatus;
                        if($stateParams.twoStatus != undefined && $stateParams.twoStatus != '')
                            $scope.params.twoStatus = $stateParams.twoStatus;
                        if($stateParams.qgType != undefined && $stateParams.qgType != '')
                            $scope.params.qgType = $stateParams.qgType;
                        if($scope.params.enddbDate != undefined && $scope.params.enddbDate != '')
                            $scope.params.enddbDate = formatDate($scope.params.enddbDate,$filter);
                        if($scope.params.stdbDate != undefined && $scope.params.stdbDate != '')
                            $scope.params.stdbDate = formatDate($scope.params.stdbDate,$filter);
                        if($stateParams.firstIndex == undefined || $stateParams.firstIndex == '')
                            $stateParams.firstIndex = 0;
                        if($stateParams.pageNo != undefined && $stateParams.pageNo != '') $stateParams.firstIndex = ($stateParams.pageNo - 1) * 20;
                        console.log($scope.params);
                        $http.jsonp(song_lack_search + '?callback=JSON_CALLBACK&data=' + JSON.stringify($scope.params) + '&firstIndex=' + $stateParams.firstIndex+'&maxResult='+$scope.itemsPerPage).success(function(res){//获取缺歌列表
                            $scope.datas = res.list;
                            paginationDiscreteness($scope,5,$scope.itemsPerPage,res.totalRecord,Math.ceil($scope.totalRecord/ $scope.itemsPerPage),$stateParams.firstIndex / 20 + 1);
                            $scope.totalRecord = res.totalRecord;
                            $scope.maxResult = res.maxResult;
                            $scope.bigTotalItems = res.totalRecord;
                            $scope.bigCurrentPage = $stateParams.firstIndex / 20 + 1;
                            $scope.totalPage = Math.ceil($scope.totalRecord/ $scope.itemsPerPage);
                            console.log(Math.ceil($scope.bigTotalItems/ $scope.itemsPerPage));
                        });
                        var str = "";
                        var flag = '';
                        $scope.chk = function(data, checkb){//复选框的单个选择
                            if(flag == 'a'){//在全选的基础上操作
                                str = $scope.choseArr.join(',') + ',';
                            }
                            if(checkb != true){//选中
                                str = str + data.id + ',';
                                data.isCheck = true;
                            } else {
                                str = str.replace(data.id + ',', '');//取消选中
                                data.isCheck = false;
                            }
                            if(str.length = 0){
                                permissions.choseArr = [];
                            } else {
                                permissions.choseArr = (str.substr(0,str.length-1)).split(',');
                            }
                            console.log(permissions.choseArr);
                        }
                        $scope.checkAll = function(all, datas){//复选框的全选
                            if(all==true){
                                $scope.allIsCheck = true;
                                permissions.choseArr = [];
                                for(var i=0; i < datas.length; i++){
                                    var data = datas[i];
                                    permissions.choseArr.push(data.id + "");
                                    data.isCheck = true;
                                }
                                str = permissions.choseArr.join(',') + ',';
                                flag = 'a';
                            }else{
                                $scope.allIsCheck = false;
                                permissions.choseArr=[];
                                for(var i=0; i < datas.length; i++){
                                    data = datas[i];
                                    data.isCheck = false;
                                }
                                str = "";
                                flag = '';
                            }
                            console.log(permissions.choseArr);
                        };
                        $scope.choosePage = function(){
                            //console.log($scope.bigCurrentPage);
                            $scope.firstIndex = ($scope.bigCurrentPage - 1) * 20;
                            //console.log(firstIndex);
                            $http.jsonp(song_lack_search + '?callback=JSON_CALLBACK&data=' + JSON.stringify($scope.params) + '&firstIndex=' + $scope.firstIndex ).success(function(res){//获取缺歌列表
                                $scope.datas = res.list;
                                $scope.totalRecord = res.totalRecord;
                                $scope.maxResult = res.maxResult;
                                $scope.totalPage = Math.ceil($scope.totalRecord/ $scope.itemsPerPage);
                                //var param = { firstIndex:$scope.firstIndex};
                                //$scope.bigCurrentPage = $stateParams.firstIndex / 20;
                                $state.go('song_lack.search',{ firstIndex:$scope.firstIndex});
                            });
                        }
                    }]
                }
            }
        })
}]);
angular.module('app.routes').controller('ImportCtrl_lack',["$scope", "$uibModalInstance", "$http", "user", "SweetAlert", function($scope,$uibModalInstance,$http,user,SweetAlert){ //导入excel页面操作
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(){
        var filename = $('#excelFile').val();
        var mime = filename.toLowerCase().substr(filename.lastIndexOf("."));
        if(mime != '.xls'){
            $scope.error = '请转换.xls的03版本';
            return;
        }
        if(filename == ''){
            $scope.error = '请选择上传的excel文件';
        }else{
            $scope.error= '';
            $.ajaxFileUpload({
                url: song_lack_import,
                type: 'post',
                secureuri: false, //一般设置为false
                fileElementId: 'excelFile', // 上传文件的id、name属性名
                dataType: 'json', //返回值类型，一般设置为json、application/json
                data: {'uname':user.name,'uid':user.id},
                success: function(data){
                    if(data.returnCode == '000000'){
                        sweetAlertCommon(SweetAlert,'导入成功','success');
                        location.reload();
                    }else if(data.returnCode == '000004'){
                        sweetAlertCommon(SweetAlert,'导入数据全重复，导入失败','error');
                    }else{
                        sweetAlertCommon(SweetAlert,'导入失败','error');
                    }
                }
            });
            $uibModalInstance.dismiss('cancel');
        }
    }
}]);
angular.module('app.routes').run(["$http", "$cookies", function($http,$cookies){
    getUser($http,$cookies);
}]);
var _session = {};
function getUser($http,$cookies,method){   //获取用户信息
    $http.get(git_user_single + $cookies.get('kpk')).success(function(data){
        _session = data;
        if(method != undefined){
            method(data);
        }
    });
}
angular.module('app.routes').controller('EditCtrl',["$scope", "$uibModalInstance", "$http", "data", "user", "$filter", "SweetAlert", function($scope,$uibModalInstance,$http,data,user,$filter,SweetAlert){
    $scope.song = data;
    $scope.cancel = function () {//取消按钮
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(song){//确认按钮
        if(song.scanner){
            song.scanner = 0;
        }else{
            song.scanner = 1;
        }
        song.dbDate = formatDate(song.dbDate,$filter);
        console.log(song);
        $http.jsonp(song_lack_edit + '?callback=JSON_CALLBACK&data=' +
            JSON.stringify(song) + '&uid=' + user.id + '&uname=' + user.name).success(function(res){
            if(res.returnCode == '000000'){
                $uibModalInstance.dismiss('cancel');
                sweetAlertCommon(SweetAlert,'编辑成功','success');
            }else{
                $scope.error = '编辑失败'
            }
        })
    }
}]);



/**
 * Created by hao.cheng on 2016/8/2.
 * 工单基础service
 */
(function () {
    'use strict';

    angular.module('app.routes').service('TaskService', TaskService);
    TaskService.$inject = ['$http', 'SweetAlert'];
    function TaskService($http, SweetAlert) {
        var _self = this;
        _self.service = {
            'taskSearch': taskSearch,            //工单搜索
            'assignTask': assignTask,            //数据任务分配
            'getTaskFlow': getTaskFlow,          //获取项目工单流程
            'getTaskAuth': getTaskAuth           //获取项目工单权限
        };
        _self.method = {        //页面请求方法
            'getTaskFlowAndAuth': getTaskFlowAndAuth,        //获取项目流程和权限
            'taskSearchFromPage':  taskSearchFromPage       //页面的工单搜索
        };

        function taskSearch(type, data) {
            //uc_new_song http://192.168.3.75:8080/1/search/task/

            return $http.get(uc_new_song + type + '.json?data=' + data).then(function (res) {
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '工单搜索接口请求异常', 'warning');
            })
        }
        function assignTask(taskIds, flowId, auth, uId){
            return $http.jsonp(uc_assign_t + '.json?ids=' + taskIds + '&flowId=' + flowId + '&auth=' + auth + '&uId=' + uId + '&' + CALLBACK).then(function (res) {
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '分配任务接口请求异常', 'warning');
            })
        }
        function getTaskFlow(projectId) {
            return $http.get(uc_find_p+'.json?' + 'data={"id":"' + projectId + '"}').then(function (res) {
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '工单流程查询接口请求异常', 'warning');
            })
        }
        function getTaskAuth(projectId) {
            return  $http.jsonp(uc_new_song_auth + '?' + CALLBACK + '&pId=' + projectId).then(function (res) {
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '工单权限接口请求异常', 'warning');
            })
        }
        function getTaskFlowAndAuth($scope){
            var _promise1 = _self.service.getTaskFlow($scope.$parent.form.projectId);
            if(_promise1) _promise1.then(function (res) {
                $scope.$parent.p_type = res.data.list[0].flowType;
                $scope.$parent.distribution = res.data.list[0].distribution;
                $scope.$parent.cyr_list = res.data.list[0].cyrList;
                $scope.$parent.cyr_list = $scope.cyr_list.concat(res.data.list[0].fzrList);
                res.data.list[0].fzrList.forEach(function (val) {
                    val.uid += '';
                    if(val.uid == JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid) $scope.$parent.userRole = 'fzr';
                });
            });
            var _promise2 = _self.service.getTaskAuth($scope.$parent.form.projectId);
            if(_promise2) _promise2.then(function (res) {
                if(res.returnCode == '000000') $scope.$parent.authoritySetting = res.list[0];
            })
        }
        function taskSearchFromPage(type, $scope) {
            var form = cloneOneObject($scope.$parent.form);
            if(type == 'song' && form.tagBeans && form.tagBeans.length){     //歌曲工单的标签搜索做特殊处理
                form.tags=[];
                form.tagBeans.forEach(function(tag){
                    form.tags.push(tag.tagId);
                });
                delete form.tagBeans;
            }
            var _promise = _self.service.taskSearch(type, encodeURIComponent(angular.toJson(form)));
            if(_promise) _promise.then(function (res) {
                $scope.$parent.datas = res.data.list;
            });
            form.isQueryCount = 1;  //异步count
            _self.service.taskSearch(type, encodeURIComponent(angular.toJson(form))).then(function (res) {
                paginationDiscreteness($scope, 5, res.data.pageSize, res.data.totalCount, res.data.pageTotal, res.data.pageNo);
            })
        }

    }
})();
/**
 * Created by hao.cheng on 2015/11/10.
 * user_center_controller
 */
angular.module('app.routes').config(["$stateProvider", "$urlRouterProvider", function($stateProvider,$urlRouterProvider){    $stateProvider
        .state('app.uc',{
            url: '/uc',
            templateUrl: 'app/views/uc/uc.html',
            controller: ["$scope", "$http", "$cookies", function($scope,$http,$cookies){
            }]
        })
        .state('app.uc.cp',{//创建的项目
            url: '/cp',
            views : {
                "pro_list":{
                    templateUrl: 'app/views/uc/uc_pro_cp.html',
                    controller: ["$scope", "$http", "$cookies", function($scope,$http,$cookies){
                        $scope.user = _session;
                        $http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data={"uId":"'+$cookies.get("kuid")+'"}').success(function(res){    //所有项目
                            $scope.projects = getData(res);
                            $scope.totalRecord = res.totalRecord;
                        });
                    }]
                }
            }
        })
        .state('app.uc.fz',{//负责的项目
            url: '/fz',
            views : {
                "pro_list": {
                    templateUrl: 'app/views/uc/uc_pro_fz.html',
                    controller:["$scope", "$http", "$cookies", function($scope,$http,$cookies){
                        if(isEmpty(_session)){
                            getUser($http,$cookies,function(data){
                                $scope.user = data;
                            });
                        } else {
                            $scope.user = _session;
                        }
                        $scope.projects_fz = undefined;
                        $http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data={"fzr":"'+$cookies.get("kuid")+'"}').success(function(res){    //负责的项目
                            $scope.projects_fz = getData(res);
                            $scope.totalRecord = res.totalRecord;
                        });
                    }]
                }
            }
        })
        .state('app.uc.cy',{//参与的项目
            url: '/cy',
            views : {
                "pro_list": {
                    templateUrl: 'app/views/uc/uc_pro_cy.html',
                    controller:["$scope", "$http", "$cookies", function($scope,$http,$cookies){
                        //$scope.user = _session;
                        if(isEmpty(_session)){
                            getUser($http,$cookies,function(data){
                                $scope.user = data;
                            });
                        } else {
                            $scope.user = _session;
                        }
                        $scope.projects_fz = undefined;
                        $http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data={"fzr":"'+$cookies.get("kuid")+'"}').success(function(res){    //负责的项目
                            $scope.projects_fz = getData(res);
                            $scope.totalRecord = res.totalRecord;
                            console.log($scope.projects_fz);
                        });
                        $scope.projects_cy = undefined;
                        $http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data={"cyr":"'+$cookies.get("kuid")+'"}').success(function(res){     //参与的项目
                            $scope.projects_cy = getData(res);
                            $scope.totalRecord = res.totalRecord;
                            console.log($scope.projects_cy);
                        });
                    }]
                }
            }
        })
        .state('app.uc_atask',{
            url: '/uc_atask?:pId&:status',
            templateUrl: 'app/views/uc/uc_task.html',
            controller: ["$scope", "$http", "$stateParams", function($scope,$http,$stateParams){
                if($stateParams.status == 0){
                    $scope.show = true;
                }else{
                    $scope.show = false;
                }
                $scope.pro = $stateParams.pId;
                $scope.uId = _session.id;
                var param = {};
                param.pId = $stateParams.pId;
                //param.uId = -1;
                param.status = $stateParams.status;
                var p_param= {};
                p_param.id = $stateParams.pId;
                var p_type = '';
                //获取项目的流程
                $http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data='+ JSON.stringify(p_param)).success(function(res){
                    $scope.p_type = res.list[0].type;
                    $scope.cyr_list = [];
                    for(var i = 0; i < res.list[0].cyrList.length;i++){
                        $scope.cyr_list.push(res.list[0].cyrList[i]);
                    }
                    for(var i = 0; i < res.list[0].fzrList.length;i ++){
                        $scope.cyr_list.push(res.list[0].fzrList[i]);
                    }
                    //console.log($scope.cyr_list);
                    p_type = $scope.p_type;
                    if( $scope.p_type == 1){    //新歌流程
                        reflectData('song','歌曲',$scope,$http,param)
                    }
                    if($scope.p_type == 3){ //艺人流程
                        reflectData('artist','艺人',$scope,$http,param);
                    }
                    if($scope.p_type == 4){ //专辑流程
                        reflectData('album','专辑',$scope,$http,param);
                    }
                    if($scope.p_type == 5){ //歌曲流程
                        reflectData('song','歌曲',$scope,$http,param);
                    }
                });
                $scope.user = undefined;
                $scope.selectUser = function(v){
                    $scope.user = {};
                    $scope.user.name = v.name;
                    $scope.user.id = v.uId;
                };
                $scope.removeUser = function(){ //去除分配人的方法
                    console.log($scope.user);
                    $scope.user = undefined;
                };
                $scope.selectCyr = function(v){ //select选择参与人分配任务的方法
                    $scope.user = {};
                    $scope.user.name = v.uName;
                    $scope.user.id = v.uId;
                    console.log(v);
                };
                //复选框的单个选择
                var str = "";
                var unstr = "";
                var flag = '';
                var choseArr = [];
                $scope.checkb = false;
                $scope.choseArr = [];
                $scope.unchoseArr = [];
                $scope.chk = function(data, checkb){
                    if(flag == 'a'){//在全选的基础上操作
                        str = $scope.choseArr.join(',') + ',';
                    } else {
                        if($scope.unchoseArr.length != 1 && $scope.unchoseArr[0] != ""){
                            unstr = $scope.unchoseArr.join(',') + ',';
                        }
                    }
                    if(checkb != true){//选中
                        str = str + data.id + ',';
                        unstr = unstr.replace(data.id + ',', '');
                        data.isCheck = true;
                    } else {
                        str = str.replace(data.id + ',', '');//取消选中
                        unstr = unstr + data.id + ',';
                        data.isCheck = false;
                    }
                    if(str.length = 0){
                        $scope.choseArr = [];
                    } else {
                        $scope.choseArr = (str.substr(0,str.length-1)).split(',');
                    }
                    if(unstr.length = 0){
                        $scope.unchoseArr = [];
                    } else {
                        $scope.unchoseArr = (unstr.substr(0,unstr.length-1)).split(',');
                    }
                    $scope.unchoseArr = (unstr.substr(0,unstr.length-1)).split(',');
                    console.log($scope.choseArr);
                    console.log($scope.unchoseArr);
                };
                $scope.distributionTask = function(uId){
                    if($scope.choseArr.length < 1){
                        alert('请选择需要分配的数据');
                        return;
                    }
                    $http.jsonp(uc_assign_t + '.json?callback=JSON_CALLBACK&pId=' + $stateParams.pId + '&uId=' + uId + '&tId=' + $scope.choseArr.join(',')).success(function(res){
                        if(res.returnCode == '000000'){
                            alert('分配成功',function(){
                                location.reload();
                            });
                        }else{
                            alert('分配失败');
                        }
                    });
                };
                $scope.export = function(){ //导出数据
                    console.log($scope.p_type);
                    var type = '';
                    if($scope.choseArr.length < 1){
                        alert('请选择要导出的数据');
                        return;
                    }
                    if($scope.p_type == 1)
                        type = 'song';
                    if($scope.p_type == 3)
                        type = 'artist';
                    if($scope.p_type == 4)
                        type = 'album';
                    if($scope.p_type == 5){
                        type = 'song';
                        console.log(type)
                    }
                    var url = '/mls/' + type + '/excel?ids=' +  $scope.choseArr.join(',');
                    location.href = url;
                };
                //复选框的全选
                $scope.checkAll = function(all, datas){
                    if(all==true){
                        $scope.allIsCheck = true;
                        $scope.choseArr = [];
                        $scope.unchoseArr = [];
                        for(var i=0; i < datas.length; i++){
                            var data = datas[i];
                            $scope.choseArr.push(data.id + "");
                            data.isCheck = true;
                        }
                        str = $scope.choseArr.join(',') + ',';
                        unstr = "";
//                                        $scope.choseArr = datas;
                        flag = 'a';
//                                        console.log("选中的数据:" + $scope.choseArr);
                    }else{
                        $scope.allIsCheck = false;
                        $scope.choseArr=[];
                        for(var i=0; i < datas.length; i++){
                            data = datas[i];
                            $scope.unchoseArr.push(data.id + "");
                            data.isCheck = false;
                        }
                        unstr = $scope.unchoseArr.join(',') + ',';
                        str = "";
                        flag = '';
//                                        console.log("未选中的数据" + $scope.unchoseArr);
                    }
                    console.log($scope.choseArr);
                    console.log($scope.unchoseArr);

                }
            }]
        })
        .state('app.uc_mtask',{
            url: '/uc_mtask?:pId&:uId',
            templateUrl: 'app/views/uc/uc_mtask.html',
            controller:["$scope", "$http", "$stateParams", function($scope,$http,$stateParams){
                $scope.param = {};
                $scope.param.pId = $stateParams.pId;
                $scope.param.uId = $stateParams.uId;
                $scope.param.status = 1;
                var p_param= {};
                p_param.id = $stateParams.pId;
                var p_type = '';
                //获取项目的流程
                $http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data='+ JSON.stringify(p_param)).success(function(res){
                    $scope.p_type = res.list[0].type;
                    p_type = $scope.p_type;
                    if( $scope.p_type == 1){    //新歌流程
                        reflectData('song','歌曲',$scope,$http,$scope.param)
                    }
                    if($scope.p_type == 3){ //艺人流程
                        reflectData('artist','艺人',$scope,$http,$scope.param);
                    }
                    if($scope.p_type == 4){ //专辑流程
                        reflectData('album','专辑',$scope,$http,$scope.param);
                    }
                    if($scope.p_type == 5){ //歌曲流程
                        reflectData('song','歌曲',$scope,$http,$scope.param);
                    }
                });
                //复选框的单个选择
                var str = "";
                var unstr = "";
                var flag = '';
                $scope.checkb = false;
                $scope.choseArr = [];
                $scope.unchoseArr = [];
                $scope.chk = function(data, checkb){
                    if(flag == 'a'){//在全选的基础上操作
                        str = $scope.choseArr.join(',') + ',';
                    } else {
                        if($scope.unchoseArr.length != 1 && $scope.unchoseArr[0] != ""){
                            unstr = $scope.unchoseArr.join(',') + ',';
                        }
                    }
                    if(checkb != true){//选中
                        str = str + data.id + ',';
                        unstr = unstr.replace(data.id + ',', '');
                        data.isCheck = true;
                    } else {
                        str = str.replace(data.id + ',', '');//取消选中
                        unstr = unstr + data.id + ',';
                        data.isCheck = false;
                    }
                    if(str.length = 0){
                        $scope.choseArr = [];
                    } else {
                        $scope.choseArr = (str.substr(0,str.length-1)).split(',');
                    }
                    if(unstr.length = 0){
                        $scope.unchoseArr = [];
                    } else {
                        $scope.unchoseArr = (unstr.substr(0,unstr.length-1)).split(',');
                    }
                    $scope.unchoseArr = (unstr.substr(0,unstr.length-1)).split(',');
                    console.log($scope.choseArr);
                    //console.log($scope.unchoseArr);
                }
                $scope.jumpPage = function(data,pId,pType){
                    if(data == undefined){
                        alert('请选择要跳转的数据');
                        return;
                    }
                    if(pType == 1){
                        window.open('/mls/song/search?songId=' + data.join(',') + '&pId=' + $stateParams.pId);
                    }
                    if(pType == 3){
                        window.open('/mls/artist?artistId=' + data.join(',')+ '&pId=' + $stateParams.pId)
                    }
                    if(pType == 4){
                        window.open('/mls/song/search?albumId=' + data.join(',')+ '&pId=' + $stateParams.pId)
                    }
                    if(pType == 5){
                        window.open('/mls/song/search?songId=' + data.join(',') + '&pId=' + $stateParams.pId);
                    }
                };

            }]
        })
        .state('app.uc_pdetail',{   //项目详情页面
            url: '/uc_pdetail?:pId',
            templateUrl: 'app/views/uc/uc_pro_detail.html',
            controller:["$http", "$stateParams", "$scope", "$state", "SweetAlert", "$cookies", function($http,$stateParams,$scope,$state,SweetAlert,$cookies){
                console.log(_users);
                $scope.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
                var param = {};
                param.id = $stateParams.pId;
                $http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data='+ JSON.stringify(param)).success(function(res){
                    $scope.data = res.data.list[0];
                    //$scope.selected = undefined;
                    //$scope.users = _users;
                });
                $scope.selectUser = function(user, users){ //保存负责人数组
                    if(!judgeIndexOfUser(user, users)){
                        user.uid = user.uId;
                        user.uName = user.name;
                        users.push(user);
                    }
                };
                $scope.removeUser = function(user, users){
                    users.remove(user);
                    console.log(users);
                };
                $scope.ok = function(flag){     //更新或者关闭项目
                    console.log($scope.data);
                    sweetAlertConfirm(SweetAlert, function () {
                        console.log("确认方法");
                        if($scope.data == undefined){
                            $scope.error = '保存失败';
                            return;
                        }
                        var keepPropertys = ["id","uid","type","cyrList","name","flowType","builtin","distribution","fzrList"];
                        var data = keepObjectProperty(keepPropertys, $scope.data);
                        data.fzrList = getArrayProperty(data.fzrList, 'uid');
                        data.cyrList = getArrayProperty(data.cyrList, 'uid');
                        if(flag == 'close'){
                            data.builtin = 9;
                        }
                        console.log(data);
                        var url = uc_save_p + '.json?callback=JSON_CALLBACK&data='+JSON.stringify(data);
                        console.log(url);
                        $http.jsonp(url).success(function(res){
                            if(res.returnCode == '000000' || res.returnCode == '000002'){
                                sweetAlertCommon(SweetAlert,res.description,'success');
                                $state.go('app.uc.fz');
                                //if(flag == 'close'){
                                //    sweetAlertCommon(SweetAlert,'关闭成功','success');
                                //    $state.go('app.uc.cp');
                                //} else {
                                //    sweetAlertCommon(SweetAlert,'保存成功','success');
                                //    $state.go('app.uc.cp');
                                //}
                                //location.reload();  //保存成功后刷新页面
                            }else{
                                sweetAlertCommon(SweetAlert,res.description,'error');
                                //$scope.error = '保存失败';
                            }
                            //console.log(res);
                        }).error(function(res){
                            console.log(res);
                            sweetAlertCommon(SweetAlert,'请求接口异常','warning');
                            $scope.error = '请求接口异常';
                        });
                    }, undefined, '', '');
                };
            }]
        })
}]);
function getData(res){  //获取项目列表并设置完成进度
    var arr = [];
    arr = res.data.list;
    for(var i = 0; i < res.data.list.length; i++){
        var count = parseInt(res.data.list[i].tTask);
        if(count <= 0){
            arr[i].progress = 0;
        }else{
            var finished = parseInt(res.data.list[i].finished);
            arr[i].progress = Math.round( finished / count * 100)
        }
        arr[i].fzrList.splice(2);
    }
    //console.log(arr);
    return arr;
}
//获取数据
function reflectData(name,type,$scope,$http,param){
    $http.jsonp(uc_find_t+'.json?callback=JSON_CALLBACK&data=' + JSON.stringify(param)).success(function(res){  //获取任务的数据id
        var ids = [];
        var users = [];
        for(var i = 0; i < res.list.length; i ++){
            ids.push(res.list[i].tId);
            for(var j = 0; j < _users.length; j ++){
                if(_users[j].uId == res.list[i].uId){
                    console.log(_users[j]);
                    users.push(_users[j]);
                }
            }
        }
        console.log(users);
        $http.jsonp(list_url + name+'.json?callback=JSON_CALLBACK&ids=' + ids.join(',') + '&sp=11').success(function(res){    //根据id获取数据信息
            $scope.datas = [];
            var id = name + 'Id';
            //console.log(res.data);
            for(var i = 0; i <  res.data.length; i ++){
                var data = {};
                if(name == 'artist'){
                    console.log(res.data[i].artistId);
                    data.id = res.data[i].artistId;
                    data.name = res.data[i].artistName;
                    if(users.length >0)
                        data.uName = users[i].name;
                }
                if(name == 'album'){
                    data.id = res.data[i].albumId;
                    data.name = res.data[i].albumName;
                    if(users.length >0)
                        data.uName = users[i].name;
                }
                if(name == 'song'){
                    data.id = res.data[i].songId;
                    data.name = res.data[i].songName;
                    if(users.length >0)
                        data.uName = users[i].name;
                }
                data.type = type;
                $scope.datas.push(data);
            }
            console.log($scope.datas);
        });
    });
}
//复选框单选
function checkSingle(isCheck, data,choseArr){
    if(choseArr.length > 0){
        var choseStr = choseArr.join(',');
    }
    console.log(isCheck);
    console.log(choseArr);
    if(isCheck != true){
        choseStr = choseStr + data + ",";
        data.isCheck = true;
    } else {
        choseStr.replace(data + ",", "");
        data.isCheck = false;
    }
    if(choseStr.length = 0){
       choseArr = [];
    } else {
        choseArr = (choseStr.substr(0,choseStr.length-1)).split(',');
    }
    console.log(choseArr);
    return choseArr;
};
angular.module('app.routes').controller('ModalCtrl',["$scope", "$uibModal", function($scope, $uibModal){   //添加项目弹出层控件
    $scope.items = ['item1', 'item2', 'item3'];
    $scope.animationsEnabled = true;
    $scope.user = {};
    $scope.user.id = _session.id;
    $scope.user.name = _session.name;
    function ModalOpenSetup(templateUrl, controller, resolve, size) {
        this.templateUrl = templateUrl;
        this.controller = controller;
        this.resolve = resolve;
        this.size = size;
    }
    $scope.open = function (size){
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'myModalContent.html',
            controller: 'ModalInstanceCtrl',
            size: size,
            resolve: {
                items: function () {
                    return $scope.items;
                }
            }
        });
    };
    $scope.openImport = function(pId,uId,p_type){     //打开上传excel弹出层
        var param = {};
        param.pId = pId;
        param.uid = uId;
        if(p_type == 0 || p_type == 5){
            param.p_type = 'artist';
        } else if(p_type == 1 || p_type == 6){
            param.p_type = 'album';
        } else if(p_type == 2 || p_type == 7){
            param.p_type = 'song';
        } else if(p_type == 3 || p_type == 8){
            param.p_type = 'tag';
        } else if(p_type == 4 || p_type == 9){
            param.p_type = 'cp';
        }

            console.log(param);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'import.html',
            controller: 'ImportCtrl',
            resolve: {
                param: function () {
                    return param;
                }
            }
        });
    };
    $scope.openRole = function(id,name){      //打开权限分配角色列表弹出层
        $scope.user = {};
        $scope.user.id = id;
        $scope.user.name = name;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'role.html',
            controller: 'RoleCtrl',
            resolve: {
                user: function(){
                    return $scope.user;
                }
            }
        });
    };
    $scope.openUser = function(id){
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'user.html',
            controller: 'UserCtrl',
            resolve: {
                id: function(){
                    return id;
                }
            }
        });
    };
    $scope.openAuthority = function(id){
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'authority.html',
            controller: 'AuthorityCtrl',
            resolve: {
                id: function(){
                    return id;
                }
            }
        });
    };
    $scope.addRole = function(){
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'addRole.html',
            controller: 'AddRoleCtrl',
            resolve: {
            }
        });
    };
    $scope.openRAuthority = function(){
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'rAuthority.html',
            controller: 'RAuthorityCtrl',
            resolve: {
            }
        });
    };
    $scope.openImport_lack = function(){     //打开缺歌上传excel
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'import_lack.html',
            controller: 'ImportCtrl_lack',
            resolve: {
                user: function(){
                    return $scope.user;
                }
            }
        });
    };
    $scope.openEdit= function(data,size){     //打开缺歌列表编辑页面
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'edit.html',
            controller: 'EditCtrl',
            size: size,
            resolve: {
                data: function(){
                    return data;
                },
                user: function () {
                    return $scope.user;
                }
            }
        });
    };
    $scope.batchExamine = function (datas,form,types,size) {
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: '/myModalContent.html',
            controller: 'BatchModalCtrl',
            size: size,
            resolve: {
                datas: function () {
                    return datas;
                },
                form: function () {
                    return form;
                },
                types: function () {
                    return types;
                }
            }
        });
    };
    $scope.exportCommon = function (datas,form,size) {
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'exportTpl.html',
            controller: 'PreCatalogModal',
            size: size,
            resolve: {
                datas: function () {
                    return datas;
                },
                form: function () {
                    return form;
                }
            }
        });
    };
    $scope.preCatalogImport = function (datas,form) {
        var modalInstance = $uibModal.open({
            templateUrl: 'importTpl.html',
            controller: 'PreCatalogModal',
            resolve: {
                datas: function () {
                    return datas;
                },
                form: function () {
                    return form;
                }
            }
        })
    };
    $scope.preCatalogEmergImport = function (datas,form) {
        var modalInstance = $uibModal.open({
            templateUrl: 'emergImportTpl.html',
            controller: 'PreCatalogModal',
            resolve: {
                datas: function () {
                    return datas;
                },
                form: function () {
                    return form;
                }
            }
        })
    };
    $scope.unAssign = function (datas) {
        var modalInstance = $uibModal.open({
            templateUrl: 'unAssign.html',
            controller: 'UnAssignModal',
            resolve: {
                datas: function () {
                    return datas;
                }
            }
        })
    };
    $scope.songTagExport = function (module, datas, form) {
        $uibModal.open(new ModalOpenSetup('exportTpl.html', 'SongTagModal', {
            datas: function () {
                return datas;
            },
            form: function () {
                var _form = inherit(form);
                if(module == 3) _form.type = 3;
                else _form.type = 2;
                return _form;
            }
        }))
    };
    $scope.songTagImport = function (type) {
        $uibModal.open(new ModalOpenSetup('importTpl.html', 'SongTagImportModal', {
            type: function(){
                return type;
            }
        }))
    };
    $scope.assignToTask = function (type, datas) {
        $uibModal.open(new ModalOpenSetup('assignToTaskTpl.html', 'AssignToTaskModal', {
            type: function () {
                return type;
            },
            datas: function () {
                return datas;
            }
        }))
    };
    $scope.newSongImport = function(){
        $uibModal.open(new ModalOpenSetup('importTpl.html', 'NewSongImportController', {}));
    };
    $scope.newSongExport = function(datas,params){
        $uibModal.open(new ModalOpenSetup('exportTpl.html', 'NewSongExportController', {
            datas: function(){
                return datas;
            },
            params: function(){
                return params;
            }
        }))
    };
    $scope.newSongDelete = function(datas, params){
        $uibModal.open(new ModalOpenSetup('deleteTpl.html', 'NewSongDeleteController', {
            datas: function(){
                return datas;
            },
            params: function(){
                return params;
            }
        }))
    };
    $scope.qualityTagExport = function(datas,form){
        console.log(datas);
        $uibModal.open(new ModalOpenSetup('exportTpl.html', 'QualityTagExportController', {
            datas: function(){
                return datas;
            },
            form: function(){
                return form;
            }
        }))
    };
    $scope.qualityTagBatch = function(datas,form){
        $uibModal.open(new ModalOpenSetup('batchTpl.html', 'QualityTagExportController', {
            datas: function(){
                return datas;
            },
            form: function(){
                return form;
            }
        }))
    };
    $scope.qualityChangeOrder = function(data, orderType){
        $uibModal.open(new ModalOpenSetup('orderTpl.html', 'QualityOrderController', {
            data: function(){
                return data;
            },
            orderType: function(){
                return orderType;
            }
        }))
    };
}]);
angular.module('app.routes').controller('ImportCtrl',["$scope", "$uibModalInstance", "$http", "param", "$timeout", "$rootScope", "display", function($scope,$uibModalInstance,$http,param,$timeout,$rootScope,display){ //导入excel页面操作
    console.log("进入了导入excel");
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(){
        var filename = $('#excelFile').val();
        if(filename == undefined || filename == ''){
            $scope.error = '请选择上传的excel文件';
        }else{
            //$scope.error= '';
            //$.ajaxFileUpload({
            //    url: uc_uploadexcel,
            //    type: 'post',
            //    secureuri: false, //一般设置为false
            //    fileElementId: 'excelFile', // 上传文件的id、name属性名
            //    dataType: 'json', //返回值类型，一般设置为json、application/json
            //    data: {'pid':param.pId,'uid':param.uid,'type':param.p_type},
            //    success: function(res){
            //        console.log(res);
            //        if(res.returnCode == '000000'){
            //            $uibModalInstance.dismiss('cancel');
            //            alert('导入成功' + res.description,function(){
            //                location.reload();
            //            })
            //        }else{
            //            $scope.error = res.description;
            //            //$scope.error = '上传失败';
            //        }
            //    },
            //    error: function(res){
            //        console.log(res);
            //    }
            //});
             var url = uc_uploadexcel;
            var datas = {'pid':param.pId,'uid':param.uid,'type':param.p_type};
            ajaxFileUpload(url, $scope, datas, $uibModalInstance,$timeout,$rootScope,display, 'excelFile');
        }
    }
}]);
var _users = [];
//下拉框，自动补全并选中
angular.module('app.routes').controller('ModalInstanceCtrl',["$cookieStore", "$scope", "$http", "$uibModalInstance", "SweetAlert", function($cookieStore,$scope, $http,$uibModalInstance,SweetAlert){
    $scope.data = {};
    $scope.selected = undefined;
    var user = {};
    user.name = _session.name;
    user.uid = _session.id;
    console.log(user);
    $scope.users = _users;
    $scope.fzr_arr = [],$scope.fzr_arr.push(user);
    $scope.cyr_arr = [];
    $scope.selectFzr = function(fzr_detail){ //保存负责人数组
        if(!fzr_detail) return;
        var fzr = {};
        fzr.uid = fzr_detail.uId;
        fzr.name = fzr_detail.name;
        console.log(fzr);
        console.log($scope.fzr_arr);
        if($scope.fzr_arr.indexOf(fzr) == -1){
            $scope.fzr_arr.push(fzr);
        }
    };
    $scope.selectCyr = function(cyr_detail){ //保存参与人数组
        if(!cyr_detail) return;
        var cyr = {};
        cyr.uid = cyr_detail.uId;
        cyr.name = cyr_detail.name;
        if(JSON.stringify(user) == JSON.stringify(cyr)){
            return;
        }
        if($scope.cyr_arr.indexOf(cyr) == -1){
            $scope.cyr_arr.push(cyr);
        }
    };
    $scope.ok = function(){
        console.log(JSON.stringify($scope.data));
        if($scope.fzr_arr.length < 1){
            $scope.error = '请选择负责人';
            return;
        }
        if($scope.data == undefined){
            $scope.error = '保存失败';
            return;
        }
        $scope.data.fzrList = getArrayProperty($scope.fzr_arr, 'uid');
        $scope.data.cyrList = getArrayProperty($scope.cyr_arr, 'uid');
        $scope.data.uid = _session.id;
        $scope.data.builtin = 0;
        $scope.data.distribution = 1;
        var data = JSON.stringify($scope.data);
        console.log(data);
        $http.jsonp(uc_save_p + '.json?callback=JSON_CALLBACK&data=' + data).success(function(res){
            if(res.returnCode == '000000'){
                $uibModalInstance.close($scope.data);
                sweetAlertCall(SweetAlert, "保存成功", "success", null, function () {
                    location.reload();
                });
            }else{
                $scope.error = '保存失败';
            }
            console.log(res);
        });
    };
    //$scope.validName = function(){
    //    console.log($scope.data);
    //    var proName =  $scope.data.name;
    //    var d, s = "";
    //    var c = ":";
    //    d = new Date();
    //    s += d.getFullYear()+ "/";
    //    s += d.getMonth()+ "/";
    //    s += d.getDate()+ "/";
    //    s += d.getHours() + c;
    //    s += d.getMinutes() + c;
    //    s += d.getSeconds();
    //    $http.jsonp(uc_url + 'findRepartProjectName.json?callback=JSON_CALLBACK&userId=' + _session.id + '&projectName=' + proName).success(function(res){
    //        console.log(res);
    //        if(res.returnCode != '000000'){
    //            $scope.error = '项目名称重复,已自动修改';
    //            var pro_name = $scope.data.name;
    //            $scope.data.name = pro_name + s;
    //        }else{
    //            $scope.error = '';
    //        }
    //    });
    //};
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.removeFzr = function(fzr){
        $scope.fzr_arr.remove(fzr);
    };
    $scope.removeCyr = function(cyr){
        $scope.cyr_arr.remove(cyr);
    }
}]);
angular.module('app.routes').controller('taskCtrl',["$scope", "$http", "$cookies", function($scope,$http,$cookies){
    if(_users.length < 1){    //如果缓存不存在,则请求获取用户
        getAllUser($http, function(users){
            _users = users;
            $scope.users = _users;
            $scope.selected = undefined;
        });
    } else {
        $scope.users = _users;
        $scope.selected = undefined;
    }
}]);

angular.module('app.routes').controller('DatepickerCtrl', ["$scope", function ($scope) {  //日期时间选择控件
    //console.log($scope.fzr_arr);
    $scope.sopen = function($event) {
        $scope.status.sopened = true;
    };
    $scope.eopen = function($event) {
        $scope.status.eopened = true;
    };
    $scope.status = {
        sopened: false,
        eopened: false
    };
}]);

//字符串转日期格式，strDate要转为日期格式的字符串
function getDate(strDate) {
    var date = eval('new Date(' + strDate.replace(/\d+(?=-[^-]+$)/,
            function (a) { return parseInt(a, 10) - 1; }).match(/\d+/g) + ')');
    return date;
}
//复选框的单选
function ucTaskSelectOne($scope, data, checkb){
    var str = '';
    //var unstr = '';
    if($scope.choseArr.length > 0){
        str = $scope.choseArr.join(',') + ',';
        $scope.choseArr = [];
    }
    //if($scope.unchoseArr.length > 0){
    //    unstr = $scope.unchoseArr.join(',') + ',';
    //    $scope.unchoseArr = [];
    //}
    if(checkb != true){//选中
        if(data.songId != undefined){
            str = str + data.songId + ',';
            //unstr = unstr.replace(data.songId + ',', '');
        } else if (data.albumId != undefined){
            str = str + data.albumId + ',';
            //unstr = unstr.replace(data.albumId + ',', '');
        } else if (data.artistId != undefined){
            str = str + data.artistId + ',';
            //unstr = unstr.replace(data.artistId + ',', '');
        }
        data.isCheck = true;
    } else {//取消选中
        if(data.songId != undefined){
            str = str.replace(data.songId + ',', '');
            //unstr = unstr + data.songId + ',';
        } else if (data.albumId != undefined){
            str = str.replace(data.albumId + ',', '');
            //unstr = unstr + data.albumId + ',';
        } else if (data.artistId != undefined){
            str = str.replace(data.artistId + ',', '');
            //unstr = unstr + data.artistId + ',';
        }
        data.isCheck = false;
    }
    if(str.length > 0){
        $scope.choseArr = (str.substr(0,str.length-1)).split(',');
    }
    //if(unstr.length > 0){
    //    $scope.unchoseArr = (unstr.substr(0,unstr.length-1)).split(',');
    //}
    //console.log($scope.choseArr);
    //console.log($scope.unchoseArr);
}
//复选框的全选
function ucTaskSelectAll($scope, all, datas){
    $scope.choseArr = [];
    //$scope.unchoseArr = [];
    if(all == true){
        $scope.allIsCheck = true;
        for(var i=0; i < datas.length; i++){
            var data = datas[i];
            if(data.songId != undefined){
                $scope.choseArr.push(data.songId + "");
            } else if (data.albumId != undefined){
                $scope.choseArr.push(data.albumId + "");
            } else if (data.artistId != undefined){
                $scope.choseArr.push(data.artistId + "");
            }
            data.isCheck = true;
        }
    }else{
        $scope.allIsCheck = false;
        for(var i=0; i < datas.length; i++){
            data = datas[i];
            //if(data.songId != undefined){
            //    $scope.unchoseArr.push(data.songId + "");
            //} else if (data.albumId != undefined){
            //    $scope.unchoseArr.push(data.albumId + "");
            //} else if (data.artistId != undefined){
            //    $scope.unchoseArr.push(data.artistId + "");
            //}
            data.isCheck = false;
        }
    }
    console.log($scope.choseArr);
    //console.log($scope.unchoseArr);
}
//获取当前任务数据
function getUcTaskDatas(type, userId, $scope, $stateParams, $http){
    $scope.datas.length = 0;
    var data = new Object();
    data.projectId = $stateParams.pId;
    data = compeleteUrlData(data, userId, $stateParams, $scope, type);
    var url = _search_url + 'search/' + type + '.json' + "?callback=JSON_CALLBACK&data=" + JSON.stringify(data);
    console.log(JSON.stringify(data));
    $http.jsonp(url).success(function (res){
        var dataIds = [];
        for(var i = 0; i < res.body.list.length; i++){
            if(type == 'song'){
                dataIds.push(res.body.list[i].songId);
            } else if (type == 'album'){
                dataIds.push(res.body.list[i].albumId);
            } else if (type == 'artist'){
                dataIds.push(res.body.list[i].artistId);
            } else if (type == 'copyright'){
                dataIds.push(res.body.list[i].copyrightId);
            }
        }
        ucTaskSeparatePage($scope, res);
        if(dataIds.length > 0){
            var url1 = list_url + type + ".json?callback=JSON_CALLBACK&ids=" + dataIds.join(",");
            if(type == 'copyright'){
                url1 += '&loadSong=true&loadAlbum=true&loadArtist=111111';
            }
            $http.jsonp(url1).success(function (res1) {
                for(var j = 0; j < res1.data.length; j++){
                    $scope.datas.push(res1.data[j]);
                    //获得数据的负责人
                    $scope.datas[j].user = getParticipateUser($scope.datas[j], res, $scope.cyr_list, type);
                }
            }).error(function () {
                alert("批量获取详细信息网络错误");
            });
        }
    }).error(function(){
        alert("获取任务批量ID网络错误");
    });
}
//新歌流程获取数据
function getUcTaskDatasNewSong(materialType, pageType, userId, $scope, $stateParams, $http,SweetAlert){
    var url = uc_new_song + materialType + ".json?" + CALLBACK + "&data=";
    var data = new Object();
    if(checkEmpty($stateParams.pageSize)) $stateParams.pageSize = 100;
    data = compeleteUrlDataNewSong(data, pageType, userId, $scope, $stateParams);
    //console.log(data);
    var url1 = url + encodeURIComponent(JSON.stringify(data));
    //url += JSON.stringify(data);
    $http.jsonp(url1).success(function(res){
        $scope.$parent.datas.length = 0;
        $scope.$parent.datas = res.data.list;
    });
    var data2 = cloneOneObject(data);
    data2.isQueryCount = 1;
    var url2 = url + JSON.stringify(data2);
    $http.jsonp(url2).success(function(res) {
        materialListSeparatePage($scope.$parent,res);
    });
}

//根据名字获取负责人ID
function getIdByName(name, cyr_list){
    var id = '';
    for(var i = 0; i < cyr_list.length; i++){
        if(name == cyr_list[i].uName){
            id = cyr_list[i].uId;
        }
    }
    return id;
}
//根据用户ID获取名字
function getNameById(id, users){
    for(var i = 0; i < users.length; i++){
        if(users[i].uId == id){
            return users[i].uName;
        }
    }
    return '';
}

function compeleteUrlDataNewSong(data, pageType, userId, $scope, $stateParams){
    if($stateParams.taskStatusList != undefined && $stateParams.taskStatusList != ''){
        data.taskStatusList = stringToArray($stateParams.taskStatusList);
    } else if (pageType != undefined && pageType != ''){
        data.taskStatus = pageType;
    }
    if(!checkEmpty($stateParams.taskStatus)) data.taskStatus = $stateParams.taskStatus;
    if($stateParams.pId != undefined && $stateParams.pId != ''){
        data.projectId = $stateParams.pId;
    }
    if(userId != undefined && userId != ''){
        data.uid = userId;
    }
    if($stateParams.artistIds != undefined && $stateParams.artistIds != ''){
        data.artistIds = stringToArray($stateParams.artistIds);
    }
    if($stateParams.status != undefined && $stateParams.status != ''){
        data.status = $stateParams.status;
    }
    if($stateParams.productSongName != undefined && $stateParams.productSongName != ''){
        data.cpSongName = $stateParams.productSongName;
    }
    if($stateParams.productAlbumName != undefined && $stateParams.productAlbumName != ''){
        data.cpAlbumName = $stateParams.productAlbumName;
    }
    if($stateParams.productArtistName != undefined && $stateParams.productArtistName != ''){
        data.cpArtistName = $stateParams.productArtistName;
    }
    if($stateParams.cid != undefined && $stateParams.cid != ''){
        data.copyrightId = $stateParams.cid;
    }
    if($stateParams.catalogSongName != undefined && $stateParams.catalogSongName != ''){
        data.songName = $stateParams.catalogSongName;
    }
    if($stateParams.catalogAlbumName != undefined && $stateParams.catalogAlbumName != ''){
        data.albumName = $stateParams.catalogAlbumName;
    }
    if($stateParams.catalogArtistName != undefined && $stateParams.catalogArtistName != ''){
        data.artistName = $stateParams.catalogArtistName;
    }
    if($stateParams.artistName != undefined && $stateParams.artistName != ''){
        data.artistName = $stateParams.artistName;
    }
    if($stateParams.filterCondition != undefined && $stateParams.filterCondition != ''){
        data.filterItem = $stateParams.filterCondition;
    }
    if($stateParams.songId != undefined && $stateParams.songId != ''){
        data.songIds = stringToArray($stateParams.songId);
    }
    if($stateParams.creatTimeStart != undefined && $stateParams.creatTimeStart != ''){
        data.createStartTime = $stateParams.creatTimeStart;
    }
    if($stateParams.creatTimeEnd != undefined && $stateParams.creatTimeEnd != ''){
        data.createEndTime = $stateParams.creatTimeEnd;
    }
    if($stateParams.projectName != undefined && $stateParams.projectName != ''){
        data.projectName = $stateParams.projectName;
    }
    if($stateParams.newOrFirst != undefined && $stateParams.newOrFirst != ''){
        data.newSong = $stateParams.newOrFirst;
    }
    if($stateParams.degree != undefined && $stateParams.degree != ''){
        data.degree = $stateParams.degree;
    }
    if($stateParams.auth != undefined && $stateParams.auth != ''){
        data.auth = $stateParams.auth;
    }
    if($stateParams.dataState != undefined && $stateParams.dataState != '' && $stateParams.dataState != "all"){
        data.status = $stateParams.dataState;
    }
    if($stateParams.tagStatus != undefined && $stateParams.tagStatus != '' && $stateParams.tagStatus != "all"){
        data.tagStatus = stringToArray($stateParams.tagStatus);
    }
    if($stateParams.distributionTimeStart != undefined && $stateParams.distributionTimeStart != ''){
        data.distributionStartTime = $stateParams.distributionTimeStart;
    }
    if($stateParams.distributionTimeEnd != undefined && $stateParams.distributionTimeEnd != ''){
        data.distributionEndTime = $stateParams.distributionTimeEnd;
    }
    if($stateParams.compeleteTimeStart != undefined && $stateParams.compeleteTimeStart != ''){
        data.completeStartTime = $stateParams.compeleteTimeStart;
    }
    if($stateParams.compeleteTimeEnd != undefined && $stateParams.compeleteTimeEnd != ''){
        data.completeEndTime = $stateParams.compeleteTimeEnd;
    }
    if($stateParams.pageNo != undefined && $stateParams.pageNo != ''){
        data.pageNo = $stateParams.pageNo;
    }
    if($stateParams.pageSize != undefined && $stateParams.pageSize != ''){
        data.pageSize = $stateParams.pageSize;
    }
    //专辑工单页面特有查询条件
    if($stateParams.albumId != undefined && $stateParams.albumId != ''){
        data.albumIds = stringToArray($stateParams.albumId);
    }
    if($stateParams.albumName != undefined && $stateParams.albumName != ''){
        data.albumName = $stateParams.albumName;
    }
    //歌曲工单特有查询条件
    if($stateParams.songName != undefined && $stateParams.songName != ''){
        data.songName = $stateParams.songName;
    }
    if($stateParams.lyricPerson != undefined && $stateParams.lyricPerson != ''){
        data.lyricser = $stateParams.lyricPerson;
    }
    if($stateParams.composePerson != undefined && $stateParams.composePerson != ''){
        data.composer = $stateParams.composePerson;
    }
    if($stateParams.conductor != undefined && $stateParams.conductor != ''){
        data.cantor = $stateParams.conductor;
    }
    if($stateParams.player != undefined && $stateParams.player != ''){
        data.performer = $stateParams.player;
    }
    if($stateParams.tagIds != undefined && $stateParams.tagIds != ''){
        data.tags = stringToArray($stateParams.tagIds);
    }
    if(!isPropertyEmpty($stateParams.lastEdit != '')){
        data.editUid = $stateParams.lastEdit;
    }
    if(!isPropertyEmpty($stateParams.editSubmitStart != '')){
        data.editStartTime = $stateParams.editSubmitStart;
    }
    if(!isPropertyEmpty($stateParams.editSubmitEnd != '')){
        data.editEndTime = $stateParams.editSubmitEnd;
    }
    if(!isPropertyEmpty($stateParams.urgentDegree)) data.urgentDegree = $stateParams.urgentDegree;
    if(!isPropertyEmpty($stateParams.language)) data.language = $stateParams.language;
    //if(pageType != undefined && pageType != ''){
    //    data.type = pageType;
    //}
    return data;
}
//获得当前数据对应的哪个操作人
function getParticipateUser(data, res, cyr_list, type){
    var userId = '';
    for(var i = 0; i < res.body.list.length; i++){
        if (type == 'song'){
            if(data.songId == res.body.list[i].songId){
                userId = res.body.list[i].userId;
            }
        } else if (type == 'album'){
            if(data.albumId == res.body.list[i].albumId){
                userId = res.body.list[i].userId;
            }
        } else if (type == 'artist'){
            if(data.artistId == res.body.list[i].artistId){
                userId = res.body.list[i].userId;
            }
        } else if (type == 'copyright'){
            if(data.copyrightId == res.body.list[i].copyrightId){
                userId = res.body.list[i].userId;
            }
        }
    }
    if(userId == ''){
        return new Object();
    }
    for(var j = 0; j < cyr_list.length; j++){
        if(userId == cyr_list[j].uId){
            return cyr_list[j];
        }
    }
    return new Object();
}
//分页的函数
function ucTaskSeparatePage($scope, res){
    if(!checkEmpty($scope.params)){
        $scope.params.maxSize = 5;
        $scope.params.itemsPerPage = res.data.pageSize;
        $scope.params.currentPage = res.data.pageNo;
        $scope.params.totalItems = res.data.totalCount;
    }
    if(!checkEmpty($scope.form)){
        $scope.form.maxSize = 5;
        $scope.form.itemsPerPage = res.data.pageSize;
        $scope.form.currentPage = res.data.pageNo;
        $scope.form.totalItems = res.data.totalCount;
    }

}

//分配任务
function assignTask(type, uId, $scope, $stateParams, $http){
    console.log($scope.setting);
    if($scope.choseArr.length < 1){
        alert('请选择需要分配的数据');
        return;
    }
    console.log($scope.choseArr);
    var url = uc_assign_t + '.json?callback=JSON_CALLBACK&pId=' + $stateParams.pId + '&uId=' + uId + '&tId=' + $scope.choseArr.join(',') + '&type=' + type;
    if($scope.setting != undefined && $scope.setting != null && $scope.setting.value != ''){
        url += ('&aBType=' + $scope.setting.value);
    }
    $http.jsonp(url).success(function(res){
        if(res.returnCode == '000000'){
            alert('分配成功',function(){
                location.reload();
            });
        }else{
            alert('分配失败');
        }
    });
}

//新歌工单分配任务
function assignTaskNewSong(taskIds, flowId, auth, uId, SweetAlert, $scope, TaskService){
    var _promise = TaskService.service.assignTask(taskIds, flowId, auth, uId); // 确认权限和流程
    if(_promise) _promise.then(function (res) {
        if(res.returnCode == "000000"){
            sweetAlertCommon(SweetAlert, res.msg, 'success');
            location.reload(true);
        } else if (res.returnCode == "000005") {
            var tips = "版权ID为" + res.list.join(',') + '的数据分配失败，已为您重新勾选，请重新分配';
            sweetAlertCommon(SweetAlert, tips, 'success');
            checkAssignedFailed(res.list, $scope.datas);
        } else {
            sweetAlertCommon(SweetAlert, res.msg, 'warning');
        }
    });
    // $http.jsonp(uc_assign_t + ".json?callback=JSON_CALLBACK&ids=" + taskIds + "&flowId=" + flowId + "&auth=" + auth + "&uId=" + uId).success(function(res){
    //     if(res.returnCode == "000000"){
    //         alertTipCommon($timeout,$rootScope,'分配成功',display);
    //         //alert("分配成功");
    //         location.reload(true);
    //     } else if (res.returnCode == "000005") {
    //         var tips = "版权ID为" + res.list.join(',') + '的数据分配失败，已为您重新勾选，请重新分配';
    //         alertTipCommon($timeout, $rootScope, tips, display);
    //         checkAssignedFailed(res.list, $scope.datas);
    //     } else {
    //         alertTipCommon($timeout,$rootScope,'分配失败,请重新操作',display);
    //     }
    // });
}

//重新勾选分配失败的任务
function checkAssignedFailed(cpIds, datas){
    for (var i = 0; i < datas.length; i++) {
        data = datas[i];
        if(isContainValue(cpIds, data.copyrightId)){
            data.allIsCheck = true;
        } else {
            data.allIsCheck = false;
        }
    }
}

//导出数据
function exportData($scope){
    console.log($scope.p_type);
    var type = '';
    if($scope.choseArr.length < 1){
        alert('请选择要导出的数据');
        return;
    }
    if($scope.p_type == 1)
        type = 'song';
    if($scope.p_type == 3)
        type = 'artist';
    if($scope.p_type == 4)
        type = 'album';
    if($scope.p_type == 5){
        type = 'song';
        console.log(type)
    }
    var url = '/mls/' + type + '/excel?ids=' +  $scope.choseArr.join(',');
    location.href = url;
}

/**
 * 判断一个用户是否在一个用户数组里面
 * @param user
 * @param users
 */
function judgeIndexOfUser(user, users){
    for(var i = 0; i < users.length; i++){
        var id1 = (user.uId != undefined ? user.uId : user.uid);
        var id2 = (users[i].uId != undefined ? users[i].uId : users[i].uid);
        if(id1 == id2){
            return true;
        }
    }
    return false;
}

//获取项目流程
function getTaskContent($scope, $stateParams, $http){
    //获取项目的流程
    $http.jsonp(uc_find_p+'.json?' + CALLBACK + '&data={"id":"' + $stateParams.pId + '"}').success(function(res){
        $scope.p_type = res.data.list[0].flowType;
        $scope.distribution = res.data.list[0].distribution;
        $scope.cyr_list = [];
        for(var i = 0; i < res.data.list[0].cyrList.length;i++){
            res.data.list[0].cyrList[i].uid = res.data.list[0].cyrList[i].uid + "";
            $scope.cyr_list.push(res.data.list[0].cyrList[i]);
        }
        for(var i = 0; i < res.data.list[0].fzrList.length;i ++){
            res.data.list[0].fzrList[i].uid = res.data.list[0].fzrList[i].uid + "";
            $scope.cyr_list.push(res.data.list[0].fzrList[i]);
            if(res.data.list[0].fzrList[i].uid == JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid){
                $scope.userRole = 'fzr';
            }
        }
    });
    $http.jsonp(uc_new_song_auth + "?" + CALLBACK + "&pId=" + $stateParams.pId).success(function(res){
        if(res.returnCode == "000000"){
            $scope.authoritySetting = res.list;
            if(!checkEmpty($scope.params)) $scope.params.task_auth_setting = $scope.authoritySetting[0];
            if(!checkEmpty($scope.form)) $scope.form.task_auth_setting = $scope.authoritySetting[0];
        }
    });
}

angular.module("app.routes").controller("UcFlowTypeController", ["$scope", function($scope){
    $scope.flowTypes = [{key: 0, value: "艺人编辑"},{key: 1, value: "专辑编辑"},{key: 2, value: "歌曲编辑"},{key: 3, value: "歌曲标签"}];
}]);
/**
 * Created by hao.cheng on 2016/7/19.
 */
(function () {
    'use strict';

    angular.module('app.routes').config(UpdateConfig);
    UpdateConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
    function UpdateConfig($stateProvider, helper) {
        $stateProvider
            .state('app.update',{
                url: '/update',
                views: {
                    '': {
                        templateUrl: helper.basepath('update/batchupdate-head.html'),
                        controller: 'UpdateHeadCtrl'
                    }
                }
            })
            .state('app.update.list',{
                url: '/list?:upType&:updateIds&:ids&:taskId:type&:batchLocal&:flow',
                views: {
                    'data-list': {
                        templateUrl: helper.basepath('update/batchupdate-list.html'),
                        controller: 'UpdateListCtrl'
                    }
                }
            })
    }
    
    angular.module('app.routes').controller('UpdateHeadCtrl',["$scope", "$state", "SweetAlert", "$http", "BaseService", function ($scope,$state,SweetAlert,$http,BaseService) {
        if(!$scope.form) $scope.form = {};
        $scope.submit = function () {   //提交按钮
            if(!$scope.datas || $scope.datas.length == 0) return sweetAlertCommon(SweetAlert,'请先添加数据','warning');
            var data = {songIds: []};
            $scope.datas.forEach(function (val) {
                var song = {songId: val.songId};
                if($scope.batchLocal) song.taskId = $scope.batchLocal[val.songId];
                // if($scope.form.taskId) song.taskId = $scope.form.taskId;
                data.songIds.push(song);
            });
            if($scope.form.type == 'artist')
                data.rmArtists = $scope.form.delArtists,data.addArtists = $scope.form.addArtists;
            if($scope.form.type == 'album')
                data.rmAlbums = $scope.form.delAlbums,data.addAlbums = $scope.form.addAlbums;
            if($scope.form.type == 'lyricser')
                data.rmLyricsers = $scope.form.delArtists,data.addLyricsers = $scope.form.addArtists;
            if($scope.form.type == 'composer')
                data.rmComposers = $scope.form.delArtists,data.addComposers = $scope.form.addArtists;
            if($scope.form.type == 'tag')
                data.rmTags = $scope.form.delTags,data.addTags = $scope.form.addTags;
            if($scope.form.type == 'lyric')
                data.lyric = $scope.form.lyric,data.lyric = $scope.form.lyric;
            if($scope.form.flow) data.flow = $scope.form.flow;
            var promise = BaseService.service.batchUpdate(angular.toJson(data),$scope.form.upType);
            promise.then(function (res) {
                if(res.status == 1){
                    sweetAlertCommon(SweetAlert,res.msg,'success');
                    var tempDatas = [];
                    var _updateIds = [];
                    $scope.datas.forEach(function (val) { //返回失败的数据进行处理
                        res.data.forEach(function (cVal) {
                            if(val.songId == cVal.songId) val.msg = cVal.msg,tempDatas.push(val),_updateIds.push(val.songId);
                        });
                    });
                    $scope.errorDatas = tempDatas;
                    $state.go('app.update.list',{updateIds: _updateIds.join(',')});
                }
                else sweetAlertCommon(SweetAlert,res.msg,'error');
            });
        };
        $scope.add = function () {  //添加按钮
            if(checkEmpty($scope.form.ids)){
                sweetAlertCommon(SweetAlert,'请填写歌曲ID','warning');
                return;
            }
            var ids = $scope.form.ids.split(',');
            if(checkEmpty($scope.form.updateIds)) var updateIds = [];
            else var updateIds = function () { //从数据里面获取系列id。防止从url地址重复添加上一次数据
                var tempIds = [];
                $scope.datas.forEach(function (val) {
                    tempIds.push(val[$scope.form.upType + 'Id']);
                });
                return tempIds;
            }();
            ids.forEach(function (val) {    //往updateIds里面添加数据
                if(updateIds.indexOf(val) == -1)
                    updateIds.push(val);
            });
            $scope.form.updateIds = updateIds.join(',');
            $state.go('app.update.list',$scope.form);
        };
        $scope.getArtistInputSearch = function(value,type){   //精确输入框搜索艺人
            return $http.jsonp(list_url + type + '.json?ids=' + value + '&' + CALLBACK).then(function(res){
                return res.data.data.map(function(item){
                    var allstr = item[type + 'Name'] + '-' + (checkEmpty(item[type + 'NameAlias'])?'':item[type + 'NameAlias']);
                    allstr = allstr.substr(0, allstr.length - 1) + '-' + item[type + 'Id'];
                    item.allstr = allstr;
                    return item;
                });
            });
        };
        $scope.addDelArtist = function (value,type) { //删除艺人
            var tp = type.charAt(0).toUpperCase() + type.slice(1);
            // var artist = {artistId: value.artistId,artistName: value.artistName};
            var data = {};data[type + 'Id'] = value[type + 'Id'];data[type + 'Name'] = value[type + 'Name'];
            if(checkEmpty($scope.form['del'+tp+'s'])) $scope.form['del'+tp+'s'] = [];
            if($scope.form['del'+tp+'s'].indexOf(data) == -1) $scope.form['del'+tp+'s'].push(data);
        };
        $scope.addAddArtist = function (value,type) { //新增艺人
            var tp = type.charAt(0).toUpperCase() + type.slice(1);
            // var artist = {artistId: value.artistId,artistName: value.artistName};
            var data = {};data[type + 'Id'] = value[type + 'Id'];data[type + 'Name'] = value[type + 'Name'];
            if(checkEmpty($scope.form['add'+tp+'s'])) $scope.form['add'+tp+'s'] = [];
            if($scope.form['add'+tp+'s'].indexOf(data) == -1) $scope.form['add'+tp+'s'].push(data);
        };
        $scope.addDelTags = function (val) { //删除标签
            var tag  = {tagId: val.id,tagName: val.name};
            if(checkEmpty($scope.form.delTags)) $scope.form.delTags= [];
            if($scope.form.delTags.indexOf(tag) == -1) $scope.form.delTags.push(tag);
        };
        $scope.addAddTags = function (val) { //新增标签
            var tag  = {tagId: val.id,tagName: val.name};
            if(checkEmpty($scope.form.addTags)) $scope.form.addTags= [];
            if($scope.form.addTags.indexOf(tag) == -1) $scope.form.addTags.push(tag);
        };
        $scope.removeRelationData = function (arr,data) {
            $scope.form[arr].remove(data);
        };
        $scope.changeUpdateType = function (type) {
            delete $scope.form.addArtists;
            delete $scope.form.delArtists;
            // if(type == 'tag' && !$scope.tagTree) //如果类型是标签并且标签为空则获取标签树
            //     var promise = BaseService.service.getTagTree(3,3);
            // if(promise)
            //     promise.then(function (res) {
            //         $scope.tagTree = [];
            //         res.tnList.forEach(function (val) {
            //             val.children.forEach(function (cVal) {
            //                 $scope.tagTree.push(cVal);
            //             });
            //         });
            //     });
            $state.go('app.update.list',{type: type});
        };
        $scope.uploadLyric = function(element){ //上传歌词
            $scope.$apply(function($scope) {
                $scope.form.fileName = element.files[0].name;
            });
            uploadLyric($scope.form,$scope,SweetAlert);
        };
        $scope.reset = function () { //重置按钮
            for(var p in $scope.form){
                if(p.toLowerCase().indexOf('s') != -1 && p != 'updateIds')
                    delete $scope.form[p];
            }
        };

        //获取标签树
        var promise = BaseService.service.getTagTree(3,3);
        if(promise && !$scope.tagTree) promise.then(function (res) {
            $scope.tagTree = [];
            res.tnList.forEach(function (val) {
                val.children.forEach(function (cVal) {
                    $scope.tagTree.push(cVal);
                });
            });
        });
    }]);
    angular.module('app.routes').controller('UpdateListCtrl',["$scope", "BaseService", "$stateParams", "$state", "SweetAlert", function ($scope,BaseService,$stateParams,$state,SweetAlert) {
        if($stateParams.batchLocal != 0) $scope.$parent.batchLocal = JSON.parse(localStorage.getItem('batchLocal'));
        for(var p in $stateParams){
            if(!checkEmpty($stateParams[p])) $scope.$parent.form[p] = $stateParams[p];
        }
        if(!checkEmpty($stateParams.updateIds)) //获取歌曲列表
            var promise = BaseService.service.getList($stateParams.updateIds,$stateParams.upType);
        else $scope.$parent.datas = [];
        if(promise)
            promise.then(function (res) {  
                if(res.data.length == 0){
                    return sweetAlertCommon(SweetAlert,'暂无数据','warning');
                }
                $scope.$parent.datas = res.data;
                if( $scope.$parent.errorDatas)
                    $scope.$parent.datas.forEach(function (val) {    //提交反馈失败数据处理
                        $scope.$parent.errorDatas.forEach(function (val2) {
                            if(val.songId == val2.songId) val.msg = val2.msg;
                        })
                    });
            });
        $scope.remove = function (datas,data) { //删除按钮
            var updateIds = [];
            updateIds = $scope.form.updateIds.split(',');
            updateIds.remove(data[$stateParams.upType+'Id']);
            $scope.form.updateIds = updateIds.join(',');
            $state.go('app.update.list',{updateIds: $scope.form.updateIds});
        }
    }])
})();
/**
 * Created by yuchunzhuo on 2016/4/22.
 */
angular.module('app.routes').config(specialsongConfig);
specialsongConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
function  specialsongConfig($stateProvider,helper){
    $stateProvider
        .state('app.special-song', {//缺歌页面
            url: '/special-song?:id&:tagId&:pageNo&:pageSize&:copyrightId&:songIds&:songName&:artistIds&:artistName&:language&:ethnic&:category&:termStartTime&:termEndTime&:cstartTime&:cendTime&:ustartTime&:uendTime',
            templateUrl: 'app/views/song/special_data/special-song.html',
            controller: ["$scope", "$http", "$stateParams", "permissions", "$cookies", "$timeout", "$rootScope", "$window", "display", "$state", "SweetAlert", function ($scope, $http, $stateParams, permissions, $cookies, $timeout, $rootScope, $window, display, $state,SweetAlert) {
                if($stateParams.tagId != undefined){
                    $scope.tagId = $stateParams.tagId;
                }
                //界面元素控制下拉框列表
                $scope.song_html = [
                    {
                        name: '曲库是否引入',
                        cheched: false
                    }, {
                        name: '版权ID',
                        cheched: true
                    }, {
                        name: '歌曲ID',
                        cheched: true
                    }, {
                        name: '歌曲名称',
                        cheched: true
                    }, {
                        name: '歌手ID',
                        cheched: true
                    }, {
                        name: '歌手名称',
                        cheched: true
                    }, {
                        name: '有效期',
                        cheched: true
                    }, {
                        name: '语种',
                        cheched: true
                    }, {
                        name: '民族',
                        cheched: true
                    }, {
                        name: '分类',
                        cheched: true
                    }, {
                        name: '入库时间',
                        cheched: true
                    }
                ];
                //初始化界面的datas
                $scope.datas = [];
                $scope.songTags = [];
                $scope.page = new Object();
                var songTagTree = [];
                //获取专项库顶部标签树
                var special_song_tag_url = special_data + 'tags.json?' + CALLBACK + '&kuid=' + $cookies.get("kuid");
                $http.jsonp(special_song_tag_url).success(function (res) {
                    //console.log(res);
                    if (res.status == '1') {
                        //把标签树保存下来供其它地方根据ID获取标签
                        songTagTree = res.data.list;
                        //获取页面数据
                        var url = special_data + 'song.json?' + CALLBACK;
                        url = fillSearchUrl(url, $stateParams);
                        if (url != undefined) {
                            $http.jsonp(url).success(function (res) {
                                res.body = res.data;
                                $scope.datas = res.data.list;
                                //填充页面数据
                                //getMaterialBySearch(res, $http, $scope, 'song');
                                //分页
                                materialListSeparatePage($scope, res);
                                $scope.page.startRow = res.body.startRow;
                            });
                        }
                        //显示已经选取的标签
                        if ($stateParams.tagId != undefined) {
                            for (var ii = 0; ii < $stateParams.tagId.split(',').length; ii++) {
                                var tagId = $stateParams.tagId.split(',')[ii];
                                //遍历获取到的标签树获得标签ID对应的标签
                                var tag = getTagByTagId($stateParams.tagId.split(',')[ii], songTagTree);
                                if (tag != undefined) {
                                    $scope.songTags.push(tag);
                                }
                            }
                        }
                        $scope.tags_list = songTagTree;
                    } else {
                        console.log(res);
                        //alert('返回异常，无法加载标签，返回值:' + JSON.stringify(res));
                        sweetAlertCommon(SweetAlert,'请求异常，无法加载标签树','warning');
                    }
                    //点击顶部标签展开下级的标签
                    //if ($stateParams.id != undefined) {
                    //    for (var i = 0; i < $scope.tags_title.length; i++) {
                    //        if ($scope.tags_title[i].id == $stateParams.id) {
                    //            $scope.tags_list = $scope.tags_title[i].children;
                    //        }
                    //    }
                    //}
                }).error(function (res) {
                    //alert('网络错误，无法加载标签');
                    sweetAlertCommon(SweetAlert,'请求异常,无法加载标签树','warning');
                });
                //获取专项库的语言，民族，分类
                var special_song_category = special_data + "getCategories.json?" + CALLBACK;
                $http.jsonp(special_song_category).success(function(res){
                    res.body.language.unshift("空");
                    res.body.ethnic.unshift("空");
                    res.body.category.unshift("空");
                    $scope.languages = res.body.language;
                    $scope.ethnics = res.body.ethnic;
                    $scope.categorys = res.body.category;
                    specialFillSearchCondition($scope, $stateParams);
                });
                //过滤返回里面的null或者空
                $scope.filterNullInArray = function(str){
                    return str !== null && str !== '';
                };
                //搜索按钮
                $scope.submit = function(){
                    //console.log($scope.search_language);
                    //console.log($scope.search_ethnic);
                    //console.log($scope.search_category);
                    $state.go("app.special-song",{category: $scope.search_category, ethnic: $scope.search_ethnic, language: $scope.search_language},{reload: true});
                };
                //全文搜索
                $scope.getSearchResult = function (value) {
                    //console.log(value);
                    return $http.get(special_data + 'song.json' , {
                        params: {
                            data: {
                                "songName": value
                            }
                        }
                    }).then(function (response) {
                        //console.log(response.data);
                        return response.data.data.list.map(function (item) {
                            //console.log(item);
                            var allstr = item.songName + '-';
                            if (item.artists != undefined && item.artists != null) {
                                for (var i = 0; i < item.artists.length; i++) {
                                    allstr += item.artists[i].artistName + ',';
                                }
                            }
                            allstr = allstr.substr(0, allstr.length - 1) + '-' + item.songId;
                            item.allstr = allstr;
                            return item;
                        });
                    })
                };
                //全文检索选择事件
                $scope.addSong2List = function (data) {
                    console.log(data);
                    $state.go('app.special-song', {songIds: stringToArray(data.songId), songKeyword: ''});
                };
                //全文检索点击搜索按钮
                $scope.searchSongBtn = function (value) {
                    $state.go('app.special-song', {songKeyword: value, songIds: ''});
                };
                //标签右上角的叉叉函数
                $scope.songTagRemove = function (tag) {
                    console.log(tag);
                    var tagId = $stateParams.tagId.split(',');
                    tagId.splice(tagId.indexOf(tag.tagId), 1);
                    $state.go('app.special-song', {tagId: tagId});
                };
                //点击标签树中的标签跳转相应数据显示页面
                $scope.songTagClick = function (tag) {
                    //if ($stateParams.tagIds == undefined) {
                    $state.go('app.special-song', {tagId: tag.tagId},{inherit :false});
                    //} else {
                    //下面要判断新来的tag的一级类别，如果一级类别相同，那么把原有标签替换掉
                    //如果和原有的所有标签一级类别都不重复，也就是新类别的标签，那么在原有的标签上面新增
                    //var parentRepeatTag = judgeParentTagRepeat(tag, $stateParams.tagIds.split(','), songTagTree);
                    //if (parentRepeatTag == undefined) {
                    //    $state.go('special_song', {tagIds: $stateParams.tagIds + ',' + tag.id, pageNo: '1'});
                    //} else {
                    //    var ids = $stateParams.tagIds.split(',');
                    //    ids[ids.indexOf(parentRepeatTag.id)] = tag.id;
                    //    $state.go('special_song', {tagIds: ids.join(','), pageNo: '1'});
                    //}
                    //}
                };
                //重新抽取素材
                $scope.extractedMaterial = function (id, type) {
                    extractedMaterial(id, type, $http, $timeout, $rootScope, display);
                };
                //分页跳转
                $scope.choosePage = function () {
                    $state.go('app.special-song', {pageNo: $scope.page.currentPage});
                };
                //监听键盘按钮事件
                $scope.enter = function (event, searchValue, searchType) {
                    //console.log(searchType);
                    if (event.keyCode == 13) {
                        //console.log(searchValue);
                        if (searchType == 'songId') {
                            $state.go('app.special-song', {songIds: stringToArray(searchValue), songName: '', artistIds: '', artistName: '', copyrightId: ''});
                        } else if (searchType == 'songName') {
                            $state.go('app.special-song', {songIds: '', songName: searchValue, artistIds: '', artistName: '', copyrightId: ''});
                        } else if (searchType == 'artistName') {
                            $state.go('app.special-song', {songIds: '', songName: '', artistIds: '', artistName: searchValue, copyrightId: ''});
                        } else if (searchType == 'artistIds') {
                            $state.go('app.special-song', {songIds: '', songName: '', artistIds: stringToArray(searchValue), artistName: '', copyrightId: ''});
                        } else if (searchType == 'copyrightId') {
                            $state.go('app.special-song', {songIds: '', songName: '', artistIds: '', artistName: '', copyrightId: searchValue});
                        } else if (searchType == 'language') {
                            $state.go('app.special-song', {songIds: '', songName: '', artistIds: '', artistName: '', category: '', copyrightId: '', ethnic: '', language: searchValue});
                        } else if (searchType == 'ethnic') {
                            $state.go('app.special-song', {songIds: '', songName: '', artistIds: '', artistName: '', category: '', copyrightId: '', ethnic: searchValue, language: ''});
                        } else if (searchType == 'category') {
                            $state.go('app.special-song', {songIds: '', songName: '', artistIds: '', artistName: '', category: searchValue, copyrightId: '', ethnic: '', language: ''});
                        }
                    }
                };
                //显示所有属性
                $scope.showAllHtmlElem = function () {
                    for (var i = 0; i < $scope.song_html.length; i++) {
                        $scope.song_html[i].cheched = true;
                    }
                };
                //编辑按钮
                $scope.editSpecialData = function(data, type){
                    //console.log('点击了编辑按钮');
                    editSpecialData(data, type, SweetAlert);
                };
                //查看按钮
                $scope.showSpecialData = function(data, type){
                    showSpecialData(data, type, SweetAlert);
                };
                //删除单个数据按钮
                $scope.deleteSpecialData = function(data, type){
                    var ids = data.copyrightId;
                    deleteSpecialData(ids, type, $http, SweetAlert);
                };
                //批量删除按钮
                $scope.deleteSpecialDatas = function(datas, type){
                    var ids = getPropertyFromCheckBox(datas, 'checked', true, 'copyrightId');
                    deleteSpecialData(ids.join(","), type, $http, SweetAlert);
                };
                //查看艺人信息按钮
                $scope.showInfo = function (data) {
                    window.open(getOpenUrl(data, 'song'), "_blank");
                };
                //全选
                $scope.checkAll = function(datas){
                    selectAll($scope, datas, 'checked', 'allIsCheck');
                    $scope.selectedDataIds = getPropertyFromCheckBox(datas, 'checked', true, 'copyrightId');
                    //console.log($scope.selectedDataIds);
                };
                //单选
                $scope.checkOne = function(data, datas){
                    selectOne(data, !data.checked, 'checked');
                    $scope.selectedDataIds = getPropertyFromCheckBox(datas, 'checked', true, 'copyrightId');
                    //console.log($scope.selectedDataIds);
                };
            }]
        })
}

function fillSearchUrl(url, $stateParams){
    var data = new Object();
    var pageNo = ($stateParams.pageNo == undefined ? 1 : $stateParams.pageNo);
    var pageSize = ($stateParams.pageSize == undefined ? 100 : $stateParams.pageSize);
    data.pageNo = pageNo;
    data.pageSize =pageSize;
    if(!isPropertyEmpty($stateParams.copyrightId)){
        data.copyrightId = $stateParams.copyrightId;
    }
    if(!isPropertyEmpty($stateParams.songIds)){
        data.songIds = stringToArray($stateParams.songIds);
    }
    if(!isPropertyEmpty($stateParams.songName)){
        data.songName = $stateParams.songName;
    }
    if(!isPropertyEmpty($stateParams.artistIds)){
        data.artistIds = stringToArray($stateParams.artistIds);
    }
    if(!isPropertyEmpty($stateParams.artistName)){
        data.artistName = $stateParams.artistName;
    }
    if(!isPropertyEmpty($stateParams.language)){
        data.language = $stateParams.language;
    }
    if(!isPropertyEmpty($stateParams.ethnic)){
        data.ethnic = $stateParams.ethnic;
    }
    if(!isPropertyEmpty($stateParams.category)){
        data.category = $stateParams.category;
    }
    if(!isPropertyEmpty($stateParams.termStartTime)){
        data.termStartTime = $stateParams.termStartTime;
    }
    if(!isPropertyEmpty($stateParams.termEndTime)){
        data.termEndTime = $stateParams.termEndTime;
    }
    if(!isPropertyEmpty($stateParams.cstartTime)){
        data.cstartTime = $stateParams.cstartTime;
    }
    if(!isPropertyEmpty($stateParams.cendTime)){
        data.cendTime = $stateParams.cendTime;
    }
    if(!isPropertyEmpty($stateParams.ustartTime)){
        data.ustartTime = $stateParams.ustartTime;
    }
    if(!isPropertyEmpty($stateParams.uendTime)){
        data.uendTime = $stateParams.uendTime;
    }
    if(!isPropertyEmpty($stateParams.tagId)){
        data.tagId = $stateParams.tagId;
    }
    //如果没有参数（只有pageNo和pageSize那么不请求网络）
    var dataPropertyCount = 0;
    for(var elem in data){
        dataPropertyCount++;
    }
    if(dataPropertyCount <= 2){
        return undefined;
    }
    url += '&data=' + JSON.stringify(data);
    return url;
}

function editSpecialData(data, type, SweetAlert){
    var url = '';
    if(type == 'artist'){
        url = quality_tyqk + 'getArtist?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&artistId=' + data.artistId;
    } else if(type == 'album'){
        url = quality_tyqk + 'getAlbum?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&albumId=' + data.albumId;
    } else if(type == 'song'){
        url = quality_tyqk + 'getSong?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&songId=' + data.songId;
    }
    jQuery.ajax({
        url: url ,
        type: "post",
        async: false,
        timeout: 15000,
        dataType: "jsonp",  // not "json" we'll parse
        jsonp: CALLBACK,
        contentType: "application/jsonp; charset=utf-8",
        success: function(res) {
            if(res.status == '000000'){
                var uuid = '';
                var tyqkUrl = '';
                if(type == 'artist'){
                    uuid = res.artists[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/material/artist!showUpdateArtistPage.action?artistFormBean.artistId=' + uuid;
                } else if(type == 'album'){
                    uuid = res.albumList[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/material/album!showUpdateAlbumPage.action?albumFormBean.albumId=' + uuid;
                } else if(type == 'song'){
                    uuid = res.songList[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/musiclibrary/song!showUpdateSongPage.action?songFormBean.songId=' + uuid;
                }
                if(tyqkUrl != '' && uuid != undefined && uuid != ''){
                    window.open(tyqkUrl);
                }
            } else {
                sweetAlertCommon(SweetAlert,'反向接口返回异常','warning');
            }
        },
        error: function (res) {
            sweetAlertCommon(SweetAlert,'获取反向接口网络异常','warning');
        }
    });
}

function showSpecialData(data, type, SweetAlert){
    var url = '';
    if(type == 'artist'){
        url = quality_tyqk + 'getArtist?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&artistId=' + data.artistId;
    } else if(type == 'album'){
        url = quality_tyqk + 'getAlbum?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&albumId=' + data.albumId;
    } else if(type == 'song'){
        url = quality_tyqk + 'getSong?PID=6000020&SEQ=mzk&KEY=974e734459c4179cf26605b0993d6271&copyrightId=' + data.copyrightId;
    }
    jQuery.ajax({
        url: url ,
        type: "post",
        async: false,
        timeout: 15000,
        dataType: "jsonp",  // not "json" we'll parse
        jsonp: CALLBACK,
        contentType: "application/jsonp; charset=utf-8",
        success: function(res) {
            if(res.status == '000000'){
                var uuid = '';
                var tyqkUrl = '';
                if(type == 'artist'){
                    uuid = res.artists[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/material/artist!showArtistInfo.action?artistFormBean.artistId=' + uuid;
                } else if(type == 'album'){
                    uuid = res.albumList[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/material/album!showAlbumInfo.action?albumFormBean.albumId=' + uuid;
                } else if(type == 'song'){
                    uuid = res.songList[0].uuid;
                    tyqkUrl = 'http://218.200.230.40:18089/musiclibrary/song!showSongInfo.action?songFormBean.songId=' + uuid;
                }
                if(tyqkUrl != ''){
                    window.open(tyqkUrl);
                }
            } else {
                sweetAlertCommon(SweetAlert,'反向接口返回异常','warning');
            }
        },
        error: function (res) {
            sweetAlertCommon(SweetAlert,'获取反向接口网络异常','warning');
        }
    });
}

function deleteSpecialData(ids, type, $http, SweetAlert){
    if(ids.length == 0){
        sweetAlertCommon(SweetAlert,'没有勾选数据，无法删除','warning');
        return;
    }
    if(type == 'song'){
        type = "copyright";
    }
    var url = special_data + "delSpecialSong.json?" + CALLBACK + "&" + type + "Ids=" + ids;
    $http.jsonp(url).success(function(res){
        if(res.status == 1){
            sweetAlertCommon(SweetAlert,res.msg,'success');
            location.reload();
        } else {
            sweetAlertCommon(SweetAlert,res.msg,'error');
        }
    }).error(function(res){
        sweetAlertCommon(SweetAlert,'网络异常,删除失败','success');
    });
}

//专项库的导入导出控件
angular.module('app.routes').controller('song_special_controller', ["$scope", "$uibModal", "$stateParams", "SweetAlert", function($scope,$uibModal,$stateParams,SweetAlert){
    $scope.animationsEnabled = true;
    //导入excel
    $scope.import = function(type){
        if($stateParams.tagId == undefined){
            sweetAlertCommon(SweetAlert,"没有选择标签,不能导入",'error');
            return;
        }
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'song_special_import.html',
            controller: 'song_special_import_ctrl',
            resolve: {
                type: function(){
                    return type
                }
            }
        });
    };

    //导出excel
    $scope.export = function(type, selectedDataIds){
        if($stateParams.tagId == undefined){
            sweetAlertCommon(SweetAlert,"没有选择标签,不能导入",'error');
            return;
        }
        console.log(selectedDataIds);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'song_special_export.html',
            controller: 'song_special_export_ctrl',
            resolve: {
                type: function(){
                    return type;
                },
                ids: function(){return selectedDataIds;}
            }
        });
    };

}]);
//专项库导入框
angular.module('app.routes').controller('song_special_import_ctrl', ["$scope", "$uibModalInstance", "$http", "$filter", "type", "$timeout", "$rootScope", "display", "$stateParams", "SweetAlert", function($scope,$uibModalInstance,$http,$filter,type,$timeout,$rootScope,display,$stateParams,SweetAlert) {
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(){
        var filename = $('#file').val();
        if(filename == ''){
            $scope.error = '请选择上传的excel文件';
        }else{
            var url = special_data + 'import/' + type + '.json';
            var datas = {'tagId':$stateParams.tagId};
            ajaxFileUpload(url, $scope, datas, $uibModalInstance,SweetAlert, 'file');
        }
    }
}]);
//专项库导出框
angular.module('app.routes').controller('song_special_export_ctrl', ["$scope", "$uibModalInstance", "$stateParams", "$http", "$stateParams", "$filter", "type", "ids", function($scope, $uibModalInstance, $stateParams, $http, $stateParams, $filter, type, ids){
    //console.log(type);
    //console.log(data);
    //console.log(ids);
    $scope.cancel = function(){
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(){
        var data = filterUndefinedPorperty($stateParams);
        data.copyrightIds = ids;
        var propertyArr = ['copyrightId','songIds','songName','artistIds','artistName','language','ethnic','category','termStartTime','termEndTime','cstartTime','cendTime','ustartTime','uendTime','startNo','endNo','copyrightIds','tagId'];
        data = keepObjectProperty(propertyArr, data);
        var export_data = formatExportCondition(cloneOneObject(data), $filter);
        console.log(export_data);
        //console.log(export_data);
        console.log($scope.export_type);
        if($scope.export_type == 1){
            //console.log("选择了按照选中导出");
            if(ids == undefined || ids == null || ids === '' || ids.length <= 0){
                $scope.error = '没有选中数据，无法导出';
                return;
            }
            if(type != 'song'){
                export_data[type + 'Ids'] = stringToArray(ids);
            } else if (type == 'song'){
                export_data['copyrightIds'] = stringToArray(ids);
            } else {
                return;
            }
        } else if($scope.export_type == 2){
            if($scope.numberStart == undefined || $scope.numberEnd == undefined || $scope.numberStart == '' || $scope.numberEnd == ''){
                $scope.error = '请输入序号起止';
                return;
            }
            export_data.startNo = $scope.numberStart - 1;
            export_data.endNo = $scope.numberEnd - 1;
            //console.log($scope.numberStart + " +++++ " + $scope.numberEnd);
        } else if($scope.export_type == 3){
            if($scope.pageStart == undefined || $scope.pageEnd == undefined || $scope.pageStart == '' || $scope.pageEnd == ''){
                $scope.error = '请输入页码起止';
                return;
            }
            export_data.startNo = ($scope.pageStart - 1) * 100;
            export_data.endNo = $scope.pageEnd * 100 - 1;
            //console.log($scope.pageStart + " +++++ " + $scope.pageEnd);
        } else {
            $scope.error = '请选择导出类型';
            return;
        }
        var url = special_data + 'export/' + type + '.do?data=' + JSON.stringify(export_data);
        console.log(url);
        window.open(url);
        $uibModalInstance.dismiss('cancel');
    };
}]);

function filterUndefinedPorperty($statePatams){
    var data = new Object();
    for(var property in $statePatams){
        if ($statePatams[property] != undefined){
            data[property] = $statePatams[property];
        }
    }
    return data;
}

function getTagByTagId(tagId, tags){
    for(var i = 0; i < tags.length; i++){
        if(tagId == tags[i].tagId){
            return tags[i]
        }
    }
    return undefined;
}

function specialFillSearchCondition($scope, $stateParams){
    if(!isPropertyEmpty($stateParams.language)){
        $scope.search_language = $stateParams.language;
    }
    if(!isPropertyEmpty($stateParams.ethnic)){
        $scope.search_ethnic = $stateParams.ethnic;
    }
    if(!isPropertyEmpty($stateParams.category)){
        $scope.search_category = $stateParams.category;
    }
    if(!isPropertyEmpty($stateParams.pageSize)) $scope.pageSize = $stateParams.pageSize;
    if(!isPropertyEmpty($stateParams.pageNo)) $scope.pageNo = $stateParams.pageNo;
}
/**
 * Created by YuChunzhuo on 2016/5/10.
 */
angular.module('app.routes').config(wastesongConfig);
wastesongConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
function wastesongConfig($stateProvider,helper){
    $stateProvider
        .state('app.waste-song', {//缺歌页面
            url: '/waste-song?:pageNo&:pageSize&:copyrightId&:copyrightStatus&:copyrightTimeStart&:copyrightTimeEnd&:songName&:artistName&:cStartTime&:cEndTime&:tagId',
            templateUrl: 'app/views/song/waste_data/waste-song.html',
            controller: ["$scope", "$http", "$stateParams", "permissions", "$timeout", "$rootScope", "display", "$state", "$filter", "$window", "SweetAlert", function ($scope, $http, $stateParams, permissions, $timeout, $rootScope, display, $state, $filter,$window,SweetAlert) {
                $scope.form = {};
                //$scope.form.searchTag = [];


                //界面元素控制下拉框列表
                //初始化界面的songs
                $scope.datas = [];
                $scope.songTags = [];
                $scope.page = new Object();
                var songTagTree = [];
                var songFilterTagTree = [];

                $http.jsonp(waste_data + "tags.json?" + CALLBACK).success(function(res){
                    $scope.tags = res.data.list;
                    wasteFillSearchCondition($scope, $stateParams);

                    var url = waste_data + "song.json?" + CALLBACK;
                    url = wasteMaterialListFillUrl(url, $stateParams, $scope.tags);
                    if(url != undefined){
                        $http.jsonp(url).success(function(res){
                            //填充页面数据
                            //getMaterialBySearch(res, $http, $scope, 'song');
                            $scope.datas = res.data.list;
                            //分页
                            res.body = res.data;
                            materialListSeparatePage($scope, res);
                        });
                    }
                });

                //获取歌曲的标签搜索树
                //提交搜索条件
                $scope.submit = function(){
                    var params = $scope.form;
                    //console.log(formatDate(Date.parse($scope.form.copyrightTimeStart), $filter));
                    $state.go('app.waste-song',{copyrightId: params.copyrightId, copyrightStatus: params.copyrightStatus, songName: params.songName, artistName: params.artistName, tagId: params.tagId, copyrightTimeStart: formatDate(Date.parse($scope.form.copyrightTimeStart),$filter), copyrightTimeEnd: formatDate(Date.parse($scope.form.copyrightTimeEnd),$filter), cStartTime: formatDate(Date.parse($scope.form.cStartTime),$filter), cEndTime: formatDate(Date.parse($scope.form.cEndTime),$filter)},{reload: true, newtab : true});
                };

                //重置搜索条件
                $scope.reset = function(){
                    $scope.form = {};
                    //$scope.form.searchTag = [];
                };

                //选择标签时候选择顶部标签
                $scope.selectMainTag = function(tag){
                    console.log(tag);
                    $scope.tag_list = tag.children;
                };
                //选择需要搜索的标签
                $scope.songSelectSearchTag = function(tag){
                    if($scope.form.searchTag != undefined && $scope.form.searchTag.length != 0){
                        for(var i = 0; i < $scope.form.searchTag.length; i++){
                            if($scope.form.searchTag[i].id == tag.id){
                                return;
                            }
                        }
                    }
                    $scope.form.searchTag.push(tag);
                };
                //全文搜索
                $scope.getSearchResult = function(value){
                    //console.log(value);
                    return $http.get(_search_song, {
                        params: {
                            data:{
                                "songKeyword": value
                            }
                        }
                    }).then(function(response){
                        //console.log(response.data);
                        return response.data.body.list.map(function(item){
                            //console.log(item);
                            var allstr = item.songName + ' —';
                            if(item.artists != undefined && item.artists != null){
                                for (var i = 0; i < item.artists.length; i++){
                                    allstr += ' ' + item.artists[i].artistName + ',';
                                }
                            }
                            allstr = allstr.substr(0, allstr.length - 1) + ' —';
                            if(item.albums != undefined && item.albums != null){
                                //for (var i = 0; i < item.albums.length; i++){
                                allstr += ' ' + item.albums[0].albumName + ',';
                                //}
                            }
                            allstr = allstr.substr(0, allstr.length - 1) + '—' + item.songId;
                            item.allstr = allstr;
                            return item;
                        });
                    })
                };
                //全文检索选择事件
                $scope.addSong2List = function(song){
                    console.log(song);
                    $state.go('app.song',{songIds:song.songId},{inherit: false});
                };
                //全文检索点击搜索按钮
                $scope.searchSongBtn = function(value){
                    $state.go('app.song',{songKeyword:value, songIds:''});
                };
                //标签右上角的叉叉函数
                $scope.songTagRemove = function(tag){
                    $scope.form.searchTag.remove(tag);
                };
                //点击标签树中的标签跳转相应数据显示页面
                $scope.songTagClick = function(tag){
                    if($stateParams.tagIds == undefined){
                        $state.go('app.song',{tagIds:tag.id});
                    } else {
                        //下面要判断新来的tag的一级类别，如果一级类别相同，那么把原有标签替换掉
                        //如果和原有的所有标签一级类别都不重复，也就是新类别的标签，那么在原有的标签上面新增
                        var parentRepeatTag = judgeParentTagRepeat(tag, $stateParams.tagIds.split(','), songTagTree);
                        if(parentRepeatTag == undefined){
                            $state.go('app.song',{tagIds:$stateParams.tagIds + ',' + tag.id});
                        } else {
                            var ids = $stateParams.tagIds.split(',');
                            ids[ids.indexOf(parentRepeatTag.id)] = tag.id;
                            $state.go('app.song',{tagIds:ids.join(',')});
                        }
                    }
                };
                //重新抽取素材
                $scope.extractedMaterial = function(id, type){
                    extractedMaterial(id, type, $http, $timeout, $rootScope, display);
                };
                //分页跳转
                $scope.choosePage = function(){
                    $state.go('app.waste-song',{pageNo: $scope.page.currentPage});
                };
                //监听键盘按钮事件
                $scope.enter = function(event, searchValue, searchType){
                    if(event.keyCode == 13){
                        //console.log(searchValue);
                        if(searchType == 'songId'){
                            $state.go('app.song',{songIds:searchValue, songKeyword:'', artistKeyword:'', tagIds:'', karakalStatus:''});
                        } else if(searchType == 'songName'){
                            $state.go('app.song',{songIds:'', songKeyword:searchValue});
                        } else if(searchType == 'artistName'){
                            $state.go('app.song',{songIds:'', artistKeyword:searchValue});
                        }
                    }
                };
                //勾选框控制界面元素
                $scope.changeCheck = function(html){
                    //把勾选框去掉
                    html.cheched = !html.cheched;
                    $scope.html_chooseElem = false;
                };
                //显示所有属性
                $scope.showAllHtmlElem = function(){
                    for(var  i = 0; i < $scope.song_html.length; i++){
                        $scope.song_html[i].cheched = true;
                    }
                };
                //查看歌曲信息按钮
                $scope.showInfo = function(data){
                    window.open(getOpenUrl(data,'song'), "_blank");
                };
                //播放歌曲按钮
                $scope.playSong = function(data){
                    if(isPropertyEmpty(data.cids)){
                        sweetAlertCommon(SweetAlert,'当前歌曲没有版权id,无法播放','warning');
                    } else {
                        addPlaySong(data.songId, data.cids.copyrightId,SweetAlert);
                    }
                };
                //全选
                $scope.checkAll = function(datas){
                    //console.log($scope.allIsCheck);
                    selectAll($scope, datas, 'checked', 'allIsCheck');
                    //console.log($scope.allIsCheck);
                    //console.log($scope.selectedDataIds);
                    $scope.selectedDataIds = getPropertyFromCheckBox(datas, 'checked', true, 'copyrightId');
                };
                //单选
                $scope.checkOne = function(data, datas){
                    selectOne(data, !data.checked, 'checked');
                    //console.log($scope.selectedDataIds);
                    $scope.selectedDataIds = getPropertyFromCheckBox(datas, 'checked', true, 'copyrightId');
                };
                //删除单个数据按钮
                $scope.deleteWasteData = function(data, type){
                    var ids = data.copyrightId;
                    deleteWasteData(ids, type, $http, SweetAlert);
                };
                //批量删除数据按钮
                $scope.deleteWasteDatas = function(datas, type){
                    var ids = getPropertyFromCheckBox(datas, 'checked', true, 'copyrightId');
                    deleteWasteData(ids.join(","), type, $http, SweetAlert);
                };
                //查看
                $scope.showDataInfo = function(data, type){
                    showTyqk(data, type, $timeout,$rootScope, display, $window);
                };
                //编辑
                $scope.editData = function(data, type){
                    editTyqk(data, type, $timeout,$rootScope, display, $window);
                };
                //打开日期框
                $scope.open = function(flag) {
                    $scope.dateStatus['opened' + flag] = true;
                };
                $scope.dateStatus = {
                    opened1: false,
                    opened2: false,
                    opened3: false,
                    opened4: false
                };
            }]
        })
}

function fillSearchCondition($stateParams, $scope, songTagTree){
    if(!isPropertyEmpty($stateParams.songIds)){
        $scope.form.songIds = $stateParams.songIds;
    }
    if(!isPropertyEmpty($stateParams.songKeyword)){
        $scope.form.songKeyword = $stateParams.songKeyword;
    }
    if(!isPropertyEmpty($stateParams.artistKeyword)){
        $scope.form.artistKeyword = $stateParams.artistKeyword;
    }
    if(!isPropertyEmpty($stateParams.albumKeyword)){
        $scope.form.albumKeyword = $stateParams.albumKeyword;
    }
    if(!isPropertyEmpty($stateParams.karakalStatus)){
        $scope.form.karakalStatus = $stateParams.karakalStatus;
    }
    if(!isPropertyEmpty($stateParams.lyricPerson)){
        $scope.form.lyricPerson = $stateParams.lyricPerson;
    }
    if(!isPropertyEmpty($stateParams.composePerson)){
        $scope.form.composePerson = $stateParams.composePerson;
    }
    if(!isPropertyEmpty($stateParams.conductor)){
        $scope.form.conductor = $stateParams.conductor;
    }
    if(!isPropertyEmpty($stateParams.player)){
        $scope.form.player = $stateParams.player;
    }
    if(!isPropertyEmpty($stateParams.lastEditor)){
        $scope.form.lastEditor = $stateParams.lastEditor;
    }
    if(!isPropertyEmpty($stateParams.copyrightId)){
        $scope.form.copyrightId = $stateParams.copyrightId;
    }
    if(!isPropertyEmpty($stateParams.projectName)){
        $scope.form.projectName = $stateParams.projectName;
    }
    if(!isPropertyEmpty($stateParams.tagIds)){
        for(var i = 0; i < $stateParams.tagIds.split(',').length; i++){
            //遍历获取到的标签树获得标签ID对应的标签
            var tag = getTagById($stateParams.tagIds.split(',')[i], songTagTree);
            if(tag != undefined){
                $scope.form.searchTag.push(tag);
            }
        }
    }
}

//专项库的导入导出控件
angular.module('app.routes').controller('song_waste_controller', ["$scope", "$uibModal", "$stateParams", "$timeout", "$rootScope", "display", function($scope,$uibModal,$stateParams,$timeout,$rootScope,display){
    $scope.animationsEnabled = true;
    //导入excel
    $scope.import = function(type){
        //if($stateParams.tagId == undefined){
        //    alertTipCommon($timeout,$rootScope,"没有选择标签,不能导入",display);
        //    return;
        //}
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'song_waste_import.html',
            controller: 'song_waste_import_ctrl',
            resolve: {
                type: function(){
                    return type
                }
            }
        });
    };

    //导出excel
    $scope.export = function(type, selectedDataIds){
        //if($stateParams.tagId == undefined){
        //    alertTipCommon($timeout,$rootScope,"没有选择标签,不能导入",display);
        //    return;
        //}
        console.log(selectedDataIds);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'song_waste_export.html',
            controller: 'song_waste_export_ctrl',
            resolve: {
                type: function(){
                    return type;
                },
                ids: function(){return selectedDataIds;}
            }
        });
    };

}]);

//专项库导入框
angular.module('app.routes').controller('song_waste_import_ctrl', ["$scope", "$uibModalInstance", "$http", "$filter", "type", "$timeout", "$rootScope", "display", "$stateParams", function($scope,$uibModalInstance,$http,$filter,type,$timeout,$rootScope,display,$stateParams) {
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.downloadTemplet = function(){
        window.open(waste_data + "getImportTemplate.json");
    };
    $scope.ok = function(){
        var filename = $('#file').val();
        if(filename == ''){
            $scope.error = '请选择上传的excel文件';
        }else{
            var url = waste_data + 'import/' + type + '.json';
            //var datas = {'tagId':$stateParams.tagId};
            ajaxFileUpload(url, $scope, {}, $uibModalInstance,$timeout,$rootScope,display, 'file');
        }
    }
}]);
//专项库导出框
angular.module('app.routes').controller('song_waste_export_ctrl', ["$scope", "$uibModalInstance", "$stateParams", "$http", "$stateParams", "$filter", "type", "ids", function($scope, $uibModalInstance, $stateParams, $http, $stateParams, $filter, type, ids){
    $scope.cancel = function(){
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(){
        var data = filterUndefinedPorperty($stateParams);
        data.copyrightIds = ids;
        //var propertyArr = ['copyrightId','copyrightStatus','copyrightTimeStart','copyrightTimeEnd','songName','artistName','cStartTime','cEndTime','tagId','copyrightIds'];
        //data = keepObjectProperty(propertyArr, data);
        //var export_data = formatExportCondition(cloneOneObject(data), $filter);
        console.log(data);
        ////console.log(export_data);
        //console.log($scope.export_type);
        if($scope.export_type == 1){
            //console.log("选择了按照选中导出");
            if(ids == undefined || ids == null || ids === '' || ids.length <= 0){
                $scope.error = '没有选中数据，无法导出';
                return;
            }
            if(type != 'song'){
                data[type + 'Ids'] = stringToArray(ids);
            } else if (type == 'song'){
                data['copyrightIds'] = stringToArray(ids);
            } else {
                return;
            }
        } else if($scope.export_type == 2){
            if($scope.numberStart == undefined || $scope.numberEnd == undefined || $scope.numberStart == '' || $scope.numberEnd == ''){
                $scope.error = '请输入序号起止';
                return;
            }
            data.startNo = $scope.numberStart - 1;
            data.endNo = $scope.numberEnd;
            //console.log($scope.numberStart + " +++++ " + $scope.numberEnd);
        } else if($scope.export_type == 3){
            if($scope.pageStart == undefined || $scope.pageEnd == undefined || $scope.pageStart == '' || $scope.pageEnd == ''){
                $scope.error = '请输入页码起止';
                return;
            }
            data.startNo = ($scope.pageStart - 1) * 100;
            data.endNo = $scope.pageEnd * 100 - 1;
            //console.log($scope.pageStart + " +++++ " + $scope.pageEnd);
        } else {
            $scope.error = '请选择导出类型';
            return;
        }
        var url = waste_data + 'export/' + type + '.do?data=' + JSON.stringify(fillSearchParams(data, $stateParams));
        console.log(url);
        if(url == undefined){
            $scope.error = "搜索类型不对,无法导出,请重新选择类型";
        } else {
            window.open(url);
            $uibModalInstance.dismiss('cancel');
        }
    };
}]);

function wasteMaterialListFillUrl(url, $stateParams, tags){
    var data = new Object();
    data = fillSearchParams(data, $stateParams, tags);
    //如果没有参数（只有pageNo和pageSize那么不请求网络）
    //var dataPropertyCount = 0;
    //for(var elem in data){
    //    dataPropertyCount++;
    //}
    //if(dataPropertyCount <= 2){
    //    return undefined;
    //}
    //data.isolated = 0;
    if(data == undefined){
        return undefined;
    }
    url += '&data=' + JSON.stringify(data);
    return url;

}

function fillSearchParams(data, $stateParams, tags){
    var pageNo = ($stateParams.pageNo == undefined ? 1 : $stateParams.pageNo);
    var pageSize = ($stateParams.pageSize == undefined ? 100 : $stateParams.pageSize);
    data.pageNo = pageNo;
    data.pageSize =pageSize;
    if(!isPropertyEmpty($stateParams.copyrightId)){
        data.copyrightId = $stateParams.copyrightId;
    }
    if(!isPropertyEmpty($stateParams.copyrightStatus)){
        data.copyrightStatus = $stateParams.copyrightStatus;
    }
    if(!isPropertyEmpty($stateParams.copyrightTimeStart)){
        data.termStartTime = $stateParams.copyrightTimeStart;
    }
    if(!isPropertyEmpty($stateParams.copyrightTimeEnd)){
        data.termEndTime = $stateParams.copyrightTimeEnd;
    }
    if(!isPropertyEmpty($stateParams.songName)){
        data.songName = $stateParams.songName;
    }
    if(!isPropertyEmpty($stateParams.artistName)){
        data.artistName = $stateParams.artistName;
    }
    if(!isPropertyEmpty($stateParams.cStartTime)){
        data.cstartTime = $stateParams.cStartTime;
    }
    if(!isPropertyEmpty($stateParams.cEndTime)){
        data.cendTime = $stateParams.cEndTime;
    }
    if(!isPropertyEmpty($stateParams.tagId)){
        var tag = getTagIdByName($stateParams.tagId, tags);
        if(tag == undefined){
            return undefined;
        }
        data.tagId = tag;
    }
    if(!isPropertyEmpty($stateParams.startNo)){
        data.startNo = $stateParams.startNo;
    }
    if(!isPropertyEmpty($stateParams.endNo)){
        data.endNo = $stateParams.endNo;
    }
    return data;
}

function deleteWasteData(ids, type, $http, SweetAlert){
    if(ids.length == 0){
        sweetAlertCommon(SweetAlert,'没有勾选数据，无法删除','warning');
        return;
    }
    if(type == 'song'){
        type = "copyright";
    }
    var url = waste_data + "delSongByCopyrights.json?" + CALLBACK + "&" + type + "Ids=" + ids;
    $http.jsonp(url).success(function(res){
        if(res.status == 1){
            sweetAlertCommon(SweetAlert,res.msg,'success');
            location.reload();
        } else {
            sweetAlertCommon(SweetAlert,res.msg,'error');
        }
    }).error(function(res){
        sweetAlertCommon(SweetAlert,'网络异常,删除失败','warning');
    });
}

function wasteFillSearchCondition($scope, $stateParams){
    //if(!isPropertyEmpty($stateParams.songName)){
    //    $scope.form.songName = $stateParams.songName;
    //}
    for(var property in $stateParams){
        $scope.form[property] = $stateParams[property];
    }
    if(!isPropertyEmpty($stateParams.pageSize)) $scope.pageSize = $stateParams.pageSize;
    if(!isPropertyEmpty($stateParams.pageNo)) $scope.pageNo = $stateParams.pageNo;
}

function getTagIdByName(tagName, tags){
    for(var i = 0; i < tags.length; i++){
        if(tags[i].tagName === tagName){
            return tags[i].tagId;
        }
    }
    return undefined;
}
/**
 * Created by YuChunzhuo on 2015/11/23.
 */
(function () {
    angular.module('app.routes').config(["$stateProvider", "$urlRouterProvider", function($stateProvider,$urlRouterProvider) {
        $stateProvider
        //标签知识库页面
            .state('app.knowledge',{
                url:'/knowledge/1',
                templateUrl:"app/views/tags/knowledge/knowledge-title.html",
                controller: ["$scope", "$http", function($scope, $http){
                    url = tag_tree_url + 'getTagsByMaterialAndUser.do?userId=' + _session.id + '&materialType=1';
                    console.log(url);
                    $http.get(url).success(function (res) {
                        var tags = [];
                        for(var i=0; i < res.tnList.length; i ++){
                            var nodeList = [];
                            var tag_all = getAllNode(res.tnList[i],nodeList);
                            var tag = tag_all[tag_all.length -1];
                            tag.children = [];
                            for(var j = 0; j < tag_all.length - 1;j++){
                                tag.children.push(tag_all[j]);
                            }
                            tags.push(tag);
                        }
                        console.log(tags);
                        for(var i = 0; i < tags.length; i++){
                            if(tags[i].name == '风格'){
                                $scope.tags_list = tags[i].children;
                            }
                        }
                        //$scope.tags_title = tags;
                    });
                    //$scope.tags_title = [{'name':'地区','id':0},{'name':'艺术家职业','id':1},{'name':'风格','id':2},];
                    //$http.jsonp(tag_url + 'artist.json'+"?callback=JSON_CALLBACK").success(function (res) {
                    //    $scope.tags_list = res.data.风格;
                    //});
                }]
            })
            //                .state('knowledge.list',{             //标签列表页面
            //                    url: '/{id:[0-9]{1,4}}',
            //                    views: {
            //                        "view-list": {
            //                            templateUrl: "../knowledge/knowledge-list.html",
            //                            controller: function($scope,$http,$stateParams){
            //                                $http.jsonp(tag_url + 'song.json'+"?callback=JSON_CALLBACK").success(function (res) {
            //                                    if($stateParams.id == 0)
            //                                        $scope.tags_list = res.data.语言;
            //                                    if($stateParams.id == 1)
            //                                        $scope.tags_list = res.data.风格;
            //                                    if($stateParams.id == 2)
            //                                        $scope.tags_list = res.data.心情;
            //                                    if($stateParams.id == 3)
            //                                        $scope.tags_list = res.data.场景;
            //                                    if($stateParams.id == 4)
            //                                        $scope.tags_list = res.data.主题;
            //                                    if($stateParams.id == 5)
            //                                        $scope.tags_list = res.data.乐器;
            //                                    if($stateParams.id == 6)
            //                                        $scope.tags_list = res.data.人声;
            //                                    if($stateParams.id == 7)
            //                                        $scope.tags_list = res.data.节日;
            //                                });
            ////                                    console.log($stateParams.id);
            //                            }
            //                        }
            //                    }
            //                })
            //                .state('knowledge.list.tagId',{
            .state('app.knowledge.tagId',{
                url:'/tagId/:tagName$:tagId',
                views:{
                    "knowledge-view-list":{
                        templateUrl:"app/views/tags/knowledge/tag-knowledge.html",
                        controller:["$scope", "$http", "$stateParams", function($scope, $http, $stateParams){
                            console.log($stateParams.tagId);
//                                console.log($stateParams.tagName);
                            //////////////////////////////////////////////////
                            //以下是歌曲的逻辑
                            $http.jsonp(demo_url + '3/'+$stateParams.tagId+'.json?callback=JSON_CALLBACK&maxResult=10').success(function(res){
//                                    var songMaps = new HashMap();
                                var songList = [];
                                var songIds = [];
                                for(var i=0; i < res.data.resultlist.length; i++){
                                    songIds.push(res.data.resultlist[i].rid);
//                                        song = new Object();
//                                        song.songId = res.status.resultlist[i].rid;

                                }
                                //把10个凑成一串然后批量查询
                                console.log("歌曲ID："+songIds.join(','));
                                if(songIds.length > 0){
                                    $http.jsonp(list_url + "song.json?callback=JSON_CALLBACK&ids=" + songIds.join(',') + "&sp=10").success(function(res){
                                        var n = res.data.length-1;
                                        var i = 0;
                                        function getData(i){
                                            song = new Object();
                                            song.songId = res.data[i].songId;
                                            song.tagId = $stateParams.tagId;
                                            song.songName = res.data[i].songName;
                                            song.score = res.data[i].score;
                                            song.albumId = checkEmpty(res.data[i].albums) ? '' : res.data[i].albums[0].albumId;
                                            song.artistName = "";
                                            var songArtists = [];
                                            for(var j =0; j < res.data[i].artists.length; j++){
                                                songArtist = new Object();
                                                songArtist.artistName = res.data[i].artists[j].artistName;
                                                songArtist.artistId = res.data[i].artists[j].artistId;
                                                song.artistName = song.artistName + res.data[i].artists[j].artistName + ",";
                                                songArtists.push(songArtist);
                                            }
                                            if (res.data[i].artists.length > 0){
                                                song.artistName = song.artistName.substr(0,song.artistName.length-1);
                                            }
                                            song.artist = songArtists;
                                            if(checkEmpty(song.albumId)){
                                                $http.jsonp(img_url + "album/" + song.albumId + ".json?callback=JSON_CALLBACK").success(function(res){
//                                                    console.log("专辑的url：" + res.data.resultlist[0].url + "");
//                                                    console.log(song.albumId);
                                                    if(res.data.list.length > 0){
                                                        song.albumImgUrl = checkEmpty(res.data.list[0].url) ? img_r_url+res.data.list[0].md5 : res.data.list[0].url;
                                                        //song.albumImgUrl = res.data.list[0].url;
                                                    } else {
                                                        song.albumImgUrl = "";
                                                    }
                                                    if(i<n){
                                                        getData(i+1);
                                                    }
                                                });
                                            }
//                                                console.log(song);
                                            songList.push(song);
                                        };
                                        getData(i);
                                    });
                                }
//                                    console.log(songList);
                                $scope.songs = songList;
//                                    getTagDatas(songList,res.data.totalrecord,res.data.maxResult,res.data.firstIndex,$stateParams.tagId,$scope);
//                                    _maxResult = res.data.maxResult;
//                                    _firstIndex = res.data.firstIndex;
//                                    _tagId = $stateParams.tagId;
                            });
                            //////////////////////////////////////////////////////////////////
                            //以下是专辑的逻辑
                            $http.jsonp(demo_url + '2/'+$stateParams.tagId+'.json?callback=JSON_CALLBACK&maxResult=10').success(function(res){
                                var albumList = [];
                                var albumIds = [];
                                for(var i=0; i < res.data.resultlist.length; i++){
                                    albumIds.push(res.data.resultlist[i].rid);
                                }
                                //把10个凑成一串然后批量查询
                                console.log("专辑的ID："+albumIds.join(','));
                                if(albumIds.length > 0){
                                    $http.jsonp(list_url + "album.json?callback=JSON_CALLBACK&ids=" + albumIds.join(',') + "&sp=10").success(function(res){
                                        var n = res.data.length-1;
                                        var i = 0;
                                        function getData(i){
                                            album = new Object();
                                            album.tagId = $stateParams.tagId;
                                            album.score = res.data[i].score;
                                            album.albumId = res.data[i].albumId;
                                            album.albumName = res.data[i].albumName;
                                            album.artistName = "";
                                            var albumArtists = [];
                                            for(var j =0; j < res.data[i].artists.length; j++){
                                                albumArtist = new Object();
                                                albumArtist.artistName = res.data[i].artists[j].artistName;
                                                albumArtist.artistId = res.data[i].artists[j].artistId;
                                                album.artistName = album.artistName + res.data[i].artists[j].artistName + ",";
                                                albumArtists.push(albumArtist);
                                            }
                                            if (res.data[i].artists.length > 0){
                                                album.artistName = album.artistName.substr(0,album.artistName.length-1);
                                            }
                                            album.artist = albumArtists;
//                                                album.artistId = res.data[i].artists[0].artistId;
//                                                album.artistName = res.data[i].artists[0].artistName;
                                            $http.jsonp(img_url + "album/" + album.albumId + ".json?callback=JSON_CALLBACK").success(function(res){
//                                                    console.log("专辑的url：" + res.data.resultlist[0].url + "");
//                                                    console.log(i);
                                                if(res.data.list.length > 0) {
                                                    if(checkEmpty(res.data.list[0].url)) album.albumImgUrl=img_r_url+res.data.list[0].md5;
                                                    else album.albumImgUrl = res.data.list[0].url;
                                                } else {
                                                    album.albumImgUrl = "";
//                                                        console.log(album.albumId);
                                                }
                                                if(i<n){
                                                    getData(i+1);
                                                }
                                            });
//                                                console.log(album);
                                            albumList.push(album);
                                        };
                                        getData(i);
                                    });
                                }
                                $scope.albums = albumList;
                            });
                            //////////////////////////////////////////////////////////////////
                            //以下是歌手的逻辑
                            $http.jsonp(demo_url + '1/'+$stateParams.tagId+'.json?callback=JSON_CALLBACK&maxResult=10').success(function(res){
                                var artistList = [];
                                var artistIds = [];
                                for(var i=0; i < res.data.resultlist.length; i++){
                                    artistIds.push(res.data.resultlist[i].rid);
                                }
                                console.log("歌手的ID："+artistIds.join(','));
                                if(artistIds.length > 0){
                                    $http.jsonp(list_url + "artist.json?callback=JSON_CALLBACK&ids=" + artistIds.join(',') + "&sp=00").success(function(res){
                                        var n = res.data.length-1;
                                        var i = 0;
                                        function getData(i){
                                            artist = new Object();
                                            artist.artistId = res.data[i].artistId;
                                            artist.tagId = $stateParams.tagId;
                                            artist.score = res.data[i].score;
                                            artist.artistName = res.data[i].artistName;
//                                                album.artistId = res.data[i].artists[0].artistId;
//                                                album.artistName = res.data[i].artists[0].artistName;
                                            $http.jsonp(img_url + "artist/" + artist.artistId + ".json?callback=JSON_CALLBACK").success(function(res){
//                                                    console.log("专辑的url：" + res.data.resultlist[0].url + "");
//                                                    console.log(i);
                                                if(res.data.list.length > 0) {
                                                    artist.artistImgUrl = res.data.list[0].url;
                                                } else {
                                                    artist.artistImgUrl = "";
                                                }
                                                if(i<n){
                                                    getData(i+1);
                                                }
                                            });
//                                                console.log(artist);
                                            artistList.push(artist);
                                        };
                                        getData(i);
                                    });
                                }
                                $scope.artists = artistList;
                            });
                        }]
                    },
                    "tag-view": {               //选择查询的标签
                        templateUrl: "app/views/tags/knowledge/knowledge.html",
                        controller:["$scope", "$http", "$stateParams", function($scope,$http,$stateParams){
                            console.log("进入了knowledge.tag.html");
                            $scope.id = $stateParams.tagName;
                        }]
                    }
                }
            })
    }])
})();

/**
 * Created by YuChunzhuo on 2015/12/1.
 */
var relationship_tree_tags = '';
var relationship_user_id = '';
//var tag_tree_checked = [];
angular.module('app.routes').config(relationshipConfig);
relationshipConfig.$inject = ['$stateProvider',  'RouteHelpersProvider'];
function relationshipConfig($stateProvider,helper){
    $stateProvider
        .state('app.relationship',{
            url:'/relationship',
            templateUrl:'app/views/tags/relationship/relationship.html',
            resolve: helper.resolveFor('ztree'),
            controller:["$scope", "$http", "permissions", "$uibModal", "$timeout", "$rootScope", "display", function($scope, $http,permissions,$uibModal,$timeout,$rootScope,display){
                $scope.tags = [];
                $scope.cps = [];
                relationship_user_id = _session.id;
                $http.get(tag_tree_url + "getTagsTreeByUserId.do?userId=" + relationship_user_id ).success(function(res){
                    for(var i = 0; i < res.treeEntityList.length; i++){
                        if(res.treeEntityList[i].tagType == 0) res.treeEntityList[i].iconSkin = 'pIcon01';
                    }
                    $scope.relationshipTreeNodes = res.treeEntityList;
                    $.fn.zTree.init($("#relationshipTree"), relationshipTreeSetting, $scope.relationshipTreeNodes);
                });

                //获取有多少个公司
                $http.get(tag_tree_url + 'findCpInfo.do?userId=' + relationship_user_id).success(function(res){
                    if(res.message == 'success'){
                        for(var i = 0; i < res.cpInfoList.length; i++){
                            var newCp = new Object();
                            newCp.cpId = res.cpInfoList[i].cpId;
                            newCp.cpName = res.cpInfoList[i].cpName;
                            $scope.cps.push(newCp);
                        }
                        $("#dynamicspan9").css("width", (234 + $scope.cps.length * 166) + "px");
                        //$("#body").css("width", (478 + $scope.cps.length * 166) + "px");
                        $("#body").css("width", (594 + $scope.cps.length * 166) + "px");
                        //console.log($scope.cps);
                    }else{
                        //alert('网络错误');
                        alertTipCommon($timeout,$rootScope,'网络错误',display);
                    }
                });

                //显示勾选的标签
                $scope.show = function(){
                    $scope.tags = [];
                    if(relationship_tree_tags.length <= 0){
                        //alert('根本就没有勾选标签，请不要逗我好吗');
                        alertTipCommon($timeout,$rootScope,'根本就没有勾选标签，请不要逗我好吗',display);
                        return;
                    }
                    $http.get(tag_tree_url + 'getTagCpRel.do?userId=' + relationship_user_id + '&tagId=' + relationship_tree_tags).success(function(res){
                        console.log(res);
                        if(res.status == 000000){
                            //获取未计算权重完成的标签

                            $http.jsonp(http_tag_url + 'cpx/list.json?callback=JSON_CALLBACK&tids=' + relationship_tree_tags).success(function(res1){
                                //console.log(res1);
                                //console.log(res);
                                var uncompleteTag = [];
                                if(res1.status == 1){
                                    for(var i = 0; i < res1.data.length; i++){
                                        if(res1.data[i].htp == 'add'){
                                            uncompleteTag.push(res1.data[i]);
                                        }
                                    }
                                }
                                //});
                                for(var i = 0; i < res.tagCpList.length; i++){
                                    //把res里面的单个标签结果放入一个hashMap
                                    var tempRes = res.tagCpList[i].ttcrList;
                                    var cpsMap = new HashMap();
                                    for(var j = 0; j < tempRes.length; j++){
                                        if(cpsMap.containsKey(tempRes[j].cpId)){
                                            var cp = cpsMap.get(tempRes[j].cpId);
                                            var cpTag = new Object();
                                            cpTag.cpTagId = tempRes[j].cpTagId;
                                            cpTag.cpTagName = tempRes[j].cpTagName;
                                            cpTag.cptagType = tempRes[j].cpTagType;
                                            cpTag.cpTagTypeValue = tempRes[j].cpTagTypeValue;

                                            cpTag.status = 'complete';
                                            for(var k = 0; k < uncompleteTag.length; k++){
                                                if(res.tagCpList[i].tagInfo.tagId == uncompleteTag[k].tagId && tempRes[j].cpId == uncompleteTag[k].siteId && cpTag.cpTagName == uncompleteTag[k].relTagName){
                                                    cpTag.status = 'calculation';
                                                    //console.log('判断成功');
                                                }
                                            }
                                            cp.tags.push(cpTag);
                                            cpsMap.put(cp.cpId, cp);
                                        }else{
                                            var cp = new Object();
                                            cp.cpId = tempRes[j].cpId;
                                            cp.cpName = tempRes[j].cpName;
                                            cp.tagId = tempRes[j].tagId;
                                            cp.tagName = tempRes[j].tagName;
                                            var cpTag = new Object();
                                            cpTag.cpTagId = tempRes[j].cpTagId;
                                            cpTag.cpTagName = tempRes[j].cpTagName;
                                            cpTag.cptagType = tempRes[j].cpTagType;
                                            cpTag.cpTagTypeValue = tempRes[j].cpTagTypeValue;
                                            cp.tags = [];

                                            cpTag.status = 'complete';
                                            for(var k = 0; k < uncompleteTag.length; k++){
                                                //console.log(res.tagCpList[i].tagInfo.tagId);
                                                if(res.tagCpList[i].tagInfo.tagId == uncompleteTag[k].tagId && tempRes[j].cpId == uncompleteTag[k].siteId && cpTag.cpTagName == uncompleteTag[k].relTagName){
                                                    cpTag.status = 'calculation';
                                                    //console.log('判断成功');
                                                }
                                            }
                                            cp.tags.push(cpTag);
                                            cpsMap.put(cp.cpId, cp);
                                            //console.log(cp);
                                        }
                                    }
                                    //console.log(cpsMap.values());
                                    //按照获取的所有cps建立一个tagcps，每一个通过ID去匹配res的hashmap
                                    var tagCps = [];
                                    for(var j = 0; j < $scope.cps.length; j++){
                                        var tagCp = new Object();
                                        //tagCp.tagId = res.tagCpList;
                                        tagCp.cpId = $scope.cps[j].cpId;
                                        tagCp.cpName = $scope.cps[j].cpName;
                                        if(cpsMap.containsKey(tagCp.cpId)){
                                            tagCp.cpTags = cpsMap.get(tagCp.cpId).tags;
                                        }else{
                                            tagCp.cpTags = [];
                                        }
                                        tagCps.push(tagCp);
                                    }
                                    //console.log(tagCps);
                                    var tagDetail = new Object();
                                    tagDetail.tagName = res.tagCpList[i].tagInfo.tagName;
                                    tagDetail.tagId = res.tagCpList[i].tagInfo.tagId;
                                    tagDetail.cps = tagCps;
                                    //console.log(tagDetail);
                                    var flag = true;
                                    for(var m = 0; m < $scope.tags.length; m++){
                                        if($scope.tags[m].tagId == tagDetail.tagId){
                                            flag = false;
                                        }
                                    }
                                    if(flag){
                                        $scope.tags.push(tagDetail);
                                    }
                                }
                            });
                        }else{
                            //alert('返回结果错误：'+ res);
                            alertTipCommon($timeout,$rootScope,'返回结果错误:' + JSON.stringify(res),display);
                        }
                    });
                };
                //搜索单个标签
                $scope.searchTag = function(t){
                    //console.log(t);
                    $http.get(tag_tree_url + 'getTagCpRel.do?userId=' + relationship_user_id + '&tagId=' + t.id).success(function(res){
                        if(res.status == 000000){
                            //获取未计算权重完成的标签
                            $http.jsonp(http_tag_url + 'cpx/list.json?callback=JSON_CALLBACK&tids=' + t.id).success(function(res1) {
                                //console.log(res1);
                                //console.log(res);
                                var uncompleteTag = [];
                                if (res1.status == 1) {
                                    for (var i = 0; i < res1.data.length; i++) {
                                        if (res1.data[i].htp == 'add') {
                                            uncompleteTag.push(res1.data[i]);
                                        }
                                    }
                                }
                                //});
                                for(var i = 0; i < res.tagCpList.length; i++){
                                    //把res里面的单个标签结果放入一个hashMap
                                    var tempRes = res.tagCpList[i].ttcrList;
                                    var cpsMap = new HashMap();
                                    for(var j = 0; j < tempRes.length; j++){
                                        if(cpsMap.containsKey(tempRes[j].cpId)){
                                            var cp = cpsMap.get(tempRes[j].cpId);
                                            var cpTag = new Object();
                                            cpTag.cpTagId = tempRes[j].cpTagId;
                                            cpTag.cpTagName = tempRes[j].cpTagName;
                                            cpTag.cptagType = tempRes[j].cpTagType;
                                            cpTag.cpTagTypeValue = tempRes[j].cpTagTypeValue;

                                            cpTag.status = 'complete';
                                            for(var k = 0; k < uncompleteTag.length; k++){
                                                if(res.tagCpList[i].tagInfo.tagId == uncompleteTag[k].tagId && tempRes[j].cpId == uncompleteTag[k].siteId && cpTag.cpTagName == uncompleteTag[k].relTagName){
                                                    cpTag.status = 'calculation';
                                                    //console.log('判断成功');
                                                }
                                            }
                                            cp.tags.push(cpTag);
                                            cpsMap.put(cp.cpId, cp);
                                        }else{
                                            var cp = new Object();
                                            cp.cpId = tempRes[j].cpId;
                                            cp.cpName = tempRes[j].cpName;
                                            cp.tagId = tempRes[j].tagId;
                                            cp.tagName = tempRes[j].tagName;
                                            var cpTag = new Object();
                                            cpTag.cpTagId = tempRes[j].cpTagId;
                                            cpTag.cpTagName = tempRes[j].cpTagName;
                                            cpTag.cptagType = tempRes[j].cpTagType;
                                            cpTag.cpTagTypeValue = tempRes[j].cpTagTypeValue;
                                            cp.tags = [];

                                            cpTag.status = 'complete';
                                            for(var k = 0; k < uncompleteTag.length; k++){
                                                if(res.tagCpList[i].tagInfo.tagId == uncompleteTag[k].tagId && tempRes[j].cpId == uncompleteTag[k].siteId && cpTag.cpTagName == uncompleteTag[k].relTagName){
                                                    cpTag.status = 'calculation';
                                                    //console.log('判断成功');
                                                }
                                            }
                                            cp.tags.push(cpTag);
                                            cpsMap.put(cp.cpId, cp);
                                            //console.log(cp);
                                        }
                                    }
                                    //console.log(cpsMap.values());
                                    //按照获取的所有cps建立一个tagcps，每一个通过ID去匹配res的hashmap
                                    var tagCps = [];
                                    for(var j = 0; j < $scope.cps.length; j++){
                                        var tagCp = new Object();
                                        //tagCp.tagId = res.tagCpList;
                                        tagCp.cpId = $scope.cps[j].cpId;
                                        tagCp.cpName = $scope.cps[j].cpName;
                                        if(cpsMap.containsKey(tagCp.cpId)){
                                            tagCp.cpTags = cpsMap.get(tagCp.cpId).tags;
                                        }else{
                                            tagCp.cpTags = [];
                                        }
                                        tagCps.push(tagCp);
                                    }
                                    //console.log(tagCps);
                                    var tagDetail = new Object();
                                    tagDetail.tagName = res.tagCpList[i].tagInfo.tagName;
                                    tagDetail.tagId = res.tagCpList[i].tagInfo.tagId;
                                    tagDetail.cps = tagCps;
                                    console.log(tagDetail);
                                    //console.log($scope.tags);
                                    var flag = true;
                                    for(var m = 0; m < $scope.tags.length; m++){
                                        if($scope.tags[m].tagId == tagDetail.tagId){
                                            flag = false;
                                        }
                                    }
                                    if(flag){
                                        $scope.tags.push(tagDetail);
                                    }
                                }
                            });
                        }else{
                            //alert('返回结果错误：'+ res);
                            alertTipCommon($timeout,$rootScope,'返回结果错误:' + JSON.stringify(res),display);
                        }
                    });
                };
                //给某个媒资库标签对应的所有关系计算权重
                $scope.calWeight = function(tag){
                    console.log(tag);
                    var flag = false;
                    for(var i = 0; i < tag.cps.length; i++){
                        var cp = tag.cps[i];
                        if(cp.cpTags.length != 0){
                            flag = true;
                        }
                    }
                    if(!flag){
                        //alert('根本就没有关联标签，请不要逗我好吗');
                        alertTipCommon($timeout,$rootScope,'根本就没有关联标签，请不要逗我好吗',display);
                        return;
                    }
                    var con = confirm('确认提交计算权重吗？');
                    if(con){
                        for(var i = 0; i < tag.cps.length; i++){
                            var cp = tag.cps[i];
                            for(var j = 0; j < cp.cpTags.length; j++){
                                var cpTag = cp.cpTags[j];
                                var url = http_tag_url + 'cpx/add.json?callback=JSON_CALLBACK&siteId=' + tag.cps[i].cpId + '&tagCpRelId=' + tag.cps[i].cpTags[j].cpTagId;
                                console.log(url);
                                $http.jsonp(url).success(function(res){
                                    console.log(res);
                                });
                            }
                        }
                        //alert('提交成功');
                    }

                };

                //给某一个标签弹出一个层添加一个新的关联关系
                $scope.open = function(tag){
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: 'myModalContent.html',
                        controller: 'tagRelationshipCtrl',
                        resolve: {
                            tag: function () {
                                return tag;
                            },
                            cps: function(){
                                return $scope.cps;
                            }
                        }
                    });
                };
            }]
        })
}

//编辑弹出层
angular.module('app.routes').controller('tagRelationshipCtrl', ["$scope", "$uibModalInstance", "$http", "tag", "$timeout", "$rootScope", "display", function ($scope, $uibModalInstance, $http, tag, $timeout, $rootScope, display) {
    $scope.tag = tag;
    $scope.selectedCp;
    //添加标签
    $scope.addCpRel = function(){
        if($scope.selectedCp == undefined || $scope.selectedCp == null || $scope.selectedCp == ''){
            //alert('没有选择公司');
            alertTipCommon($timeout,$rootScope,'没有选择公司',display);
            return;
        }
        //if($scope.selectedCpType == undefined || $scope.selectedCpType == null || $scope.selectedCpType == ''){
        //    //alert('没有选择类型');
        //    return;
        //}
        if($scope.addCpTagName == undefined || $scope.addCpTagName == null || $scope.addCpTagName == ''){
            //alert('没有输入标签名字');
            alertTipCommon($timeout,$rootScope,'没有输入标签名字',display);
            return;
        }
        var tempCp;
        var tempI;
        for(var i = 0; i < $scope.tag.cps.length; i++){
            if($scope.tag.cps[i].cpName == $scope.selectedCp){
                tempCp = $scope.tag.cps[i];
                tempI = i;
                console.log(tempCp);
                console.log(tempI);
            }
        }
        //添加标签映射关系
        var url = tag_tree_url + 'addTagCpRel.do?callback=JSON_CALLBACK&userId=' + relationship_user_id + '&tagId=' + tag.tagId + '&cpId=' + tempCp.cpId + '&cpName=' + tempCp.cpName + '&cpTagName=' + $scope.addCpTagName + '&cpTagType=3&cpTagTypeValue=0';
        console.log(url);
        $http.jsonp(url).success(function(res){
            console.log(res);
            if(res.message == 'success'){
                var newTag = new Object();
                newTag.cpTagId = res.objId;
                newTag.cpTagName = $scope.addCpTagName;
                newTag.cptagType = $scope.selectedCpType;
                newTag.cpTagTypeValue = 0;
                newTag.status = 'calculation';
                //计算权重
                $http.jsonp(http_tag_url + 'cpx/add.json?callback=JSON_CALLBACK&siteId=' + tempCp.cpId + '&tagId=' + tag.tagId + '&relTagName=' + $scope.addCpTagName+ '&htp=add').success(function(res){
                    console.log(res);
                    if(res.status != 1){
                        newTag.status = 'exception';
                        //alert('提交计算失败，请重新操作');
                        alertTipCommon($timeout,$rootScope,'提交计算失败，请重新操作',display);
                    }
                });
                console.log(newTag);
                $scope.tag.cps[tempI].cpTags.push(newTag);
            }
        });

    };

    //删除标签
    $scope.deleteTag = function(cpTag){
        console.log(cpTag);
        //console.log($scope.tags);
        //删除关联关系
        var url = tag_tree_url + 'delTagCpRel.do?userId=' + relationship_user_id + '&tagId=-1&tagCpId=' + cpTag.cpTagId;
        console.log(url);
        $http.get(url).success(function(res){
            if(res.message == 'success'){
                var tempCpId = 0;
                for(var i = 0; i < $scope.tag.cps.length; i++){
                    var cp = $scope.tag.cps[i];
                    for(var j = 0; j < cp.cpTags.length; j++){
                        if(cp.cpTags[j].cpTagId == cpTag.cpTagId){
                            tempCpId = cp.cpId;
                        }
                    }
                }
                //计算权重
                $http.jsonp(http_tag_url + 'cpx/add.json?callback=JSON_CALLBACK&siteId=' + tempCpId + '&tagId=' + $scope.tag.tagId + '&relTagName=' + cpTag.cpTagName+ '&htp=delete').success(function(res){
                    console.log(res);
                    if(res.status != 1){

                    }
                });
                var tempI;
                var tempJ;
                for(var i = 0; i < $scope.tag.cps.length; i++){
                    var cp = $scope.tag.cps[i];
                    for(var j = 0; j < cp.cpTags.length; j++){
                        if(cpTag.cpTagId == cp.cpTags[j].cpTagId){
                            tempI = i;
                            tempJ = j;
                        }
                    }
                }
                $scope.tag.cps[tempI].cpTags.splice(tempJ,1);
            }
        });
    };

    $scope.ok = function () {
        console.log(tag);
    };

    $scope.cancel = function () {

        $uibModalInstance.dismiss('cancel');
    };
}]);

var relationshipTreeSetting = {
    view: {
        selectedMulti: false
    },
    check: {
        enable: true,
        chkboxType: {
            "Y": "",
            "N": ""
        }
    },
    data: {
        simpleData: {
            enable: true
        }
    },
    edit: {
        //enable: true,
        showRemoveBtn: false,
        showRenameBtn: false
    },
    callback:{
        onCheck: relationshipTreeOnCheck,
        onClick: relationshipTreeOnClick
    }
};
//check事件
function relationshipTreeOnCheck(event, treeId, treeNode){
    //tag_tree_tags.length = 0;
    if(event != null && treeId != null && treeNode != null){
        //console.log(treeNode);
        //console.log(event);
        var tempIds = []
        var zTree = $.fn.zTree.getZTreeObj(treeId);
        var nodes = zTree.getCheckedNodes(true);
        //if(treeNode.checked === true){
        for(var i = 0; i < nodes.length; i++){
            var node = nodes[i];
            tempIds.push(node.id);
        }
        relationship_tree_tags = tempIds.join(',');
        console.log(relationship_tree_tags);
        //permissions.console.log(tag_tree_tags);
        //}
    }
};
//点击事件回调函数
function relationshipTreeOnClick(event, treeId, treeNode) {
    var treeObj = $.fn.zTree.getZTreeObj(treeId);
    treeObj.checkNode(treeNode, !treeNode.checked, false, true);
    //alert(treeNode.tId + ", " + treeNode.name);
};
/**
 * Created by YuChunzhuo-Dev on 2016/8/25.
 */
(function () {
    'use strict';
    angular.module('app.routes').config(QualityTagConfig);
    QualityTagConfig.$inject = ['$stateProvider','RouteHelpersProvider'];
    function QualityTagConfig($stateProvider, helper) {
        $stateProvider
            .state('app.qualityTag',{
                url: '/tag/quality',
                templateUrl: helper.basepath('partials/container-tpl.html'),
                controller: 'QualityTagHeadController'
            })
            .state('app.qualityTag.list', {
                url: '/list?:copyrightId&:songIds&:songName&:artistName&:&:editUid&:startTime&:endTime&:orderType&:hotScoreMin&:hotScoreMax&:mscoreMin&:mscoreMax&:copyrightCategory&:tagStatus&:tagId&:tagName&:tagBeans&:pageSize&:pageNo&:lastEditSearch&:uid',
                views: {
                    'condition': {
                        templateUrl: helper.basepath('tags/quality-tag/quality-tag-condition.html')
                    },
                    'data-list': {
                        templateUrl: helper.basepath('tags/quality-tag/quality-tag-list.html'),
                        controller: 'QualityTagListController'
                    }
                }
            })
    }
    angular.module('app.routes').controller('QualityTagHeadController', ["$scope", "$state", "$stateParams", "$http", "$cookies", "SweetAlert", function ($scope, $state, $stateParams, $http, $cookies, SweetAlert) {
        $scope.container = new Container('标签管理/精品标签');
        getTagList(3,$scope,$stateParams,$http,$cookies,SweetAlert,1);
    }]);
    angular.module('app.routes').controller('QualityTagListController', ["$scope", "$state", "$stateParams", "$http", "$cookies", "SweetAlert", "TagService", function ($scope, $state, $stateParams, $http, $cookies, SweetAlert, TagService) {
        $scope.$parent.form = excludeProperties($stateParams, []); //刷新页面回显
        $scope.orderType = $scope.$parent.form.orderType;
        TagService.method.getDatas($scope); //获取页面数据及分页
        $scope.changeTagStatus = function (data) {
            TagService.method.oneAudit(data, data.tagStatus * -1);
            $scope.checkOne(data);
        };
        $scope.changeTagsStatus = function(datas, tagStatus){
            TagService.method.batchAudit(datas, tagStatus);
        };
    }]);
    //导出及批量操作
    angular.module('app.routes').controller('QualityTagExportController', ["$scope", "$uibModalInstance", "$state", "$stateParams", "$http", "$cookies", "SweetAlert", "datas", "form", function ($scope, $uibModalInstance, $state, $stateParams, $http, $cookies, SweetAlert, datas, form) {
        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        $scope.export = function () {
            var paramsList = JSON.parse(JSON.stringify(form));
            if(!!paramsList.tagBeans && !!paramsList.tagBeans.length){
                paramsList.tagId = paramsList.tagBeans[0].id;
                paramsList.tagName = paramsList.tagBeans[0].name;
                delete paramsList.tagBeans;
            } else {
                return;
            }
            exportCommon(datas, paramsList, $scope, QUALITY_TAG_EXPORT, SweetAlert, 'id', $uibModalInstance);
        }
    }]);
    angular.module('app.routes').controller('QualityOrderController', ["$scope", "$uibModalInstance", "$state", "$stateParams", "$http", "$cookies", "SweetAlert", "TagService", "data", "orderType", function($scope, $uibModalInstance, $state, $stateParams, $http, $cookies, SweetAlert, TagService, data, orderType){
        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        $scope.setPosition = function (position) {
            console.log(data);
            console.log(orderType);
            if(parseInt(position) <= 0){
                sweetAlertCommon(SweetAlert, "必须输入大于0的整数", "warning");
                // SweetAlert.swal(new SweetAlertSetup("必须输入大于0的整数", "点击按钮", "warning"))
            }
            TagService.method.changeOrder(orderType, data.id, parseInt(position) - 1);
        }
    }])
})();


/**
 * Created by YuChunzhuo on 2016/8/28.
 */
(function () {
    'use strict';

    angular.module('app.routes').service('TagService', TagService);
    TagService.$inject = ['$http', 'SweetAlert', '$timeout'];
    function TagService($http, SweetAlert, $timeout) {
        var vm = this;
        vm.service = {
            'query': query,
            'audit': audit,
            'export': exportExcelService,
            'order': order
        };
        vm.method = {
            'getDatas': getDatas,
            'batchAudit': batchAudit,
            'oneAudit': oneAudit,
            'export': exportExcelMethod,
            'changeOrder': changeOrder
        };
        function query(data){
            var url = QUALITY_TAG_QUERY + "?data=" + data;
            return HttpGET(url, $http, SweetAlert, "精品标签数据查询接口异常");
        }
        function audit(params){
            var url = QUALITY_TAG_AUDIT;
            return HttpPost(url, params,  $http, SweetAlert, "精品标签数据审核接口异常");
        }
        function exportExcelService(data){
            var url = QUALITY_TAG_EXPORT + "?data=" + data;
            window.open(url);
        }
        function order(type, id, no){
            var url = QUALITY_TAG_ORDER + type + "/" + id + "/" + no + ".json";
            return HttpGET(url, $http, SweetAlert, "精品标签排序接口异常");
        }
        function push(params){
            var url = QUALITY_TAG_PUSH;
            return HttpPost(url, params,  $http, SweetAlert, "精品标签输出接口异常");
        }
        function getDatas($scope){
            //获取list
            var paramsList = JSON.parse(JSON.stringify($scope.form));
            if(!!paramsList.tagBeans && !!paramsList.tagBeans.length){
                paramsList.tagId = paramsList.tagBeans[0].id;
                paramsList.tagName = paramsList.tagBeans[0].name;
                delete paramsList.tagBeans;
            } else {
                $scope.$parent.datas = [];
                return;
            }
            var _promiseList = vm.service.query(JSON.stringify(paramsList));
            if(_promiseList){
                _promiseList.then(function(res){
                    if(res.status == 1){
                        $scope.$parent.datas = res.data.list;
                    } else{
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                });
            }
            //获取count
            var paramsLCount = paramsList;
            paramsLCount.isQueryCount = 1;
            var _promiseCount = vm.service.query(JSON.stringify(paramsLCount));
            if(_promiseCount){
                _promiseCount.then(function(res){
                    if(res.status == 1){
                        paginationDiscreteness($scope, 5, res.data.pageSize, res.data.totalCount, res.data.pageTotal, res.data.pageNo);
                    } else{
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                });
            }
        }
        function batchAudit(datas, tagStatus){
            var params = {};
            params.tagStatus = tagStatus;
            params.ids = getPropertyFromCheckBox(datas, 'isCheck', true, 'id').join(",");
            if(!params.ids.length){
                //直接进行反向操作
                params.tagStatus *= -1;
                params.ids = getPropertyFromCheckBox(datas, 'isCheck', false, 'id').join(",");
                var __promise = vm.service.audit(formatObject4Url(params));
                if(__promise){
                    __promise.then(function (res) {
                        if(res.status == 1){
                            sweetAlertCommon(SweetAlert);
                            $timeout(function () {
                                location.reload();
                            }, 1000);
                        } else {
                            sweetAlertCommon(SweetAlert, res.message, 'warning');
                        }
                    })
                }
                return;
            }
            //先进行正向操作
            var _promise = vm.service.audit(formatObject4Url(params));
            if(_promise){
                _promise.then(function(res0){
                    if(res0.status == 1){
                        //然后进行反向操作
                        params.tagStatus *= -1;
                        params.ids = getPropertyFromCheckBox(datas, 'isCheck', false, 'id').join(",");
                        if(!params.ids.length){
                            sweetAlertCommon(SweetAlert);
                            $timeout(function () {
                                location.reload();
                            }, 1000);
                        } else {
                            var __promise = vm.service.audit(formatObject4Url(params));
                            if(__promise){
                                __promise.then(function (res) {
                                    if(res.status == 1){
                                        sweetAlertCommon(SweetAlert);
                                        $timeout(function () {
                                            location.reload();
                                        }, 1000);
                                    } else {
                                        sweetAlertCommon(SweetAlert, res.message, 'warning');
                                    }
                                })
                            }
                        }
                    } else{
                        sweetAlertCommon(SweetAlert, res0.message, 'warning');
                    }
                });
            }
        }
        function oneAudit(data, tagStatus){
            var params = {};
            params.tagStatus = tagStatus;
            params.ids = data.id;
            var __promise = vm.service.audit(params);
            if(__promise){
                __promise.then(function (res) {
                    if(res.status == 1){
                        sweetAlertCommon(SweetAlert);
                        $timeout(function () {
                            location.reload();
                        }, 1000);
                    } else {
                        sweetAlertCommon(SweetAlert, res.message, 'warning');
                    }
                })
            }
        }
        function exportExcelMethod(params){
            var paramsList = JSON.parse(JSON.stringify(params));
            if(!!paramsList.tagBeans && !!paramsList.tagBeans.length){
                paramsList.tagId = paramsList.tagBeans[0].id;
                delete paramsList.tagBeans;
            } else {
                return;
            }
            vm.service.exportExcelService(JSON.stringify(paramsList));
        }
        function changeOrder(orderType, id, no){
            var _promise = vm.service.order(orderType, id, no);
            if(_promise){
                _promise.then(function (res) {
                    if(res.status == 1){
                        sweetAlertCommon(SweetAlert);
                        $timeout(function () {
                            location.reload();
                        }, 1000);
                    } else {
                        sweetAlertCommon(SweetAlert, res.message, 'warning');
                    }
                });
            }
        }
    }
})();
/**
 * Created by YuChunzhuo on 2015/11/19.
 */

var tag_tree_tags = '';
var tag_tree_user_id = '';
var tag_tree_checked = [];
angular.module('app.routes').config(tagTreeConfig);
tagTreeConfig.$inject = ['$stateProvider',  'RouteHelpersProvider'];
function tagTreeConfig($stateProvider,helper){
    $stateProvider
        .state('app.tagTree',{
            url:'/tag-tree',
            templateUrl:'app/views/tags/tag-tree/tag-tree.html',
            resolve: helper.resolveFor('ztree'),
            controller:["$scope", "$http", "permissions", "$state", "$timeout", "$rootScope", "display", function($scope, $http,permissions, $state, $timeout, $rootScope, display){
                $scope.tags = [];
                tag_tree_user_id = _session.id;
                $http.get(tag_tree_url + "getTagsTreeByUserId").success(function(res){
                    //console.log(_session.id);
                    //tag_tree_user_id = _session.id;
                    var json = res;
                    //右边已选标签
                    $scope.choseIds = [];
                    //for(var i = 0; i < json.treeEntityList.length; i++){
                    //    json.treeEntityList[i].idName = json.treeEntityList[i].id + json.treeEntityList[i].name;
                    //}
                    for(var i = 0; i < json.treeEntityList.length; i++){
                        if(json.treeEntityList[i].tagType == 0) json.treeEntityList[i].iconSkin = 'pIcon01';
                        // else json.treeEntityList[i].iconSkin = 'icon01';
                    }
                    $scope.tagTreeNodes = json.treeEntityList;
                    console.log($.fn.zTree);
                    $.fn.zTree.init($("#treeDemo"), tagTreeSetting, $scope.tagTreeNodes);
                    $scope.choseArr = [];
                    //console.log(res);
                });
                //$scope.choseTagIds = tag_tree_tags;
                //查看勾选的标签的按钮
                $scope.show = function(){
                    if(tag_tree_tags.length <= 0){
                        //alert('根本就没有勾选标签，请不要逗我好吗');
                        alertTipCommon($timeout,$rootScope,'根本就没有勾选标签，请不要逗我好吗',display);
                        return;
                    }
                    $scope.choseArr.length = 0;
                    $scope.tags = [];
                    var ids = [];
                    //for(var i = 0; i < $scope.checkedIds.length; i++){
                    //    ids.push($scope.checkedIds[i].id);
                    //}
                    $http.get(tag_tree_url + 'getTagsListByIds.do?userId=' + tag_tree_user_id + '&tagIds=' + tag_tree_tags).success(function(res){
                        //var tagList = res.tagInfoList;
                        for(var i=0; i < res.tagInfoList.length; i++){
                            var tag = res.tagInfoList[i];
                            var tagDetail = new Object();
                            tagDetail.isAlbumCheck = (tag.album == 1 ? true : false);
                            tagDetail.isArtistCheck = (tag.artist == 1 ? true : false);
                            tagDetail.isSongCheck = (tag.song == 1 ? true : false);
                            tagDetail.isHideCheck = (tag.tagState == -1 ? true : false);
                            //tagDetail.isHideCheck = false;
                            tagDetail.isFolderCheck = (tag.tagType == 2 ? true : false);
                            tagDetail.isMlsCheck = ((tag.tagAttribute == 1 || tag.tagAttribute == 3) ? true : false);
                            tagDetail.isQQCheck = ((tag.tagAttribute == 2 || tag.tagAttribute == 3) ? true : false);
                            tagDetail.name = tag.name;
                            tagDetail.id = tag.id;
                            tagDetail.qqCheck = 'qq';
                            tagDetail.mlsCheck = 'mls';
                            tagDetail.folderCheck = 'folder';
                            tagDetail.hideCheck = 'hide';
                            tagDetail.songCheck = 'song';
                            tagDetail.artistCheck = 'artist';
                            tagDetail.albumCheck = 'album';
                            var flag = true;
                            for(var m = 0; m < $scope.tags.length; m++){
                                if($scope.tags[m].id == tagDetail.id){
                                    flag = false;
                                }
                            }
                            if(flag){
                                $scope.tags.push(tagDetail);
                            }
                            //$scope.tags.push(tagDetail);
                        }
                    });
                };
                //合并按钮
                $scope.mergeTagButton = function(){
                    if($scope.choseIds.length <= 0){
                        //alert('根本就没有勾选合并框，请不要逗我好吗');
                        alertTipCommon($timeout,$rootScope,'根本就没有勾选合并框，请不要逗我好吗',display);
                        return;
                    } else {
                        $state.go('app.tagTree.merge',{mergeIds:$scope.choseIds});
                    }
                };
                //搜索框搜索单条标签
                $scope.searchTag = function(t){
                    //console.log(t);
                    $http.get(tag_tree_url + 'getTagsListByIds.do?userId=' + tag_tree_user_id + '&tagIds=' + t.id).success(function(res){
                        for(var i=0; i < res.tagInfoList.length; i++){
                            var tag = res.tagInfoList[i];
                            var tagDetail = new Object();
                            tagDetail.isAlbumCheck = (tag.album == 1 ? true : false);
                            tagDetail.isArtistCheck = (tag.artist == 1 ? true : false);
                            tagDetail.isSongCheck = (tag.song == 1 ? true : false);
                            tagDetail.isHideCheck = (tag.tagState == -1 ? true : false);
                            //tagDetail.isHideCheck = false;
                            tagDetail.isFolderCheck = (tag.tagType == 2 ? true : false);
                            tagDetail.isMlsCheck = ((tag.tagAttribute == 1 || tag.tagAttribute == 3) ? true : false);
                            tagDetail.isQQCheck = ((tag.tagAttribute == 2 || tag.tagAttribute == 3) ? true : false);
                            tagDetail.name = tag.name;
                            tagDetail.id = tag.id;
                            tagDetail.qqCheck = 'qq';
                            tagDetail.mlsCheck = 'mls';
                            tagDetail.folderCheck = 'folder';
                            tagDetail.hideCheck = 'hide';
                            tagDetail.songCheck = 'song';
                            tagDetail.artistCheck = 'artist';
                            tagDetail.albumCheck = 'album';
                            var flag = true;
                            for(var m = 0; m < $scope.tags.length; m++){
                                if($scope.tags[m].id == tagDetail.id){
                                    flag = false;
                                }
                            }
                            if(flag){
                                $scope.tags.push(tagDetail);
                            }
                        }
                    });
                };
                //提交单条标签
                $scope.commit = function(tag){
                    var tagJsons = [];
                    var tagJson = new Object();
                    tagJson.id = tag.id;
                    tagJson.name = tag.name;
                    tagJson.artist = (tag.isArtistCheck ? 1 : 0);
                    tagJson.album = (tag.isAlbumCheck ? 1 : 0);
                    tagJson.song = (tag.isSongCheck ? 1 : 0);
                    tagJson.tagState = (tag.isHideCheck ? -1 : 0);
                    tagJson.tagType = (tag.isFolderCheck ? 2 : 0);
                    if(tag.isMlsCheck == false && tag.isQQCheck == false){
                        tagJson.tagAttribute = 0;
                    } else if(tag.isMlsCheck == true && tag.isQQCheck == false){
                        tagJson.tagAttribute = 1;
                    } else if(tag.isMlsCheck == false && tag.isQQCheck == true){
                        tagJson.tagAttribute = 2;
                    } else if(tag.isMlsCheck == true && tag.isQQCheck == true){
                        tagJson.tagAttribute = 3;
                    }
                    tagJsons.push(tagJson);
                    console.log(encodeURIComponent(JSON.stringify(tagJsons)));
                    $http.get(tag_tree_url + 'mergeTagInfo.do?userId=' + tag_tree_user_id + '&tagInfoListJson=' + encodeURIComponent(JSON.stringify(tagJsons))).success(function(res){
                        if(res.message == 'success' && res.status == '000000'){
                            //alert('提交成功');
                            alertTipCommon($timeout,$rootScope,'提交成功',display);
                            //然后在array里面删除指定下标的元素
                            var temp = 0;
                            for(var i = 0; i < $scope.tags.length; i++){
                                if($scope.tags[i].id == tag.id){
                                    temp = i;
                                }
                            }
                            $scope.tags.splice(temp, 1);
                        } else {
                            //alert('提交失败，返回信息:' + JSON.stringify(res));
                            alertTipCommon($timeout,$rootScope,'提交失败，返回信息:' + JSON.stringify(res),display);
                        }
                    }).error(function(res){
                        //alert('提交失败');
                        alertTipCommon($timeout,$rootScope,'提交失败',display);
                    });
                };
                //复选框勾选各种属性,此处用class的check验证控制
                $scope.checkPorp = function(flag, tag){
                    if (flag == 'qq'){
                        tag.isQQCheck = !tag.isQQCheck;
                    } else if (flag == 'mls'){
                        tag.isMlsCheck = !tag.isMlsCheck;
                    } else if (flag == 'folder'){
                        tag.isFolderCheck = !tag.isFolderCheck;
                    } else if (flag == 'hide'){
                        tag.isHideCheck = !tag.isHideCheck;
                    } else if (flag == 'song'){
                        tag.isSongCheck = !tag.isSongCheck;
                    } else if (flag == 'artist'){
                        tag.isArtistCheck = !tag.isArtistCheck;
                    } else if (flag == 'album'){
                        tag.isAlbumCheck = !tag.isAlbumCheck;
                    }
                };

                //复选框的单选事件把id放入array里面,checkb是ng-model控制
                $scope.checkSingle = function(checkb, data){
                    var choseStr = '';
                    if($scope.choseArr.length > 0){
                        choseStr = $scope.choseArr.join(',') + ',';
                    }
                    if(checkb == true){    //选中
                        choseStr = choseStr + data.id + ",";
                        data.isCheck = true;
                    } else {    //取消勾选
                        choseStr = choseStr.replace(data.id + ",", "");
                        data.isCheck = false;
                    }
                    if(choseStr.length == 0 || choseStr == ''){
                        $scope.choseArr = [];
                    } else {
                        $scope.choseArr = (choseStr.substr(0,choseStr.length-1)).split(',');
                    }
                    //console.log(data);
                    console.log($scope.choseArr);
                    $scope.choseIds = $scope.choseArr.join(',');
                    //return choseArr;
                }
            }]
        })
        .state('app.tagTree.merge',{
            url:'/merge$:mergeIds',
            views: {
                "tag-tree-merge": {
                    templateUrl:'app/views/tags/tag-tree/tag-tree-oper.html',
                    controller:["$scope", "$http", "$stateParams", "permissions", "$timeout", "$rootScope", "display", function($scope, $http,$stateParams,permissions, $timeout, $rootScope, display){
                        $http.get(tag_tree_url + 'getTagsListByIds.do?userId=' + tag_tree_user_id + '&tagIds=' + $stateParams.mergeIds).success(function(res){
                            //var tagList = res.tagInfoList;
                            $scope.tags = [];
                            for(var i=0; i < res.tagInfoList.length; i++){
                                var tag = res.tagInfoList[i];
                                var tagDetail = new Object();
                                tagDetail.isAlbumCheck = (tag.album == 1 ? true : false);
                                tagDetail.isArtistCheck = (tag.artist == 1 ? true : false);
                                tagDetail.isSongCheck = (tag.song == 1 ? true : false);
                                tagDetail.isHideCheck = (tag.tagState == -1 ? true : false);
                                //tagDetail.isHideCheck = false;
                                tagDetail.isFolderCheck = (tag.tagType == 2 ? true : false);
                                tagDetail.isMlsCheck = ((tag.tagAttribute == 1 || tag.tagAttribute == 3) ? true : false);
                                tagDetail.isQQCheck = ((tag.tagAttribute == 2 || tag.tagAttribute == 3) ? true : false);
                                tagDetail.name = tag.name;
                                tagDetail.id = tag.id;
                                tagDetail.qqCheck = 'qq';
                                tagDetail.mlsCheck = 'mls';
                                tagDetail.folderCheck = 'folder';
                                tagDetail.hideCheck = 'hide';
                                tagDetail.songCheck = 'song';
                                tagDetail.artistCheck = 'artist';
                                tagDetail.albumCheck = 'album';
                                tagDetail.isCheck = false;
                                $scope.tags.push(tagDetail);
                            }
                        });
                        $scope.checkSingle = function(data, datas){
                            console.log('进入了合并页面的复选框函数');
                            //console.log(data);
                            //console.log(datas);
                            for(var i = 0; i < datas.length; i++){
                                if(datas[i].id != data.id)
                                    datas[i].isCheck = false;
                            }
                            data.isCheck = !data.isCheck;
                            console.log(data.id);
                        };
                        //合并标签
                        $scope.mergeTags = function(datas){
                            var con = confirm('确认合并这些标签吗？');
                            if(con){
                                var mergeId = '';
                                var mergedIds = '';
                                var count = 0;
                                for(var i = 0; i < datas.length; i++){
                                    if(datas[i].isCheck){
                                        mergeId += datas[i].id + ',';
                                        count++;
                                    }
                                }
                                //拼接留下的ID
                                if(count == 0){
                                    //alert('需要勾选一个留下的标签');
                                    alertTipCommon($timeout,$rootScope,'需要勾选一个留下的标签',display);
                                    console.log('count:' + count);
                                    return;
                                } else if (count > 1){
                                    //alert('不能勾选超过1个标签');
                                    alertTipCommon($timeout,$rootScope,'不能勾选超过一个标签',display);
                                    console.log('count:' + count);
                                    return;
                                } else {
                                    mergeId = mergeId.substr(0, mergeId.length - 1);
                                    count = 0;
                                }
                                console.log(mergeId);
                                //拼接被合并的ID
                                for(var i = 0; i < datas.length; i++){
                                    if(!datas[i].isCheck){
                                        mergedIds += datas[i].id + ',';
                                        count++;
                                    }
                                }
                                if(count == 0){
                                    //alert('至少需要一个被合并的标签');
                                    alertTipCommon($timeout,$rootScope,'至少需要一个被合并的标签',display);
                                    console.log('count:' + count);
                                    return;
                                } else {
                                    mergedIds = mergedIds.substr(0, mergedIds.length - 1);
                                }
                                var url = tag_tree_url + 'mergeTagID.do?userId=' + tag_tree_user_id + '&mergeID=' + mergeId + '&mergedStr=' + mergedIds;
                                $http.get(url).success(function(res){
                                    if(res.message == 'success' && res.status == '000000'){
                                        //alert('合并成功');
                                        alertTipCommon($timeout,$rootScope,'合并成功',display);
                                        //location.reload();
                                        window.location.href = '/mls/resources/pages/top/top.html#/tag-tree';
                                        location.reload();
                                    } else {
                                        //alert('合并失败,返回信息:' + res);
                                        alertTipCommon($timeout,$rootScope,'合并失败，返回信息:' + JSON.stringify(res),display);
                                    }
                                }).error(function(res){
                                    //alert('合并失败');
                                    alertTipCommon($timeout,$rootScope,'合并失败',display);
                                });
                            }
                        };
                    }]
                }
            }

        })
}

//复选框单选
//function checkSingle(isCheck, data,choseStr,choseArr){
//    if(isCheck == true){
//        choseStr = choseStr + data + ",";
//        data.isCheck = true;
//    } else {
//        choseStr.replace(data + ",", "");
//        data.isCheck = false;
//    }
//    if(choseStr.length = 0){
//        choseArr = [];
//    } else {
//        choseArr = (choseStr.substr(0,choseStr.length-1)).split(',');
//    }
//    return choseArr;
//};
var tagTreeSetting = {
    view: {
        // addHoverDom: addHoverDom,
        removeHoverDom: removeHoverDom,
        selectedMulti: false
    },
    check: {
        enable: true,
        chkboxType: {
            "Y": "",
            "N": ""
        }
    },
    data: {
        simpleData: {
            enable: true
        },
        keep: {
            //parent:true
        },
        key: {
            //name: "idName",
        }
    },
    edit: {
        enable: true,
        showRemoveBtn: false,
        showRenameBtn: false,
        renameTitle: "修改标签名字"
    },
    callback:{
        //beforeRemove:zTreeBeforeRemove,
        onCheck: tagTreeOnCheck,
        beforeRename: zTreeBeforeRename,
        onClick: zTreeOnClick
    }
};

//var zNodes =[
//    { id:1, pId:0, name:"语言", open:true},
//    { id:11, pId:1, name:"日语"},
//    { id:12, pId:1, name:"国语"},
//    { id:111, pId:12, name:"汉语"},
//    { id:112, pId:12, name:"闽南语"},
//    { id:113, pId:12, name:"藏语"},
//    { id:114, pId:12, name:"蒙古语"},
//    { id:13, pId:1, name:"英语"},
//    { id:14, pId:1, name:"韩语"},
//    { id:15, pId:1, name:"法语"},
//    { id:17, pId:1, name:"纯音乐"},
//    { id:2, pId:0, name:"风格"},
//    { id:21, pId:2, name:"轻音乐"},
//    { id:22, pId:2, name:"拉丁"},
//    { id:23, pId:2, name:"民谣"},
//    { id:23, pId:2, name:"流行"},
//    { id:23, pId:2, name:"爵士"},
//    { id:23, pId:2, name:"古典", isHidden:true},
//    { id:3, pId:0, name:"人声", isParent:true}
//];

var newCount = 0;
function addHoverDom(treeId, treeNode) {
    var sObj = $("#" + treeNode.tId + "_span");
    if (treeNode.editNameFlag || $("#addBtn_"+treeNode.tId).length>0) return;
    var removeStr = "<span class='button remove' id='removeBtn_" + treeNode.tId
        + "' title='删除标签' onfocus='this.blur();'></span>";
    if(treeNode.pId != null && treeNode.pId != undefined && treeNode.pId != ""){
        sObj.after(removeStr);
    }
    var editStr = "<span class='button edit' id='editBtn_" + treeNode.tId
        + "' title='修改标签名字' onfocus='this.blur();'></span>";
    if(treeNode.pId != null && treeNode.pId != undefined && treeNode.pId != ""){
        sObj.after(editStr);
    }
    var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
        + "' title='添加子标签' onfocus='this.blur();'></span>";
    sObj.after(addStr);

    //绑定添加按钮的事件
    var addbtn = $("#addBtn_"+treeNode.tId);
    if (addbtn) addbtn.bind("click", function(){
        console.log(tag_tree_url + "addTagsFolder.do?folderFatherNum=" + treeNode.id + "&folderName=new node" + (newCount + 1) +"&userId=" + tag_tree_user_id + "&folderState=10&folderDesc=");
        $.ajax({
            url: tag_tree_url + "addTagsFolder.do?folderFatherNum=" + treeNode.id + "&folderName=new node" + (newCount + 1) +"&userId=" + tag_tree_user_id + "&folderState=10&folderDesc=",
            type: "get",
            dataType: "jsonp",
            data: "",
            cache: false,
            async: false,
            success: function(res){
                if (res.message == "success" && res.status == "000000"){
                    console.log("添加节点成功");
                    alert("添加节点成功");
                    var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                    zTree.addNodes(treeNode, {id:res.objId,pId:treeNode.id, name:"new node" + (++newCount)});
                    //zTree.addNodes(treeNode, {id:100+newCount,pId:treeNode.id, name:"new node" + (newCount++)});
                } else {
                    alert("添加节点失败");
                }
            },
            error: function(){
                alert("请求出错");
            }
        });

        return false;
    });
    //绑定重命名按钮
    var editbtn = $("#editBtn_"+treeNode.tId);
    if (editbtn) editbtn.bind("click", function(){
        var treeObj = $.fn.zTree.getZTreeObj(treeId);
        treeObj.editName(treeNode);
    });
    //绑定删除按钮的事件
    var removebtn = $("#removeBtn_"+treeNode.tId);
    if (removebtn) removebtn.bind("click", function(){
        console.log(tag_tree_url + "delTagsFolder.do?userId=" + tag_tree_user_id + "&folderId=" + treeNode.id);
        if(treeNode.children != null && treeNode.children != undefined && treeNode.children.length > 0){    //
            alert(treeNode.name + '下面还有子标签，不能删除');
            return false;
        } else {
            var con = confirm('确认删除' + treeNode.name + '标签吗？');
            if (con){
                //var flag = false;
                var url = tag_tree_url + "delTagsFolder.do?userId=" + tag_tree_user_id + "&folderId=" + treeNode.id;
                console.log(url);
                $.ajax({
                    url: tag_tree_url + "delTagsFolder.do?userId=" + tag_tree_user_id + "&folderId=" + treeNode.id,
                    type: "get",
                    dataType: "jsonp",
                    data: "",
                    cache: false,
                    async: false,
                    success: function(res){
                        if (res.message == "success" && res.status == "000000"){
                            console.log("删除节点" + treeNode.name + "成功");
                            alert("删除节点" + treeNode.name + "成功");
                            //flag = true;
                            var treeObj = $.fn.zTree.getZTreeObj(treeId);
                            treeObj.removeNode(treeNode);
                        } else {
                            alert("删除节点失败，返回信息:" + res.message + " " + res.status);
                            //return flag;
                        }
                    },
                    error: function(){
                        alert('连接错误');
                        //return false;
                    }
                });
                //console.log(flag);
                //return true;
            } else {
                return false;
            }
        }
    });
};
function removeHoverDom(treeId, treeNode) {
    $("#addBtn_"+treeNode.tId).unbind().remove();
    $("#editBtn_"+treeNode.tId).unbind().remove();
    $("#removeBtn_"+treeNode.tId).unbind().remove();
};

//设置成如果还有子项目，就弹出窗口，不让删除
//function zTreeBeforeRemove(treeId, treeNode){
//    console.log(treeNode.isHidden);
//    if(treeNode.children != null && treeNode.children != undefined && treeNode.children.length > 0){    //
//        alert(treeNode.name + '下面还有子标签，不能删除');
//        return false;
//    } else {
//        var res = confirm('确认删除' + treeNode.name + '标签吗？');
//        if (res){
//            return true;
//        } else {
//            return false;
//        }
//    }
//};
//捕获勾选事件，让选中的数据出现在右边
function tagTreeOnCheck(event, treeId, treeNode){
    //tag_tree_tags.length = 0;
    if(event != null && treeId != null && treeNode != null){
        //console.log(treeNode);
        //console.log(event);
        var tempIds = []
        var zTree = $.fn.zTree.getZTreeObj(treeId);
        var nodes = zTree.getCheckedNodes(true);
        //if(treeNode.checked === true){
        for(var i = 0; i < nodes.length; i++){
            var node = nodes[i];
            tempIds.push(node.id);
        }
        tag_tree_tags = tempIds.join(',');
        //console.log(tag_tree_tags);
        //permissions.console.log(tag_tree_tags);
        //}

    }
};
var tagTreeId;
var tagTreeNode;
//重命名事件回调函数
function zTreeBeforeRename(treeId, treeNode, newName, isCancel) {
    tagTreeId = treeId;
    tagTreeNode = treeNode;
    console.log(isCancel);
    //console.log(treeNode);
    if(!isCancel){
        if(treeNode.pId == null || treeNode.pId == undefined || treeNode.pId == ""){
            var treeObj = $.fn.zTree.getZTreeObj(treeId);
            treeObj.cancelEditName();
            return false;
        }
        var url = tag_tree_url + 'updateTagsFolder.do?userId=' + tag_tree_user_id + '&folderId=' + treeNode.id + '&folderName=' + encodeURIComponent(newName) + '&folderFatherNum=' + treeNode.pId + '&folderState=0&folderDesc=';
        $.ajax({
            url: tag_tree_url + 'updateTagsFolder.do?userId=' + tag_tree_user_id + '&folderId=' + treeNode.id + '&folderName=' + encodeURIComponent(newName) + '&folderFatherNum=' + treeNode.pId + '&folderState=0&folderDesc=',
            type: "get",
            dataType: "json",
            data: "",
            cache: false,
            async: false,
            success: function(res){
                if (res.message == "success" && res.status == "000000"){
                    alert('修改名称成功');
                    return true;
                } else {
                    alert('修改名称失败，不能修改');
                    var treeObj = $.fn.zTree.getZTreeObj(tagTreeId);
                    treeObj.cancelEditName();
                    return false;
                }
            },
            error: function(res){
                console.log(res);
                alert('返回异常，重命名失败，请刷新此界面');
                var treeObj = $.fn.zTree.getZTreeObj("treeDemo");
                treeObj.cancelEditName();
                //return false;
            }
        });
    }
    //if(newName.length > 5){
    //    var treeObj = $.fn.zTree.getZTreeObj(treeId);
    //    treeObj.cancelEditName();
    //    console.log("取消编辑");
    //    return false;
    //}
    //return true;
};
//点击事件回调函数
function zTreeOnClick(event, treeId, treeNode) {
    var treeObj = $.fn.zTree.getZTreeObj(treeId);
    treeObj.checkNode(treeNode, !treeNode.checked, false, true);
    //alert(treeNode.tId + ", " + treeNode.name);
};

/**
 * Created by hao.cheng on 2016/1/18.
 * tagging-controller
 */
angular.module('app.routes').config(taggingConfig);
taggingConfig.$inject = ['$stateProvider',  'RouteHelpersProvider'];
function taggingConfig($stateProvider,helper){
    $stateProvider
        .state('app.tagging',{
            url: '/tagging',
            templateUrl: 'app/views/tags/tagging/tagging.html',
            controller: ["$http", "$scope", function($http,$scope){
                $scope.params = {};
            }]
        })
        .state('app.tagging.search',{
            url: '/search?:songIds&:songKeyword&:artistKeyword&:albumKeyword&:karakalStatu&:pageNo&:pageSize',
            views: {
                'tagging-list': {
                    templateUrl: 'app/views/tags/tagging/tagging-list.html',
                    controller: ["$http", "$scope", "$stateParams", "$state", "$timeout", "$rootScope", "display", "SweetAlert", function($http,$scope,$stateParams,$state,$timeout,$rootScope,display,SweetAlert){
                        for(var p in $stateParams){//循环参数赋值
                            if($stateParams[p] == undefined){
                                $stateParams[p] = '';
                            }
                            if(p == 'pageSize' && checkEmpty($stateParams[p])) $stateParams[p] = 100;
                            $scope.params[p] = $stateParams[p];
                        }
                        if('songIds' in $scope.params){
                            $scope.params.songIds = JSON.parse("[" + $scope.params.songIds + "]");//将字符串转成数组
                        }
                        $http.jsonp(_search_song + '?' + CALLBACK + '&data=' + JSON.stringify($scope.params)).success(function(res){
                            paginationDiscreteness($scope,5,res.body.pageSize,res.body.totalCount,res.body.pageTotal,res.body.pageNo);
                            // paginationCommon($scope,5,res.body.pageSize,res.body.totalCount,res.body.pageTotal,res.body.pageNo);
                            var ids = [];
                            for(var i in res.body.list){
                                ids.push(res.body.list[i].songId);
                            }
                            $http.jsonp(list_url + 'song.json?' + CALLBACK + '&ids=' + ids.join(',')).success(function(resp){
                                $scope.datas = resp.data;
                            });
                        });
                        $scope.addPlaySong = function(songId,copyId){
                            addPlaySong(songId,copyId,SweetAlert);
                        }
                        $scope.taggingCheck = function(songId){
                            $http.jsonp(http_url + '/tagRel/edit/song/' + songId + '.json?' + CALLBACK).success(function(res){ //锁定打标签状态
                                if(res.status == 0){
                                    alertTipCommon($timeout,$rootScope,'状态锁定失败,不能打标签',display);
                                    return;
                                }else{
                                    alertTipCommon($timeout,$rootScope,'状态锁定成功',display);
                                }
                                $state.go('app.tagging.info',{songId:songId});    //状态锁定成功后进入打标签页面
                            })
                        }
                        $scope.choosePage = function(){
                            $state.go('app.tagging.search',{pageNo: $scope.bigCurrentPage});
                        };
                    }]
                }
            }
        })
        .state('app.tagging.info',{
            url: '/info/:songId&:type&:taskId',
            views: {
                'tagging-page':{
                    templateUrl: 'app/views/tags/tagging/tagging-info.html',
                    resolve: helper.resolveFor('ztree'),
                    controller: ["$http", "$scope", "$cookies", "$stateParams", "$timeout", "$rootScope", "display", function($http,$scope,$cookies,$stateParams,$timeout,$rootScope,display){
                        $scope.type = $stateParams.type;
                        $scope.taskId = $stateParams.taskId;
                        $http.jsonp(http_url+'/audit/opinion/song/'+$stateParams.songId+'.json?' + CALLBACK+'&source=1').success(function(res){    //获取审核意见列表
                            $scope.examine_datas =  res.data.list;
                            $http.get(git_user+ '&private_token=' +  $cookies.get('kpk')).success(function(res){
                                for(var i in $scope.examine_datas){
                                    for(var j in res){
                                        if($scope.examine_datas[i].userId == res[j].id){
                                            $scope.examine_datas[i].userName = res[j].name;
                                        }
                                    }
                                }
                            });
                        });
                        $http.jsonp(http_url + '/tagRel/query/song/' + $stateParams.songId + '.json?' + CALLBACK).success(function(res){//获取关联标签
                            $scope.tags = res.data.tags;
                        });
                        $http.jsonp(detail_url + 'song/' + $stateParams.songId + '.json?' + CALLBACK).success(function(res){//获取详情
                            $scope.detail = res.data;
                        });
                        var url = tag_alone_tree+'?'+CALLBACK+'&userId=12&materialType=3';
                        //tag_tree_url + 'getTagsTreeByUserId.do?userId=' + $cookies.kuid + '&' + CALLBACK
                        $http.get(url).success(function(res){
                            $scope.tagTreeNodes = res.tnList;
                            $.fn.zTree.init($("#treeDemo"), tagTreeSetting_tagging, $scope.tagTreeNodes);
                            var treeObj = $.fn.zTree.getZTreeObj('treeDemo');
                            expandAll('treeDemo');
                            collapseAll('treeDemo');

                            var lastValue = "", nodeList = [], fontCss = {};
                            var key = $('#key');
                            function searchNode(e) {
                                var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                                var value = $.trim(key.get(0).value);
                                var keyType = "";
                                keyType = "name";
                                if (key.hasClass("empty")) {
                                    value = "";
                                }
                                if (lastValue === value) return;
                                lastValue = value;
                                if (value === "") return;
                                updateNodes(false);

                                nodeList = zTree.getNodesByParamFuzzy(keyType, value);

                                updateNodes(true);

                            }
                            function updateNodes(highlight) {
                                var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                                for( var i=0, l=nodeList.length; i<l; i++) {
                                    nodeList[i].highlight = highlight;
                                    zTree.updateNode(nodeList[i]);
                                }
                            }
                            function focusKey(e) {
                                if (key.hasClass("empty")) {
                                    key.removeClass("empty");
                                }
                            }
                            function blurKey(e) {
                                if (key.get(0).value === "") {
                                    key.addClass("empty");
                                }
                            }
                            key.bind("focus", focusKey)
                                .bind("blur", blurKey)
                                .bind("propertychange", searchNode)
                                .bind("input", searchNode);

                            $('#datetimepicker').datetimepicker(dateConfig);
                            $('#datetimepicker2').datetimepicker(dateConfig);
                        });
                        $scope.tagging = function(songId){
                            var tagIds = [];
                            $("input[name=taggingCheck]:checked").each(function () {
                                var tag = {};
                                tag.tagId = $(this).val();
                                tag.type = 0;
                                tagIds.push(tag);
                            });
                            if(tagIds.length < 1){
                                alertTipCommon($timeout,$rootScope,'标签不能为空',display);
                                return;
                            }
                            var data = {};
                            data.rid = songId;
                            data.tags = tagIds;
                            data.page = 1;
                            $http.jsonp(tag_edi_new_update + 'song.json?' + CALLBACK + '&data=' + JSON.stringify(data)).success(function(res){
                                if(res.status == 1){
                                    alertTipCommon($timeout,$rootScope,'操作成功',display);
                                }else{
                                    alertTipCommon($timeout,$rootScope,'操作失败',display);
                                }
                            });
                        };
                        $scope.goBack = function(){//返回
                            history.back();
                        };
                        $scope.deleteAll = function(){
                            $('.W_btn_b.W_btn_tag').remove();
                        };
                        $scope.expandAll = function(){
                            expandAll('treeDemo');
                        };
                        $scope.collapseAll = function(){
                            collapseAll('treeDemo');
                        };
                        $scope.examine = function(data){
                            //console.log(data);
                            $http.jsonp(http_url+'/audit/songTag/' + $stateParams.taskId + '.json?rid='+$stateParams.songId+'&status='+data.status+'&opinion='+data.opinion + '&' + CALLBACK).success(function(res){
                                if(res.status == 1){
                                    alertTipCommon($timeout,$rootScope,'操作成功',display);
                                    history.back();
                                }else{
                                    alertTipCommon($timeout,$rootScope,'操作失败',display);
                                }
                            });
                        }
                    }]
                }
            }
        })
        .state('material.taggingInfo',{
            url: '/taggingInfo?:songId&:returnBtn',
            views: {
                '': {
                    templateUrl: helper.basepath('tags/tagging/tagging-info.html'),
                    controller: 'TaggingInfoCtrl'
                }
            }
        })
        .state('material.taggingEdit', {
            url: '/taggingEdit?:songId&:taskId&:lastPage',
            views: {
                '': {
                    templateUrl: helper.basepath('tags/tagging/tagging-info.html'),
                    resolve: helper.resolveFor('ztree'),
                    controller: 'TaggingEditCtrl'
                }
            }
        })

        .state('material.taggingCheck', {
            url: '/taggingCheck?:songId&:taskId',
            views: {
                '': {
                    templateUrl: helper.basepath('tags/tagging/tagging-info.html'),
                    controller: 'TaggingCheckCtrl'
                }
            }
        })
        .state('material.taggingExamine',{
            url: '/taggingExamine?:songId&:lastPage&:taskId&:returnBtn',
            views: {
                '': {
                    templateUrl: helper.basepath('tags/tagging/tagging-info.html'),
                    controller: 'TaggingInfoCtrl'
                }
            }
        })}

/*标签页面系列controller*/
angular.module('app.routes').controller('TaggingInfoCtrl', ["$scope", "$http", "$sce", "$stateParams", "$cookies", "SweetAlert", function ($scope, $http, $sce, $stateParams, $cookies, SweetAlert) {
    if($stateParams.returnBtn) $scope.returnBtn = $stateParams.returnBtn;
    if(window.location.href.indexOf("taggingExamine") != -1){
        $scope.examine = true;
    }
    basicRequest('song',catalogs,$scope,$http,$sce,$stateParams,$cookies,true);
    loadMoreRecord('song',$scope,$stateParams,$http,SweetAlert);
    $scope.examineConfirm = function(examineResult, examineSuggest){    //审核确认
        examineCommon('songTag',examineResult,examineSuggest,$http,$stateParams,SweetAlert);
    };
}]);
angular.module('app.routes').controller('TaggingEditCtrl', ["$scope", "$http", "$stateParams", "$cookies", "SweetAlert", "BaseService", function ($scope, $http, $stateParams, $cookies, SweetAlert, BaseService) {
    $scope.tagging = true;
    basicRequest('song', catalogs, $scope, $http, null, $stateParams, $cookies, true);
    loadMoreRecord('song', $scope, $stateParams, $http, SweetAlert);
    $scope.tagging = function (tagExt) {
        var _tagIds = [];
        $("input[name=taggingCheck]:checked").each(function () {
            var tag = {tagId: $(this).val(), type: 0};
            _tagIds.push(tag);
        });
        if(_tagIds.length < 1) return sweetAlertCommon(SweetAlert, '标签不能为空', 'warning');
        var _data = {rid: $stateParams.songId, tags: _tagIds, page: 1};
        if(tagExt) tagExt.status = 1,_data.tagExt = tagExt;  //如果存在自定义标签则保存
        var _promise = BaseService.service.taggingAlone('song', 'data=' + JSON.stringify(_data));
        if(_promise) _promise.then(function (res) {
           if(res.status == 1) {
               if(!checkEmpty($stateParams.lastPage)) window.open(returnLastPage($stateParams.lastPage), '_self');
               else history.back();
           }
            else return sweetAlertCommon(SweetAlert, res.msg, 'error');
        });
    };
    //搜索选中打标签
    $scope.tagTagging = function(tag){
        var treeNode = tag;
        $('#'+treeNode.tId).children('a').addClass('checked');
        var nodes = $('.tag-content').children();
        var flag = true;
        for(var j = 0; j < nodes.length; j++){
            if(nodes[j].innerText.trim() == treeNode.name){
                flag = false;
                break;
            }
        }
        if(flag && treeNode.tagType == 0){
            $('.tag-content').append(getTag(treeNode.name,treeNode.id));
            if(treeNode.pId == '1001075733'){
                $('#language').append(
                    '<span class="tx label label-default tag"  >'+treeNode.name+'</span>'
                );
                var lTag = {};lTag.type = 15; lTag.tagName = treeNode.name;lTag.tagId = treeNode.id;
            }

        }
    };

    /*标签操作*/
    setTaggingTree($http, $scope);
    $scope.deleteAll = function(){
        sweetAlertConfirm(SweetAlert,function(){
            $('.level1').removeClass('checked');
            $('.W_btn_b.W_btn_tag').remove();
            sweetAlertCommon(SweetAlert, '删除成功', 'success');
        },undefined,'确认要删除全部标签?',undefined);
    };
    $scope.expandAll = function(){
        expandAll('treeDemo');
    };
    $scope.collapseAll = function(){
        collapseAll('treeDemo');
    };

}]);
angular.module('app.routes').controller('TaggingCheckCtrl', ["$scope", "$http", "$stateParams", "$cookies", "SweetAlert", function ($scope, $http, $stateParams, $cookies, SweetAlert) {
    $scope.check = true;
    $scope.ckTagError = {};
    basicRequest('song', catalogs, $scope, $http, null, $stateParams, $cookies, true);
    loadMoreRecord('song', $scope, $stateParams, $http, SweetAlert);
    $scope.checkMaterial = function(ckResult, ckSuggest, ckTagError){ //抽查提交按钮
        checkCommon('songTag',ckResult,ckSuggest,ckTagError,$http,$stateParams,SweetAlert);
    };
}]);

var tagTreeSetting_tagging = {
    view: {
        selectedMulti: false,
        fontCss: getFontCss,
        showLine: false
    },
    check: {
        enable: true,
        chkStyle: 'checkbox',
        chkboxType: {
            "Y": "p",
            "N": "s"
        }

    },
    data: {
        simpleData: {
            enable: true
        },
        keep: {
            //parent:true
        },
        key: {
            //name: "idName",
        }
    },
    edit: {
        enable: true,
        showRemoveBtn: false,
        showRenameBtn: false,
        renameTitle: "修改标签名字"
    },
    callback:{
        beforeExpand: taggingTreeBeforeExpand,
        onExpand: taggingTreeOnExpand,
        onClick: taggingOnClick,
        onCollapse: taggingOnCollapse
    }
};
function taggingTreeBeforeExpand(treeId, treeNode){
    getChildrenNodes(treeNode);
}
function taggingTreeOnExpand(event,treeId, treeNode){
    // if(!checkEmpty(treeNode.children)) $('#'+treeNode.tId).css({'width': '100%'});
    getChildrenNodes(treeNode);
}
function taggingOnCollapse(event, treeId, treeNode) {
    // if(!checkEmpty(treeNode.children)) $('#'+treeNode.tId).css({'width': '150px'});
}
function getChildrenNodes(treeNode){
    if(treeNode.isParent){
        for(var i = 0; i < treeNode.children.length; i++){
            getChildrenNodes(treeNode.children[i]);
        }
    } else {
        $('#' + treeNode.getParentNode().tId).after("<div style=\"clear:both;\"></div>");
        $('#' + treeNode.tId).css('float','left');
    }
}
//展开标签树
function expandAll(id){
//		console.log($('#tagPage_' + id).html());
    var treeObj = $.fn.zTree.getZTreeObj(id);
    var nodes = treeObj.transformToArray(treeObj.getNodes());
    for(var i = 0; i< nodes.length; i++){
        treeObj.expandNode(nodes[i], true, false, false);
        if(!nodes[i].isParent && nodes[i].getParentNode() != undefined){
            // $('#' + nodes[i].getParentNode().tId).after("<div style=\"clear:both;\"></div>");
            $('#' + nodes[i].tId).css('float','left');
        }
    }
}
//折叠标签树
function collapseAll(id){
    var treeObj = $.fn.zTree.getZTreeObj(id);
    var nodes = treeObj.transformToArray(treeObj.getNodes());
    for(var i = 0; i< nodes.length; i++){
        treeObj.expandNode(nodes[i], false, false, false);
    }
}
//点击事件回调函数
function taggingOnClick(event, treeId, treeNode) {
    console.log('tagging');
    var treeObj = $.fn.zTree.getZTreeObj(treeId);
    if(treeNode.parentTId == null){
        treeObj.expandNode(treeNode);
        return;
    }
    treeObj.checkNode(treeNode, !treeNode.checked, true, true);
    var checkedNodes = treeObj.getCheckedNodes();

    //歌曲编辑页面语言标签预览特殊处理，放入本地存储
    var languageTags = [];
    for(var i = 0; i < checkedNodes.length; i++){
        $('#'+checkedNodes[i].tId).children('a').addClass('checked');
        var nodes = $('.tag-content').children();
        var flag = true;
        for(var j = 0; j < nodes.length; j++){
            if(nodes[j].innerText.trim() == checkedNodes[i].name){
                flag = false;
                break;
            }
        }
        if(flag && checkedNodes[i].tagType == 0){
            $('.tag-content').append(getTag(checkedNodes[i].name,checkedNodes[i].id));
            if(checkedNodes[i].pId == '1001075733'){
                $('#language').append(
                    '<span class="tx label label-default tag"  >'+checkedNodes[i].name+'</span>'
                );
                var lTag = {};lTag.type = 15; lTag.tagName = checkedNodes[i].name;lTag.tagId = checkedNodes[i].id;
                languageTags.push(lTag);
            }

        }
    }
    localStorage.setItem('languageTags',JSON.stringify(languageTags));
    // var nodes = treeObj.getSelectedNodes();
    console.log(treeNode);
    if(treeNode.checked == true && treeNode.tagType == 0){
        $('#'+treeNode.tId).children('a').addClass('checked');
        console.log($('.tag-content').children());
        var nodes = $('.tag-content').children();
        for(var i = 0; i < nodes.length; i++){
            if(nodes[i].innerText == treeNode.name) return;
        }
        // $('.tag-content').append(getTag(treeNode.name,treeNode.id));
    }else{
        $('#'+treeNode.tId).children('a').removeClass('checked');
        $('#'+treeNode.id).parent().remove();
        // $('#'+treeNode.tId).children('a').removeClass('checked');
        treeObj.checkNode(treeNode, false, true, true);
        treeNode.checked = false;
        var childrenNodes = getAllChildNode(treeNode, []);
        childrenNodes.forEach(function(node){
            $('#'+node.tId).children('a').removeClass('checked');
            $('input[value=' + node.id + ']').parent().remove();
        });
        // removeTag($('input[value=' + treeNode.id + ']').prev());
    }
    //console.log(nodes);
    //alert(treeNode.tId + ", " + treeNode.name);
};
function getTag(name,id){
    var tag_str = '<span action-type="check" title="'+name+'" class="W_btn_b W_btn_tag"> ' +
        '<span class="W_arrow_bor W_arrow_bor_l"><i class="S_line3"></i><em class="S_bg2_br"></em></span> ' +
        '<i id="'+id+'">'+name+'</i>&nbsp;&nbsp; <em class="fa fa-remove" onclick="removeTag(this);"></em> ' +
        '<input type="checkbox" name="taggingCheck" style="display:none;" ng-model="taggingCheck" checked="checked" value="'+id+'"> </span>';
    return tag_str;
}
function getFontCss(treeId, treeNode) {
    return (!!treeNode.highlight) ? {color:"rgb(255, 0, 10)", "font-weight":"bold"} : {color:"#333", "font-weight":"normal"};
}


/**
 * Created by hao.cheng on 2015/12/22.
 * tag_song_controller
 */
(function () {
    angular.module('app.routes').config(["$stateProvider", "$urlRouterProvider", function($stateProvider,$urlRouterProvider){
        $stateProvider
            .state('app.tagSong',{//便签歌曲页面
                url: '/tagSong',
                templateUrl: 'app/views/tags/tag_song/tag_song.html',
                controller:["$scope", "$state", function($scope,$state){
                    //监听键盘按钮事件
                    $scope.enter = function(event, searchValue){
                        if(event.keyCode == 13){
                            $state.go('app.tagSong.song',{tagName:searchValue});
                        }
                    };
                }]
            })
            .state('app.tagSong.song',{//标签歌曲列表
                url: '?:tagName&:firstIndex&:pageNo&:pageSize',
                views:{
                    'song-view':{
                        templateUrl: 'app/views/tags/tag_song/tag_song_list.html',
                        controller:["$http", "$scope", "$stateParams", "$state", function($http,$scope,$stateParams,$state){
                            if($stateParams.firstIndex == undefined || $stateParams.firstIndex == '')
                                $stateParams.firstIndex = 0;
                            $scope.maxSize = 5;
                            $stateParams.firstIndex = checkEmpty($stateParams.pageNo)?0:($stateParams.pageNo - 1) * 20;
                            $scope.itemsPerPage = checkEmpty($stateParams.pageSize)?100:$stateParams.pageSize;
                            $scope.bigCurrentPage = 1;
                            $http.jsonp(song_form_tag + '?callback=JSON_CALLBACK&tag='+$stateParams.tagName + '&firstIndex=' + $stateParams.firstIndex + '&maxResult='+$scope.itemsPerPage).success(function(res){
                                $scope.datas = res.data.resultlist;
                                paginationDiscreteness($scope,5,$scope.itemsPerPage,res.data.totalrecord,Math.ceil(res.data.totalrecord/ $scope.itemsPerPage),$stateParams.firstIndex / 20 + 1);
                                $scope.totalRecord = res.data.totalrecord;
                                $scope.maxResult = res.data.maxResult;
                                $scope.bigTotalItems = res.data.totalrecord;
                                $scope.totalPage = Math.ceil($scope.totalRecord/ $scope.itemsPerPage);
                                $scope.bigCurrentPage = $stateParams.firstIndex / 20 + 1;
                            });
                            $scope.choosePage = function(){//分页
                                $scope.firstIndex = ($scope.bigCurrentPage - 1) * 20;
                                $http.jsonp(song_form_tag + '?callback=JSON_CALLBACK&tag='+$stateParams.tagName + '&firstIndex=' + $scope.firstIndex ).success(function(res){//获取缺歌列表
                                    $scope.datas = res.data.resultlist;
                                    $scope.totalRecord = res.data.totalrecord;
                                    $scope.maxResult = res.data.maxResult;
                                    $scope.totalPage = Math.ceil($scope.totalRecord/ $scope.itemsPerPage);
                                    $state.go('app.tagSong.song',{ firstIndex:$scope.firstIndex});
                                });
                            }
                        }]
                    }
                }
            })
    }])
})();


/**
 * Created by kiraCheng on 2016/2/26.
 * top_list_controller
 */
angular
    .module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.top-list',{
            url: '/top-list',
            templateUrl: 'app/views/top/toplist/top-list.html',
            controller: ["$scope", "$http", "$timeout", "$rootScope", "display", "$state", "$stateParams", "SweetAlert", function($scope,$http,$timeout,$rootScope,display, $state, $stateParams,SweetAlert){
                $scope.topType = '';
                $scope.songs = '';
                $scope.tops = [];
                //$scope.tops = [{"name":"幽浮劲碟排行榜","id":12},{"name":"中国Top排行榜-内地","id":32},{"name":"UK排行榜周榜","id":55}];
                //$http.jsonp('http://media.karakal.com.cn:18089/toplist/app/tops?'+CALLBACK).success(function(res){
                //    console.log(res);
                //});
                $scope.download = function(top,num){//导出榜单表格
                    var toplistIds = [];
                    for(var i in top){
                        if(top[i].check){
                            toplistIds.push(top[i].id);
                        }
                    }
                    if(toplistIds.length < 1){
                        sweetAlertCommon(SweetAlert,'请选择需要导出的榜单','warning');
                        return;
                    }
                    var songCount = 12;
                    if(num != undefined && num != ''){
                        songCount = num;
                    }
                    console.log(toplistIds + '--'  + songCount);
                    var url = top_list_download + "?" + CALLBACK + "&toplistIds=" + toplistIds.join(',') + "&songCount=" + songCount;
                    if($scope.topListDate != undefined){
                        url += "&date=" + $scope.topListDate;
                    }
                    if($scope.compareDate != undefined){
                        url += "&compareDate=" + $scope.compareDate;
                    }
                    //else {
                    //    url += "&date=" + $scope.topListDate;
                    //}
                    //window.location.href = url;
                    window.open(url);
                };
                //$('#dateValue').datetimepicker(dateConfig);//日期选择
                $scope.addPlaySong = function(songId,copyId){//歌曲播放
                    addPlaySong(songId,copyId,SweetAlert);
                };
                $scope.searchTopByDate = function(date,compareDate, songCount){
                    searchTopByDate(date,compareDate,songCount,$state, $scope);
                };
                $scope.downloadCheckAll = function(tops){
                    for(var i in tops){
                        tops[i].check = !tops[i].check;
                    }
                };
                $http.jsonp(top_list_tops + "?" + CALLBACK + "&formatTree=false&hidden=0").success(function(res){
                    $scope.tops = res.data;
                });
                //打开日期框
                $scope.open = function(flag) {
                    $scope.dateStatus["opened" + flag] = true;
                };
                $scope.dateStatus = {
                    opened1: false,
                    opened2: false
                };
            }]
        })
        .state('app.top-list.day',{
            url: '/day',
            views:{
                'menu-list':{
                    templateUrl: 'app/views/top/toplist/top-list-menu.html',
                    controller: ["$scope", "$http", function($scope,$http){
                        $scope.$parent.topListTpye = "app.top-list.day.list";
                        var url = top_list_tops + "?" + CALLBACK;
                        $http.jsonp(url).success(function(res){
                            //$scope.$parent.tops = [];
                            for(var i = 0; i < res.data.length; i++){
                                if(res.data[i].name == '日榜'){
                                    $scope.menus = res.data[i].data;
                                    //for(var j = 0; j < res.data[i].data.length; j++){
                                    //    $scope.$parent.tops = $scope.$parent.tops.concat(res.data[i].data[j].data);
                                    //}
                                    //$http.jsonp(top_list_tops + "?" + CALLBACK + "&formatTree=false&hidden=0").success(function(res1){
                                    //    $scope.$parent.tops = res1.data;
                                    //});
                                }
                            }
                        });
                        $scope.$parent.topType = '日榜';
                    }]
                }
            }
        })
        .state('app.top-list.day.list',{
            url: '/:id?:date&:compareDate&:songCount',
            views: {
                'top-song-list':{
                    templateUrl: 'app/views/top/toplist/top-song-list.html',
                    controller: ["$scope", "$stateParams", "$http", "$filter", "SweetAlert", function($scope, $stateParams, $http, $filter,SweetAlert){
                        console.log($stateParams.date);
                        if(checkEmpty($stateParams.id)){
                            sweetAlertCommon(SweetAlert,'请选择具体榜单','warning');
                            return;
                        }
                        var url = top_list_info + $stateParams.id + ".json?" + CALLBACK;
                        if($stateParams.date != undefined){
                            url += "&date=" + $stateParams.date;
                        }
                        if($stateParams.compareDate != undefined){
                            url += "&compareDate=" + $stateParams.compareDate;
                        }
                        if($stateParams.songCount != undefined){
                            url += "&songCount=" + $stateParams.songCount;
                        }
                        $http.jsonp(url).success(function(res){
                            $scope.$parent.top_name = res.data.name;
                            //$scope.$parent.$parent.songs = res.data.songs;
                            $scope.$parent.$parent.name = res.data.name;
                            $scope.$parent.$parent.totalCount = res.data.totalCount;
                            $scope.$parent.$parent.topListDate = formatDate(res.data.captureDate, $filter);
                            //$scope.$parent.$parent.compareDate = formatDate(res.data.compareDate, $filter);
                            //$scope.$parent.$parent.songCount = res.data.totalCount;
                            if(res.data.songs != undefined && res.data.songs.length > 0){
                                pushData2TopList($scope, $http, res.data, $filter);
                            } else {
                                $scope.$parent.$parent.songs = [];
                            }
                            //console.log($scope.songs);
                        });
                    }]
                }
            }
        })
        .state('app.top-list.week',{
            url: '/week',
            views:{
                'menu-list':{
                    templateUrl: 'app/views/top/toplist/top-list-menu.html',
                    controller: ["$scope", "$http", function($scope, $http){
                        $scope.$parent.topListTpye = "app.top-list.week.list";
                        var url = top_list_tops + "?" + CALLBACK;
                        $http.jsonp(url).success(function(res){
                            for(var i in res.data){
                                //console.log(i);
                                //console.log(res.data[i]);
                                if(res.data[i].name == '周榜'){
                                    $scope.menus = res.data[i].data;
                                    //$scope.$parent.tops = [];
                                    //for(var j = 0; j < res.data[i].data.length; j++){
                                    //    $scope.$parent.tops = $scope.$parent.tops.concat(res.data[i].data[j].data);
                                    //}
                                    //$http.jsonp(top_list_tops + "?" + CALLBACK + "&formatTree=false&hidden=0").success(function(res1){
                                    //    $scope.$parent.tops = res1.data;
                                    //});
                                }
                            }
                        });
                        $scope.$parent.topType = '周榜';
                    }]
                }
            }
        })
        .state('app.top-list.week.list',{
            url: '/:id?:date&:compareDate&:songCount',
            views: {
                'top-song-list':{
                    templateUrl: 'app/views/top/toplist/top-song-list.html',
                    controller: ["$scope", "$stateParams", "$http", "$filter", "SweetAlert", function($scope, $stateParams, $http, $filter,SweetAlert){
                        if(checkEmpty($stateParams.id)){
                            sweetAlertCommon(SweetAlert,'请选择具体榜单','warning');
                            return;
                        }
                        var url = top_list_info + $stateParams.id + ".json?" + CALLBACK;
                        if($stateParams.date != undefined){
                            url += "&date=" + $stateParams.date;
                        }
                        if($stateParams.compareDate != undefined){
                            url += "&compareDate=" + $stateParams.compareDate;
                        }
                        if($stateParams.songCount != undefined){
                            url += "&songCount=" + $stateParams.songCount;
                        }
                        $http.jsonp(url).success(function(res){
                            $scope.$parent.top_name = res.data.name;
                            //$scope.$parent.$parent.songs = res.data.songs;
                            $scope.$parent.$parent.name = res.data.name;
                            $scope.$parent.$parent.totalCount = res.data.totalCount;
                            $scope.$parent.$parent.topListDate = formatDate(res.data.captureDate, $filter);
                            //$scope.$parent.$parent.compareDate = formatDate(res.data.compareDate, $filter);
                            //$scope.$parent.$parent.songCount = res.data.totalCount;
                            if(res.data.songs != undefined && res.data.songs.length > 0){
                                pushData2TopList($scope, $http, res.data, $filter);
                            } else {
                                $scope.$parent.$parent.songs = [];
                            }
                            //console.log($scope.songs);
                        });
                    }]
                }
            }
        })
}]);
var dateConfig = {//日期插件配置
    lang: 'ch',
    timepicker: false,
    format: 'Y-m-d',
    formatDate: 'Y-m-d'
};
function searchTopByDate(date,compareDate,songCount,$state, $scope){
    $state.go($scope.topListTpye, {date: date, compareDate: compareDate, songCount: songCount});
}
function pushData2TopList($scope, $http, data, $filter){
    //$scope.$parent.$parent.topListDate = formatDate(data.captureDate, $filter);
    //$scope.$parent.$parent.compareDate = formatDate(data.compareDate, $filter);
    if(data.songs.length <= 0){
        $scope.$parent.$parent.songs = [];
        return;
    }
    var songIds = new Array();
    for(var i = 0; i < data.songs.length; i++){
        songIds.push(data.songs[i].siteId);
    }
    var url = song_form_list_mls + '/' + data.site + '/song.json?' + CALLBACK + '&ids=' + songIds.join(',');
    $http.jsonp(url).success(function(res){
        for(var j in data.songs){
            var song = data.songs[j];
            for(var k in res.data){
                if(song.siteId == res.data[k].siteId){
                    if(res.data[k].cids != undefined){
                        song.cids = res.data[k].cids;
                    }
                    break;
                }
            }
        }
        $scope.$parent.$parent.songs = data.songs;
    });
}
//格式化日期类型
function formatDate(date, $filter) {    //ui.bootstrap.datepicker format日期类型
    if (date == undefined || date.toString() == 'NaN') {
        return "";
    }
    var datefilter = $filter('date'),
        formattedDate = datefilter(date, 'yyyy-MM-dd');
    return formattedDate;
}

/**
 * Created by hao.cheng on 2016/8/23.
 */
(function () {
    'use strict';

    angular.module('app.routes').config(AlbumTaskConfig);
    AlbumTaskConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
    function AlbumTaskConfig($stateProvider, helper) {
        $stateProvider
            .state('app.albumTask',{
                url: '/albumTask',
                views: {
                    '': {
                        templateUrl: helper.basepath('partials/container-tpl.html'),
                        controller: 'AlbumTaskHeadController'
                    }
                }
            })
            .state('app.albumTask.module', {
                url: '/module?:module&:projectId&:pageNo&:pageSize&:albumIds&:artistName&:albumName&:status&:tagBeans&:style' +
                '&:mscoreMin&:mscoreMax&:hotScoreMax&:hotScoreMin&:taskStatus&:uid&:lastEditSearch&:distributionStartTime&:distributionEndTime&:completeStartTime&:completeEndTime&:createStartTime&:createEndTime',
                views: {
                    'condition': {
                        templateUrl: helper.basepath('uc/album/albumtask-condition.html')
                    },
                    'data-list': {
                        templateUrl: helper.basepath('uc/album/albumtask-list.html'),
                        controller: 'AlbumTaskListController'
                    }
                }
            })
    }

    /*专辑存量工单系列controller*/
    angular.module('app.routes').controller('AlbumTaskHeadController', ["$scope", "$state", "$stateParams", "$http", "$cookies", "SweetAlert", function ($scope, $state, $stateParams, $http, $cookies, SweetAlert) {
        $scope.container = new Container('专辑存量工单');
        $scope.taskSwitch = function (module, projectId) {
            taskSwitch(module, projectId, $scope, $state);
        };
        //获取标签
        getTagList(2,$scope,$stateParams,$http,$cookies,SweetAlert,1);
    }]);
    angular.module('app.routes').controller('AlbumTaskListController', ["$scope", "TaskService", "$stateParams", "SweetAlert", "$state", "$http", function ($scope, TaskService, $stateParams, SweetAlert, $state, $http) {
        taskListService($stateParams, $scope, TaskService);
        taskLoadSearch('album', $scope, TaskService);
        $scope.edit = function (data, jump) {
            editJump($http, 'album', data, $state, SweetAlert, jump);
        }
    }]);
})();
/**
 * Created by hao.cheng on 2016/8/22.
 */
(function () {
    'use strict';

    angular.module('app.routes').config(ArtistTaskConfig);
    ArtistTaskConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
    function ArtistTaskConfig($stateProvider, helper) {
        $stateProvider
            .state('app.artistTask', {
                url: '/artistTask',
                views: {
                    '': {
                        templateUrl: helper.basepath('partials/container-tpl.html'),
                        controller: 'ArtistTaskHeadController'
                    }
                }
            })
            .state('app.artistTask.module', {
                url: '/module?:module&:projectId&:pageNo&:pageSize&:artistIds&:artistName&:albumName&:status&:tagBeans&:style' +
                '&:mscoreMin&:mscoreMax&:hotScoreMax&:hotScoreMin&:taskStatus&:uid&:lastEditSearch&:distributionStartTime&:distributionEndTime&:completeStartTime&:completeEndTime&:createStartTime&:createEndTime',
                views: {
                    'condition': {
                        templateUrl: helper.basepath('uc/artist/artisttask-condition.html')
                    },
                    'data-list': {
                        templateUrl: helper.basepath('uc/artist/artisttask-list.html'),
                        controller: 'ArtistTaskListController'
                    }
                }
            })
    }

    /*艺人存量工单系列controller*/
    angular.module('app.routes').controller('ArtistTaskHeadController', ["$scope", "$state", "$stateParams", "$http", "$cookies", "SweetAlert", function ($scope, $state, $stateParams, $http, $cookies, SweetAlert) {
        $scope.container = new Container('艺人存量工单');
        $scope.taskSwitch = function (module, projectId) {
            taskSwitch(module, projectId, $scope, $state);
        };
        //获取标签
        getTagList(1,$scope,$stateParams,$http,$cookies,SweetAlert,1);
    }]);
    angular.module('app.routes').controller('ArtistTaskListController', ["$scope", "TaskService", "$stateParams", "SweetAlert", "$state", "$http", function ($scope, TaskService, $stateParams, SweetAlert, $state, $http) {
        taskListService($stateParams, $scope, TaskService);
        taskLoadSearch('artist', $scope, TaskService);
        $scope.edit = function (data, jump) {
            editJump($http, 'artist', data, $state, SweetAlert, jump);
        }
    }])
})();

/**
 * Created by YuChunzhuo on 2016/1/5.
 */
'use strict';
angular.module('app.routes').config(checkAlbumConfig);
checkAlbumConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
function checkAlbumConfig($stateProvider, helper){
    $stateProvider
        .state('app.uc_task_check_album',{
            url: '/uc_task_check_album?:pId&:taskStatus&:uid&:pageNo&:pageSize&:taskStatusList&:albumIds&:albumName&:artistName&:urgentDegree&:cpCreateStartTime&:cpCreateEndTime&:sendStartTime&:sendEndTime&:editUserName&:auditUserName&:hotScoreMin&:hotScoreMax&:status&:mscoreMin&:mscoreMax&:tagBeans&:style',
            templateUrl: 'app/views/uc/check_album/uc_task_check_album.html',
            controller: ["$scope", "$http", "$stateParams", "$state", "$timeout", "$rootScope", "display", "$window", "$filter", "$cookies", "SweetAlert", "TaskService", function($scope,$http,$stateParams,$state,$timeout,$rootScope,display, $window, $filter, $cookies,SweetAlert, TaskService){
                $scope.tempscope = tempTagChoices;
                $scope.pageType = "";
                $scope.ucSongGitUsers = [];
                $scope.form = new Object();
                $scope.datas = [];
                $scope.userRole = 'cyr';
                $scope.taskStatus = $stateParams.taskStatus;
                $scope.pId = $stateParams.pId;
                $scope.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
                $scope.ckTagError = {};
                //获取项目的自定义权限分配模板（A,B,AB之类的）
                $scope.authoritySetting = [];

                //获取项目的流程
                getTaskContent($scope, $stateParams, $http);
                //获取标签
                getTagList(2,$scope,$stateParams,$http,$cookies,SweetAlert,1);
                //获取所有用户
                if($scope.$parent.users == undefined || $scope.$parent.users.length <= 0){
                    getAllUser($http, function(users){
                        $scope.$parent.users = users;
                    });
                }
                $scope.changeTagType = function (type) {
                    for(var i = 0; i < $scope.form.tagBeans.length; i++){
                        if(!checkEmpty($scope.form.tagBeans[i].type)){
                            $scope.form.tagBeans[i].type = type;
                        }
                    }
                };  

                //分配项目
                $scope.distributionTask = function(userId){
                    console.log(userId);
                    var authSetting = $scope.form.task_auth_setting;
                    var taskIds = getPropertyFromCheckBox($scope.datas, "isCheck", true, "taskId");
                    if(isPropertyEmpty(userId)){
                        return sweetAlertCommon(SweetAlert, '请选择分配人', 'warning');
                    }
                    if(taskIds.length <= 0){
                        return sweetAlertCommon(SweetAlert, '请选择分配数据', 'warning');
                    }
                    //分配任务
                    assignTaskNewSong(taskIds, authSetting.flowId, authSetting.auth, userId, SweetAlert, $scope, TaskService);
                };
                //$scope.export = function(){ //导出数据
                //    exportData($scope);
                //};
                //复选框的单个选择
                $scope.chk = function(data, datas){
                    $scope.selectedDataIds = getPropertyFromCheckBox(datas, 'isCheck', true, 'albumId');
                };
                //复选框的全选
                $scope.checkAll = function(all, datas){
                    selectAll($scope, datas, 'isCheck', 'allIsCheck');
                    $scope.selectedDataIds = getPropertyFromCheckBox(datas, 'isCheck', true, 'albumId');
                };
                //分页函数
                $scope.choosePage = function(pageType){
                    //$stateParams.pageNo = $scope.params.currentPage;
                    $state.go('app.uc_task_check_album.' + pageType, {pageNo: $scope.form.currentPage});
                };
                //点击查询按钮
                $scope.paramsSearchClick = function(type){
                    //下面处理搜索字段
                    var datas = cloneOneObject($scope.form);
                    datas = iteratorData(datas, $filter);
                    //对错误分类进行处理
                    // var ckTagErrors = [];
                    // for(var i = 1; i <= 5; i++){
                    //     if($scope.ckTagError["tag" + i]){
                    //         ckTagErrors.push(i);
                    //     }
                    // }
                    // console.log(ckTagErrors);
                    // datas.ckTagErrors = ckTagErrors.join(",");
                    var propertys = ['projectId','taskStatus','taskStatusList','albumIds','albumName','artistName','createStartTime','createEndTime','distributionStartTime','distributionEndTime','completeStartTime','completeEndTime','status','karakal_status','ckResult','ckTagErrors','scoreStart','scoreEnd','sendStartTime','sendEndTime','editUserName','auditUserName','urgentDegree','uid','cpCreateStartTime','cpCreateEndTime','tags','hotScoreMin','hotScoreMax','status','mscoreMin','mscoreMax','tagBeans','style'];
                    datas = keepObjectProperty(propertys, datas);

                    datas.pId = $stateParams.pId;
                    datas.taskStatus = $stateParams.taskStatus;
                    datas.taskStatusList = $stateParams.taskStatusList;

                    if(!checkEmpty(datas.tagBeans)) datas.tagBeans = angular.toJson(datas.tagBeans);    //标签特殊处理

                    console.log(datas);

                    $state.go('app.uc_task_check_album.' + type, datas,{reload: true,inherit: false});
                };
                //查看素材信息
                $scope.showMaterialInfo = function(type, data){
                    openNewTab(type, data, 'Info', $state);
                };
                //跳转到抽查页面
                $scope.jumpToCheck = function(data){
                    jumpToCheck($state, "album", data);
                };
                //重置搜索条件
                $scope.reset = function(){
                    $scope.form = {};
                    $scope.form.task_auth_setting = $scope.authoritySetting[0];
                    if(!isPropertyEmpty($stateParams.uid) && ($scope.pageType == "uncompelete" || ($scope.pageType == "compelete" && $scope.userRole == "cyr"))){
                        $scope.form.uid = $stateParams.uid;
                    }
                    for(var n in $scope.ckTagError){
                        $scope.ckTagError[n] = false;
                    }
                    clearUploadExcel($http,2);
                };
                //导出excel
                //$scope.export = function(){
                //    exportMaterialExcel('album', $stateParams, $scope.datas);
                //};
                //打开日期框
                $scope.open = function(flag) {
                    $scope.dateStatus["opened" + flag] = true;
                };
                $scope.dateStatus = {
                    opened1: false, opened2: false, opened3: false, opened4: false, opened5: false, opened6: false, opened7: false, opened8: false
                };
            }]
        })
        .state('app.uc_task_check_album.unassigned',{
            url: '/unassigned',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_album/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout, $rootScope, display){
                        ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree);

                        $scope.$parent.pageType = "unassigned";
                        $stateParams.projectId = $stateParams.pId;
                        $stateParams.isQueryExcel = 1;
                        ucCheckGetData("album", $stateParams, $scope, $http);
                    }]
                }
            }
        })
        .state('app.uc_task_check_album.assigned',{
            url: '/assigned?:distributionStartTime&:distributionEndTime',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_album/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout,$rootScope,display){
                        ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree);

                        $scope.$parent.pageType = "assigned";
                        $stateParams.projectId = $stateParams.pId;
                        ucCheckGetData("album", $stateParams, $scope, $http);
                    }]
                }
            }
        })
        .state('app.uc_task_check_album.uncompelete',{
            url: '/uncompelete?:distributionStartTime&:distributionEndTime',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_album/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout,$rootScope,display){
                        $stateParams.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
                        ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree);
                        $scope.$parent.pageType = "uncompelete";
                        $stateParams.projectId = $stateParams.pId;
                        ucCheckGetData("album", $stateParams, $scope, $http);
                    }]
                }
            }
        })
        .state('app.uc_task_check_album.compelete',{
            url: '/compelete?:completeStartTime&:completeEndTime&:ckResult&:ckTagErrors',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_album/uncompelete.html',
                    resolve: helper.resolveFor('localytics.directives'),
                    controller: ["$scope", "$http", "$stateParams", "$cookies", function($scope, $http, $stateParams, $cookies){
                        ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree);

                        $scope.$parent.pageType = "compelete";
                        $stateParams.projectId = $stateParams.pId;
                        ucCheckGetData("album", $stateParams, $scope, $http);
                        $scope.tagErrorChoose = function(t){ //添加错误分类
                            tagErrorChoose(t,$scope);
                        };
                        $scope.ckTagErrorsRemove = function(c){
                            $scope.form.ckTagErrors.remove(c);
                        }
                    }]
                }
            }
        })
}
/**
 * Created by hao.cheng on 2015/11/24.
 * 权限管理controller
 */
angular.module('app.routes').config(ucAuthConfig);
ucAuthConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
function ucAuthConfig($stateProvider, helper){
    $stateProvider
        .state('app.authority',{    //分配权限
            url: '/authority',
            templateUrl: 'app/views/uc/authority/uc_users.html',
            controller: ["$http", "$scope", "$cookies", function($http,$scope,$cookies){
                getAllUser($http,function(users){
                    $scope.datas = users;
                    var userIds = [];
                    for(var i = 0; i < $scope.datas.length; i ++){
                        userIds.push($scope.datas[i].id);
                    }
                    $http.jsonp(uc_user_role + '?callback=JSON_CALLBACK&type=0&ids=' + userIds.join(',')).success(function(data){
                        for(var i = 0; i < $scope.datas.length; i ++){
                            $scope.datas[i].roles = data.beanList[i].roleList;
                        }
                        // console.log($scope.datas);
                    });

                });
                //$http.get(git_user+ '&private_token=' +  $cookies.get('kpk')).success(function(res){
                //    $scope.datas = res;
                //    var userIds = [];
                //    for(var i = 0; i < $scope.datas.length; i ++){
                //        userIds.push($scope.datas[i].id);
                //    }
                //    $http.jsonp(uc_user_role + '?callback=JSON_CALLBACK&type=0&ids=' + userIds.join(',')).success(function(data){
                //        for(var i = 0; i < $scope.datas.length; i ++){
                //            $scope.datas[i].roles = data.beanList[i].roleList;
                //            //if( $scope.datas[i].id == data.beanList[j].userId){
                //            //    $scope.datas[i].roles = data.beanList[j].roleList;
                //            //}
                //        }
                //        console.log($scope.datas);
                //    });
                //    //console.log($scope.datas);
                //});
            }]
        })
        .state('app.role',{     //设置角色
            url: '/role',
            templateUrl: 'app/views/uc/authority/uc_roles.html',
            resolve: helper.resolveFor('ztree'),
            controller: ["$http", "$scope", "permissions", "SweetAlert", function($http,$scope,permissions,SweetAlert){
                $http.jsonp(uc_role + '?callback=JSON_CALLBACK').success(function(res){
                    $scope.roles = res.roleList;
                    for(var i =0;i < $scope.roles.length;i++){
                        $scope.roles[i].isCheck = false;
                    }
                });
                //复选框的单个选择
                var str = "";
                var flag = '';
                $scope.chk = function(data, checkb){
                    if(flag == 'a'){//在全选的基础上操作
                        str = $scope.choseArr.join(',') + ',';
                    }
                    if(checkb != true){//选中
                        str = str + data.id + ',';
                        data.isCheck = true;
                    } else {
                        str = str.replace(data.id + ',', '');//取消选中
                        data.isCheck = false;
                    }
                    if(str.length = 0){
                        permissions.choseArr = [];
                    } else {
                        permissions.choseArr = (str.substr(0,str.length-1)).split(',');
                    }
                    console.log(permissions.choseArr);
                }

                $scope.delRole = function(){    //删除角色
                    if(permissions.choseArr == undefined || permissions.choseArr.length < 1){
                        sweetAlertCommon(SweetAlert,'请选择要删除的角色','warning');
                    }else{
                        $http.jsonp(uc_delRole + '?callback=JSON_CALLBACK&ids=' + permissions.choseArr.join(','))
                            .success(function(res){
                                if(res.returnCode == '000000'){
                                    sweetAlertCommon(SweetAlert,'删除成功','success');
                                    location.reload();
                                }else{
                                    sweetAlertCommon(SweetAlert,'删除失败','error');
                                }
                            });
                    }
                }
            }]
        })
}
angular.module('app.routes').controller('RoleCtrl',["$scope", "$http", "$uibModalInstance", "user", "permissions", "SweetAlert", function($scope,$http,$uibModalInstance,user,permissions,SweetAlert){  //角色列表弹出层controller
    $scope.user = user;
    $http.jsonp(uc_user_role + '?callback=JSON_CALLBACK&type=1&ids=' + user.id).success(function(res){
        $scope.roles = res.beanList[0].roleList;
    });
    //复选框的单个选择
    var str = "";
    var flag = '';
    $scope.chk = function(data, checkb){
        console.log(checkb);
        if(flag == 'a'){//在全选的基础上操作
            str = $scope.choseArr.join(',') + ',';
        }
        if(checkb != true){//选中
            str = str + data.id + ',';
            data.isCheck = true;
        } else {
            str = str.replace(data.id + ',', '');//取消选中
            data.isCheck = false;
        }
        if(str.length = 0){
            permissions.choseArr = [];
        } else {
            permissions.choseArr = (str.substr(0,str.length-1)).split(',');
        }
        //console.log(permissions.choseArr);
        //single_chk(data,checkb,flag,str,$scope);
    }
    $scope.cancel = function () {   //取消按钮
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function () {
        var params = [];
        for(var i = 0; i < permissions.choseArr.length; i ++){
            var param = {};
            param.roleId = permissions.choseArr[i];
            param.userId = user.id;
            param.userName = user.name;
            params.push(param);
        }
        $http.jsonp(uc_adduser2role + '?callback=JSON_CALLBACK&data=' + JSON.stringify(params)).success(function(res){
            if(res.returnCode == '000000'){
                $uibModalInstance.dismiss('cancel');
                sweetAlertCommon(SweetAlert,'成功分配权限','success');
                location.reload();
            }else{
                $uibModalInstance.dismiss('cancel');
                sweetAlertCommon(SweetAlert,'分配权限失败','error');
            }
        });
    }
}]);
function single_chk(data, checkb,flag,str,$scope){
    if(flag == 'a'){//在全选的基础上操作
        str = $scope.choseArr.join(',') + ',';
    }
    console.log(checkb);
    if(checkb != true){//选中
        str = str + data.id + ',';
        data.isCheck = true;
    } else {
        str = str.replace(data.id + ',', '');//取消选中
        data.isCheck = false;
    }
    console.log(str);
    if(str.length = 0){
        $scope.choseArr = [];
    } else {
        $scope.choseArr = (str.substr(0,str.length-1)).split(',');
    }
    console.log($scope.choseArr);
}
angular.module('app.routes').controller('UserCtrl',["$scope", "$http", "$uibModalInstance", "id", "SweetAlert", function($scope,$http,$uibModalInstance,id,SweetAlert){    //角色下的用户列表弹出层
    $scope.id = id;
    $http.jsonp(uc_role_users + '?callback=JSON_CALLBACK&ids=' + id).success(function(res){
        $scope.datas = res.userRoleList;

    });
    $scope.cancel = function () {   //取消按钮
        $uibModalInstance.dismiss('cancel');
    };
    $scope.removeUser = function(userId,id){
        $http.jsonp(uc_role_deluser + '?callback=JSON_CALLBACK&ids=' + userId + '&roleId=' + id).success(function(res){
            if(res.returnCode == '000000'){
                $uibModalInstance.dismiss('cancel');
                sweetAlertCommon(SweetAlert,'删除成功','success');
            }else{
                sweetAlertCommon(SweetAlert,'删除失败','success');
            }
        });
    }
}])
angular.module('app.routes').controller('AuthorityCtrl',AuthorityCtrl);
function AuthorityCtrl($scope,$http,$uibModalInstance,id,SweetAlert){
    // helper.resolveFor('ztree');
    $scope.id = id;
    $http.jsonp(uc_allauth + '?callback=JSON_CALLBACK&ids=0').success(function(res){
        var nodes = [];
        for(var i = 0; i <res.authList.length; i ++ ){
            var auth = {};
            auth.id = res.authList[i].id;
            auth.pId = res.authList[i].pid;
            auth.name = res.authList[i].name;
            auth.open = true;
            nodes.push(auth);
        };
        $http.jsonp(uc_role_auth + '?callback=JSON_CALLBACK&ids=' + id).success(function(data){
            for(var i = 0; i < nodes.length; i++){
                for(var j = 0; j < data.authList.length; j ++){
                    var auth = {};
                    auth.id = data.authList[j].id;
                    auth.pId = data.authList[j].pid;
                    auth.name = data.authList[j].name;
                    auth.open = true;
                    if(JSON.stringify(nodes[i]) == JSON.stringify(auth)){
                        console.log(nodes[i]);
                        nodes[i].checked = true;
                    }
                }
            }
            $.fn.zTree.init($("#authorityTree"), setting_auth, nodes);
        });
    });
    $scope.cancel = function () {   //取消按钮
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(id){   //确认按钮
        console.log(id + '---' +authIds);
        var params = [];
        for(var i = 0; i < authIds.length; i++){
            var param = {};
            param.roleId = id;
            param.authId = authIds[i];
            params.push(param);
        }
        $http.jsonp(uc_role_addauth + '?callback=JSON_CALLBACK&data=' + JSON.stringify(params)).success(function(res){
            if(res.returnCode == '000000'){
                $uibModalInstance.dismiss('cancel');
                sweetAlertCommon(SweetAlert,'保存成功','success');
            }else{
                sweetAlertCommon(SweetAlert,'保存失败','error');
            }
        });
    }
}
AuthorityCtrl.$inject = ["$scope", "$http", "$uibModalInstance", "id", "SweetAlert"];
var authIds = [];
function zTreeOnCheck_auth(event, treeId, treeNode) {
    authIds = [];
    var zTree = $.fn.zTree.getZTreeObj(treeId);
    var nodes = zTree.getCheckedNodes(true);
    for(var i = 0; i < nodes.length; i ++){
        authIds.push(nodes[i].id);
    }
    console.log(authIds);
    //console.log(treeNode.tId + ", " + treeNode.name + "," + treeNode.checked);
};
var setting_auth = {
    //view: {
    //    addHoverDom: addHoverDom,
    //    removeHoverDom: removeHoverDom,
    //    selectedMulti: false
    //},
    check: {
        enable: true,
        chkboxType: {
            "Y": "ps",
            "N": "ps"
        }
    },
    data: {
        simpleData: {
            enable: true
        },
        //keep: {
            //parent:true
        //}
    },
    //edit: {
    //    enable: true,
    //    showRemoveBtn: false,
    //    //showRenameBtn: false
    //},
    callback:{
        //beforeRemove:zTreeBeforeRemove,
        onCheck: zTreeOnCheck_auth,
        //beforeRename: zTreeBeforeRename
    }
};
angular.module('app.routes').controller('AddRoleCtrl',["$scope", "$http", "$uibModalInstance", "SweetAlert", function($scope,$http,$uibModalInstance,SweetAlert){
    $scope.cancel = function () {   //取消按钮
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(){   //确认按钮
        var param = JSON.stringify($scope.role);
        $http.jsonp(uc_saveRole + '?callback=JSON_CALLBACK&data=' + param).success(function(res){
            if(res.returnCode == '000000'){
                $uibModalInstance.dismiss('cancel');
                sweetAlertCommon(SweetAlert,'新增成功','success');
                location.reload();
            }else{
                $scope.error = '新增失败';
            }
        });
        console.log($scope.role)

    }
}])
angular.module('app.routes').controller('RAuthorityCtrl',["$scope", "$http", "$uibModalInstance", function($scope,$http,$uibModalInstance){
    $scope.cancel = function () {   //取消按钮
        $uibModalInstance.dismiss('cancel');
    };
}]);
/**
 * Created by YuChunzhuo on 2015/12/29.
 */
angular.module('app.routes').config(["$stateProvider", "$urlRouterProvider", function($stateProvider,$urlRouterProvider){
    $stateProvider
        .state('app.uc_task_catalog',{
            url: '/uc_atask_catalog?:pId&:status&:taskStatus&:uId',
            templateUrl: 'app/views/uc/catalog/uc_task_catalog.html',
            controller: ["$scope", "$http", "$stateParams", function($scope,$http,$stateParams){
                $scope.params = new Object();
                $scope.datas = [];
                $scope.choseArr = [];
                //用于判断当前url是否有userId参数
                $scope.userId = $stateParams.uId;
                if($scope.userId == undefined & $stateParams.taskStatus == 1){
                    $scope.userId = -1;
                }
                $scope.taskStatus = $stateParams.taskStatus;
                //if($stateParams.status == 0){
                //    $scope.show = true;
                //}else{
                //    $scope.show = false;
                //}
                $scope.pId = $stateParams.pId;
                $scope.uId = _session.id;
                var param = {};
                param.pId = $stateParams.pId;
                //param.uId = -1;
                param.status = $stateParams.status;
                var p_param= {};
                p_param.id = $stateParams.pId;
                var p_type = '';
                //获取项目的流程
                $http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data='+ JSON.stringify(p_param)).success(function(res){
                    $scope.p_type = res.list[0].type;
                    $scope.cyr_list = [];
                    for(var i = 0; i < res.list[0].cyrList.length;i++){
                        $scope.cyr_list.push(res.list[0].cyrList[i]);
                    }
                    for(var i = 0; i < res.list[0].fzrList.length;i ++){
                        $scope.cyr_list.push(res.list[0].fzrList[i]);
                    }
                    //console.log($scope.cyr_list);
                    //p_type = $scope.p_type;
                    //if( $scope.p_type == 1){    //新歌流程
                    //    reflectData('song','歌曲',$scope,$http,param)
                    //}
                    //if($scope.p_type == 3){ //艺人流程
                    //    reflectData('artist','艺人',$scope,$http,param);
                    //}
                    //if($scope.p_type == 4){ //专辑流程
                    //    reflectData('album','专辑',$scope,$http,param);
                    //}
                    //if($scope.p_type == 5){ //歌曲流程
                    //    reflectData('song','歌曲',$scope,$http,param);
                    //}
                });
                $scope.user = undefined;
                $scope.selectUser = function(v){
                    $scope.user = {};
                    $scope.user.name = v.name;
                    $scope.user.id = v.uId;
                };
                $scope.removeUser = function(){ //去除分配人的方法
                    console.log($scope.user);
                    $scope.user = undefined;
                };
                $scope.selectCyr = function(v){ //select选择参与人分配任务的方法
                    $scope.user = {};
                    $scope.user.name = v.uName;
                    $scope.user.id = v.uId;
                    console.log(v);
                };
                $scope.distributionTask = function(uId){
                    //分配任务
                    assignTask('cp', uId, $scope, $stateParams, $http);
                };
                $scope.export = function(){ //导出数据
                    console.log($scope.p_type);
                    var type = '';
                    if($scope.choseArr.length < 1){
                        alert('请选择要导出的数据');
                        return;
                    }
                    if($scope.p_type == 1)
                        type = 'song';
                    if($scope.p_type == 3)
                        type = 'artist';
                    if($scope.p_type == 4)
                        type = 'album';
                    if($scope.p_type == 5){
                        type = 'song';
                        console.log(type)
                    }
                    var url = '/mls/' + type + '/excel?ids=' +  $scope.choseArr.join(',');
                    location.href = url;
                };
                //复选框的单个选择
                $scope.chk = function(data, checkb){
                    ucTaskSelectOne($scope, data, checkb);
                };
                //复选框的全选
                $scope.checkAll = function(all, datas){
                    ucTaskSelectAll($scope, all, datas);
                };
                //分页函数
                $scope.choosePage = function(){
                    var id = getIdByName($scope.params.selectedUser, $scope.cyr_list);
                    $stateParams.pageNo = $scope.params.currentPage;
                    getUcTaskDatas('copyright', id, $scope, $stateParams, $http);
                };
                //改变了select的负责人
                $scope.changeUser = function(){
                    var id = getIdByName($scope.params.selectedUser, $scope.cyr_list);
                    getUcTaskDatas('copyright', id, $scope, $stateParams, $http);
                }
            }]
        })
        //未完成
        .state('app.uc_task_catalog.uncompelete',{
            url: "/uncompelete?:isCrash&:assignTimeS&:assignTimeE&:songName&:artistName&:productAlbumName&:cid&:newOrFirst&:highQuality&:projectName",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/catalog/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$filter", function($scope,$http,$stateParams,$filter){
                        console.log('未完成');
                        fillSearchCondition($scope,$stateParams,$filter);
                        getUcTaskDatas('copyright', $stateParams.uId, $scope, $stateParams, $http);
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                    }]
                }
            }
        })
        //已分配
        .state('app.uc_task_catalog.assigned',{
            url: "/assigned",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/catalog/assigned.html',
                    controller: ["$scope", "$stateParams", "$http", "$filter", function($scope, $stateParams, $http, $filter){
                        console.log('已分配');
                        getUcTaskDatas('copyright', $stateParams.uId, $scope, $stateParams, $http);
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                    }]
                }
            }
        })
        //未分配
        .state('app.uc_task_catalog.unassigned',{
            url: "/unassigned",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/catalog/unassigned.html',
                    controller: ["$scope", "$stateParams", "$http", "$filter", function($scope, $stateParams, $http, $filter){
                        console.log('未分配');
                        getUcTaskDatas('copyright', $stateParams.uId, $scope, $stateParams, $http);
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 0){
                                $scope.dateStatus.opened0 = true;
                            } else if (flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            } else if (flag == 3){
                                $scope.dateStatus.opened3 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened0: false,
                            opened1: false,
                            opened2: false,
                            opened3: false
                        };
                    }]
                }
            }
        })
        //已完成
        .state('app.uc_task_catalog.compelete',{
            url: "/compelete?:isCrash&:assignTimeS&:assignTimeE&:songName&:artistName&:productAlbumName&:cid&:newOrFirst&:highQuality&:projectName",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/catalog/compelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$filter", function($scope,$http,$stateParams,$filter){
                        console.log('已完成');
                        fillSearchCondition($scope,$stateParams,$filter);
                        getUcTaskDatas('copyright', $stateParams.uId, $scope, $stateParams, $http);
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                    }]
                }
            }
        })
}]);
//补充搜索条件
function fillSearchCondition($scope,$stateParams,$filter){
    console.log($scope.params);
    if($stateParams.taskStatus != undefined){
        $scope.params.taskStatus = $stateParams.taskStatus;
    }
    if($stateParams.isCrash != undefined){
        $scope.params.isCrash = $stateParams.isCrash;
    }
    //if($stateParams.assignTimeS != undefined){
    if($scope.params.dt1 != undefined){
        //$scope.params.dt1 = $stateParams.assignTimeS;
        var formattedDate = formatDate($scope.params.dt1, $filter);
        console.log(formattedDate);
        $scope.params.dt1 = formattedDate;
    }
    //if($stateParams.assignTimeE != undefined){
    if($scope.params.dt2 != undefined){
        //$scope.params.dt2 = $stateParams.assignTimeE;
        var formattedDate = formatDate($scope.params.dt2, $filter);
        $scope.params.dt2 = formattedDate;
    }
    if($stateParams.songName != undefined){
        $scope.params.songName = $stateParams.songName;
    }
    if($stateParams.artistName != undefined){
        $scope.params.artistName = $stateParams.artistName;
    }
    if($stateParams.productAlbumName != undefined){
        $scope.params.productAlbumName = $stateParams.productAlbumName;
    }
    if($stateParams.cid != undefined){
        $scope.params.cid = $stateParams.cid;
    }
    if($stateParams.newOrFirst != undefined){
        $scope.params.newOrFirst = $stateParams.newOrFirst;
    }
    if($stateParams.highQuality != undefined){
        $scope.params.highQuality = $stateParams.highQuality;
    }
    if($stateParams.projectName != undefined){
        $scope.params.projectName = $stateParams.projectName;
    }
}
/**
 * Created by YuChunzhuo-Dev on 2016/8/2.
 */
(function () {
    'use strict';
    angular.module('app.routes').service('CheckService',CheckService);
    CheckService.$inject = ['$http','SweetAlert'];
    function CheckService($http,SweetAlert) {
        this.service = {
            'batchDelete': batchDelete
        };
        function batchDelete(type, data) {
            return $http(new PostSetup(_search_url + 'checkexport/' + type + 'TaskDel.json', data)).then(function (res) {
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert,'接口请求异常','warning');
            });
        }
    }
}());
/**
 * Created by YuChunzhuo on 2016/1/5.
 */
'use strict';
angular.module('app.routes').config(checkArtistConfig);
checkArtistConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
function checkArtistConfig($stateProvider, helper){
    $stateProvider
        .state('app.uc_task_check_artist',{
            url: '/uc_task_check_artist?:pId&:projectId&:taskStatus&:pageNo&:pageSize&:taskStatusList&:uid&:artistIds&:artistName&:editUserName&:auditUserName&:cpCreateStartTime&:cpCreateEndTime&:sendStartTime&:sendEndTime&:scoreStart&:scoreEnd&:tags&:urgentDegree&:hotScoreMin&:hotScoreMax&:status&:tagBeans&:style&:mscoreMin&:mscoreMax',
            templateUrl: 'app/views/uc/check_artist/uc_task_check_artist.html',
            controller: ["$scope", "$http", "$stateParams", "$state", "$timeout", "$rootScope", "display", "$window", "$filter", "$cookies", "SweetAlert", "TaskService", function($scope,$http,$stateParams,$state,$timeout,$rootScope,display, $window, $filter, $cookies,SweetAlert, TaskService){
                $scope.tempscope = tempTagChoices;
                $scope.pageType = "";
                $scope.ucSongGitUsers = [];
                $scope.form = new Object();
                $scope.datas = [];
                $scope.userRole = 'cyr';
                $scope.taskStatus = $stateParams.taskStatus;
                $scope.pId = $stateParams.pId;
                $scope.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
                $scope.ckTagError = {};
                //获取项目的自定义权限分配模板（A,B,AB之类的）
                $scope.authoritySetting = [];

                //获取项目的流程
                getTaskContent($scope, $stateParams, $http);
                //获取标签
                getTagList(1,$scope,$stateParams,$http,$cookies,SweetAlert,1);

                $scope.changeTagType = function (type) {
                    for(var i = 0; i < $scope.form.tagBeans.length; i++){
                        if(!checkEmpty($scope.form.tagBeans[i].type)){
                            $scope.form.tagBeans[i].type = type;
                        }
                    }
                };

                //艺人的地域是标签
                $http.get(tag_tree_url+'getArtisteByClassificationAndTag.do').success(function(res){
                    for(var i = 0; i < res.areaList.tagList.length; i++){
                        res.areaList.tagList[i].tagId = res.areaList.tagList[i].tagId + "";
                    }
                    $scope.areaList = res.areaList;     //地域
                }).error(function(res){
                    alertTipCommon($timeout,$rootScope,'获取艺人地域标签失败',display);
                });

                //获取所有用户
                if($scope.$parent.users == undefined || $scope.$parent.users.length <= 0){
                    getAllUser($http, function(users){
                        $scope.$parent.users = users;
                    });
                }

                //分配项目
                $scope.distributionTask = function(userId){
                    console.log(userId);
                    var authSetting = $scope.form.task_auth_setting;
                    var taskIds = getPropertyFromCheckBox($scope.datas, "isCheck", true, "taskId");
                    console.log($scope.datas);
                    if(isPropertyEmpty(userId)){
                        return sweetAlertCommon(SweetAlert, '请选择分配人', 'warning');
                    }
                    if(taskIds.length <= 0){
                        return sweetAlertCommon(SweetAlert, '请选择分配数据', 'warning');
                    }
                    //分配任务
                    assignTaskNewSong(taskIds, authSetting.flowId, authSetting.auth, userId, SweetAlert, $scope, TaskService);
                };
                //$scope.export = function(){ //导出数据
                //    exportData($scope);
                //};
                //复选框的单个选择
                $scope.chk = function(data, datas){
                    $scope.selectedDataIds = getPropertyFromCheckBox(datas, 'isCheck', true, 'artistId');
                };
                //复选框的全选
                $scope.checkAll = function(all, datas){
                    selectAll($scope, datas, 'isCheck', 'allIsCheck');
                    $scope.selectedDataIds = getPropertyFromCheckBox(datas, 'isCheck', true, 'artistId');
                };
                //分页函数
                $scope.choosePage = function(pageType){
                    //$stateParams.pageNo = $scope.params.currentPage;
                    $state.go('app.uc_task_check_artist.' + pageType, {pageNo: $scope.params.currentPage});
                };
                //点击查询按钮
                $scope.paramsSearchClick = function(type){
                    //下面处理搜索字段
                    var datas = cloneOneObject($scope.form);
                    datas = iteratorData(datas, $filter);
                    //对错误分类进行处理
                    // var ckTagErrors = [];
                    // for(var i = 1; i <= 5; i++){
                    //     if($scope.ckTagError["tag" + i]){
                    //         ckTagErrors.push(i);
                    //     }
                    // }
                    // console.log(ckTagErrors);
                    // datas.ckTagErrors = ckTagErrors.join(",");
                    var propertys = ['projectId','taskStatus','taskStatusList','artistIds','artistName','createStartTime','createEndTime','distributionStartTime','distributionEndTime','completeStartTime','completeEndTime','status','karakal_status','ckResult','ckTagErrors','scoreStart','scoreEnd','sendStartTime','sendEndTime','editUserName','auditUserName','urgentDegree','uid','cpCreateStartTime','cpCreateEndTime','tags','hotScoreMin','hotScoreMax','status','tagBeans','style', 'mscoreMax', 'mscoreMin'];
                    datas = keepObjectProperty(propertys, datas);

                    datas.pId = $stateParams.pId;
                    datas.taskStatus = $stateParams.taskStatus;
                    datas.taskStatusList = $stateParams.taskStatusList;

                    if(!checkEmpty(datas.tagBeans)) datas.tagBeans = angular.toJson(datas.tagBeans);

                    console.log(datas);

                    $state.go('app.uc_task_check_artist.' + type, datas, {reload: true,inherit: false});
                };
                //查看素材信息
                $scope.showMaterialInfo = function(type, data){
                    openNewTab(type, data, 'Info', $state);
                };
                //跳转到抽查页面
                $scope.jumpToCheck = function(data){
                    jumpToCheck($state, "artist", data);
                };
                //重置搜索条件
                $scope.reset = function(){
                    $scope.form = {};
                    $scope.form.task_auth_setting = $scope.authoritySetting[0];
                    if(!isPropertyEmpty($stateParams.uid) && ($scope.pageType == "uncompelete" || ($scope.pageType == "compelete" && $scope.userRole == "cyr"))){
                        $scope.form.uid = $stateParams.uid;
                    }
                    for(var n in $scope.ckTagError){
                        $scope.ckTagError[n] = false;
                    }
                    clearUploadExcel($http,1);
                };
                //导出excel
                $scope.export = function(){
                    exportMaterialExcel('artist', $stateParams, $scope.datas);
                };
                //打开日期框
                $scope.open = function(flag) {
                    $scope.dateStatus["opened" + flag] = true;
                };
                $scope.dateStatus = {
                    opened1: false, opened2: false, opened3: false, opened4: false, opened5: false, opened6: false, opened7: false, opened8: false
                };
            }]
        })
        .state('app.uc_task_check_artist.unassigned',{
            url: '/unassigned',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_artist/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout, $rootScope, display){
                        ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree);

                        $scope.$parent.pageType = "unassigned";
                        $stateParams.projectId = $stateParams.pId;
                        $stateParams.isQueryExcel = 1;
                        ucCheckGetData("artist", $stateParams, $scope, $http);
                    }]
                }
            }
        })
        .state('app.uc_task_check_artist.assigned',{
            url: '/assigned?:distributionStartTime&:distributionEndTime',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_artist/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout,$rootScope,display){
                        ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree);

                        $scope.$parent.pageType = "assigned";
                        $stateParams.projectId = $stateParams.pId;
                        ucCheckGetData("artist", $stateParams, $scope, $http);
                    }]
                }
            }
        })
        .state('app.uc_task_check_artist.uncompelete',{
            url: '/uncompelete?:distributionStartTime&:distributionEndTime',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_artist/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout,$rootScope,display){
                        $stateParams.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
                        ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree);
                        $scope.$parent.pageType = "uncompelete";
                        $stateParams.projectId = $stateParams.pId;
                        ucCheckGetData("artist", $stateParams, $scope, $http);
                    }]
                }
            }
        })
        .state('app.uc_task_check_artist.compelete',{
            url: '/compelete?:completeStartTime&:completeEndTime&:ckResult&:ckTagErrors',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_artist/uncompelete.html',
                    resolve: helper.resolveFor('localytics.directives'),
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout,$rootScope,display){
                        ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree);

                        $scope.$parent.pageType = "compelete";
                        $stateParams.projectId = $stateParams.pId;
                        ucCheckGetData("artist", $stateParams, $scope, $http);
                        $scope.tagErrorChoose = function(t){ //添加错误分类
                            tagErrorChoose(t,$scope);
                        };
                        $scope.ckTagErrorsRemove = function(c){
                            $scope.form.ckTagErrors.remove(c);
                        }
                    }]
                }
            }
        })
}

//抽查工单的的导入导出控件
angular.module('app.routes').controller('uc_task_check_controller', ["$scope", "$uibModal", "$stateParams", "SweetAlert", function($scope,$uibModal,$stateParams,SweetAlert){
    $scope.animationsEnabled = true;
    //导出excel
    $scope.export = function(type, selectedDataIds){
        //if($stateParams.tagId == undefined){
        //    sweetAlertCommon(SweetAlert,"没有选择标签,不能导入",'error');
        //    return;
        //}
        console.log(selectedDataIds);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'uc_task_check_export.html',
            controller: 'uc_task_check_export_ctrl',
            resolve: {
                type: function(){
                    return type;
                },
                ids: function(){
                    return selectedDataIds;
                }
            }
        });
    };
    //导入excel
    $scope.import = function(type){
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'uc_task_check_import.html',
            controller: 'checkImportCtrl',
            resolve: {
                type: function(){
                    return type
                }
            }
        });
    };
    //抽查工单批量删除
    $scope.checkBatchDelete = function(type, datas){
        console.log(datas);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'deleteTpl.html',
            controller: 'uc_task_check_delete_ctrl',
            resolve: {
                type: function(){
                    return type;
                },
                datas: function(){
                    return datas;
                }
            }
        });
    };
}]);
//抽查导入框
angular.module('app.routes').controller('checkImportCtrl', ["$scope", "$uibModalInstance", "$http", "$filter", "type", "SweetAlert", "$state", "$rootScope", "$stateParams", function($scope,$uibModalInstance,$http,$filter,type,SweetAlert,$state,$rootScope,$stateParams) {
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.downloadTemplet = function(){
        window.open(environment+ '/cmssearch/resources/excel/'+type+'.xls','_blank');
    };
    $scope.ok = function(){
        var filename = $('#excelFile').val();
        if(checkEmpty(filename)){
            $scope.error = '请选择上传的excel文件';
        }else{
            var url = _search_url + 'checksearch/'+ type + 'ExlQuery.json';
            ajaxFileUpload(url, $scope, '', $uibModalInstance, SweetAlert,'excelFile',$stateParams,function ($stateParams) {
                console.log($stateParams);
                var params = {
                    pId: $stateParams.pId,
                    taskStatus: 0
                }
                $state.go('app.uc_task_check_'+type+'.unassigned',params,{reload: true, inherit: false});
            });
        }
    }
}]);

//抽查导出框
angular.module('app.routes').controller('uc_task_check_export_ctrl', ["$scope", "$uibModalInstance", "$stateParams", "$http", "$filter", "type", "ids", function($scope, $uibModalInstance, $stateParams, $http, $filter, type, ids){
    console.log(type);
    console.log(ids);
    $scope.cancel = function(){
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(){
        $stateParams.projectId = $stateParams.pId;
        var data = iteratorStateParam($stateParams, undefined, "artistIds,taskStatusList,tags,albumIds,songIds,ckTagErrors");
        console.log($scope.export_type);
        if($scope.export_type == 1){
            //console.log("选择了按照选中导出");
            if(ids == undefined || ids == null || ids === '' || ids.length <= 0){
                $scope.error = '没有选中数据，无法导出';
                return;
            }
            data[type + 'Ids'] = stringToArray(ids);
        } else if($scope.export_type == 2){
            if($scope.numberStart == undefined || $scope.numberEnd == undefined || $scope.numberStart == '' || $scope.numberEnd == ''){
                $scope.error = '请输入序号起止';
                return;
            }
            data.startNo = $scope.numberStart - 1;
            data.endNo = $scope.numberEnd - 1;
            //console.log($scope.numberStart + " +++++ " + $scope.numberEnd);
        } else if($scope.export_type == 3){
            if($scope.pageStart == undefined || $scope.pageEnd == undefined || $scope.pageStart == '' || $scope.pageEnd == ''){
                $scope.error = '请输入页码起止';
                return;
            }
            data.startNo = ($scope.pageStart - 1) * 20;
            data.endNo = $scope.pageEnd * 20 - 1;
            //console.log($scope.pageStart + " +++++ " + $scope.pageEnd);
        } else {
            $scope.error = '请选择导出类型';
            return;
        }
        var url = _search_url + 'checkexport/' + type + '.json?data=' + JSON.stringify(data);
        console.log(url);
        window.open(url);
        $uibModalInstance.dismiss('cancel');
    };
}]);

//抽查批量删除框
angular.module('app.routes').controller('uc_task_check_delete_ctrl', ["$scope", "$uibModalInstance", "$stateParams", "$timeout", "SweetAlert", "CheckService", "$http", "$filter", "type", "datas", function($scope, $uibModalInstance, $stateParams, $timeout, SweetAlert, CheckService, $http, $filter, type, datas){
    console.log(datas);
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function() {
        var taskIds = [];
        $stateParams.projectId = $stateParams.pId;
        if($stateParams.tagBeans && $stateParams.tagBeans.constructor == String) {
            $stateParams.tagBeans = JSON.parse($stateParams.tagBeans);
        }
        var data = iteratorStateParam($stateParams, undefined, "artistIds,taskStatusList,tags,albumIds,songIds,ckTagErrors");
        console.log($scope.export.type);
        switch ($scope.export.type){
            case "1":
                //console.log("选择了按照选中导出");
                var materialIds = [];
                datas.forEach(function(val){
                    if(val['isCheck']){
                        taskIds.push(val['taskId']);
                        materialIds.push(val[type + 'Id']);
                    }
                });
                if(taskIds == undefined || taskIds == null || taskIds === '' || taskIds.length <= 0){
                    $scope.error = '没有选中数据，无法导出';
                    return;
                }
                data[type + 'Ids'] = stringToArray(materialIds);
                break;
            case "2":
                if(checkEmpty($scope.export.startNo) || checkEmpty($scope.export.endNo)){
                    $scope.error = '请输入序号起止';
                    return;
                }
                data.startNo = $scope.export.startNo - 1;
                data.endNo = $scope.export.endNo - 1;
            //console.log($scope.numberStart + " +++++ " + $scope.numberEnd);
                break;
            case "3":
                if(checkEmpty($scope.export.pageStart) || checkEmpty($scope.export.pageEnd)){
                    $scope.error = '请输入页码起止';
                    return;
                }
                data.startNo = ($scope.export.pageStart - 1) * ($stateParams.pageSize == undefined ? 100 : $stateParams.pageSize);
                data.endNo = $scope.export.pageEnd * ($stateParams.pageSize == undefined ? 100 : $stateParams.pageSize) - 1;
            //console.log($scope.pageStart + " +++++ " + $scope.pageEnd);
                break;
            default:
                $scope.error = '请选择导出类型';
                return;
        }
        var url = "data=" + JSON.stringify(data);
        if(taskIds.length > 0){
            url += "&taskIds=" + taskIds.join(',');
        }
        var promise = CheckService.service.batchDelete(type, url);
        promise.then(function (res) {
            if(res.status == 1 || res.returnCode == '000000') {
                sweetAlertCommon(SweetAlert,res.description,'success'), $uibModalInstance.dismiss('cancel');
                $timeout(function(){
                    location.reload();
                }, 1000);
            } else {
                sweetAlertCommon(SweetAlert,res.description,'error');
            }
        });
    };
}]);

//页面填充搜索条件
function ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, songTagTree, type){
    //填充标签
    //此处没有，歌曲才有标签
    if(type == "song" && !isPropertyEmpty($stateParams.tags)){
        $scope.searchTag.length = 0;
        for(var i = 0; i < $stateParams.tags.split(',').length; i++){
            //遍历获取到的标签树获得标签ID对应的标签
            var tag = getTagById($stateParams.tags.split(',')[i], songTagTree);
            if(tag != undefined){
                $scope.searchTag.push(tag);
            }
        }
    }
    if(!isPropertyEmpty($stateParams.tagBeans)) $stateParams.tagBeans = JSON.parse($stateParams.tagBeans); //标签特殊处理
    for(var property in $stateParams){
        if(!isPropertyEmpty($stateParams[property])){
            $scope.form[property] = $stateParams[property];
        }
    }
    if($stateParams.ckTagErrors != undefined && $stateParams.ckTagErrors.constructor !== Array && $stateParams.ckTagErrors.split(",").length > 0){
        $scope.form.ckTagErrors = $stateParams.ckTagErrors.split(",");
    }
}

function ucCheckGetData(type, $stateParams, $scope, $http){
    if(checkEmpty($stateParams.pageSize)) $stateParams.pageSize = 100;
    var url = _search_url + "checksearch/" + type + ".json?" + CALLBACK + "&data=";
    var data = iteratorStateParam($stateParams, undefined, "artistIds,taskStatusList,tags,albumIds,songIds,ckTagErrors");
    if(data.tagBeans && data.tagBeans.constructor === String) data.tagBeans = JSON.parse(data.tagBeans);
    //console.log(data);
    var url1 = url + JSON.stringify(data);
    $http.jsonp(url1).success(function(res){
        $scope.$parent.datas.length = 0;
        var ids = [];
        for(var i = 0; i < res.data.list.length; i++){
            $scope.$parent.datas.push(res.data.list[i]);
        }
    });
    var data2 = cloneOneObject(data);
    data2.isQueryCount = 1;
    var url2 = url + JSON.stringify(data2);
    $http.jsonp(url2).success(function(res) {
        materialListSeparatePage($scope.$parent,res);
    });
};

function jumpToCheck($state, type, data){
    var param = {};
    param[type+'Id'] = data[type + 'Id'];
    param['lastPage'] = returnLastPageTime();
    param['taskId'] = data.taskId;
    var openUrl =  $state.href(type+'Check',param);
    window.open(openUrl,'_blank');
    // window.focus();
}
function jumptoCheckTag($state, type, data) {
    var param = {};
    param[type+'Id'] = data[type + 'Id'];
    param['lastPage'] = returnLastPageTime();
    param['taskId'] = data.taskId;
    var openUrl =  $state.href('material.taggingCheck',param);
    window.open(openUrl,'_blank');
}

function exportMaterialExcel(type, $stateParams, datas){
    var ids = getPropertyFromCheckBox(datas, "isCheck", true, type + "Id");
    if(ids.length <= 0){
        alert("你没有勾选数据，不能导出");
        return;
    }
    var data = iteratorStateParam($stateParams, undefined, "artistIds,taskStatusList,tags,albumIds,songIds");
    data[type + "Ids"] = ids;
    var url = _search_url + "checkexport/" + type + ".json?data=" + JSON.stringify(data);
    window.open(url);
}
/**
 * Created by YuChunzhuo on 2016/1/5.
 */
'use strict';
var tempTagChoices = [{name:"人工错误",value:"1"},{name:"产品错误",value:"2"},{name:"业务不熟",value:"3"},{name:"产品侧",value:"4"},{name:"运营侧",value:"5"}];
angular.module('app.routes').config(checkSongConfig);
checkSongConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
function checkSongConfig($stateProvider, helper){
    $stateProvider
        .state('app.uc_task_check_song',{
            url: '/uc_task_check_song?:pId&:taskStatus&:uid&:pageNo&:pageSize&:taskStatusList&:copyrightId&:songIds&:songName&:albumName&:artistName&:editUserName&:auditUserName&:urgentDegree&:cpCreateStartTime&:cpCreateEndTime&:tags&:projectName&:hotScoreMin&:hotScoreMax&:status&:mscoreMin&:mscoreMax&:tagBeans&:dataType',
            templateUrl: 'app/views/uc/check_song/uc_task_check_song.html',
            controller: ["$scope", "$http", "$stateParams", "$state", "$timeout", "$rootScope", "display", "$window", "$filter", "$cookies", "SweetAlert", "TaskService", function($scope,$http,$stateParams,$state,$timeout,$rootScope,display, $window, $filter, $cookies,SweetAlert, TaskService){
                // $state.go('app.uc_task_check_song.uncompelete', {"pId": "9137", "taskStatusList": "-1,1,2", "uid": JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid});
                $scope.tempscope = tempTagChoices;

                $scope.pageType = "";
                $scope.ucSongGitUsers = [];
                $scope.form = {};
                $scope.form.ckTagErrors = [];
                $scope.datas = [];
                $scope.userRole = 'cyr';
                $scope.taskStatus = $stateParams.taskStatus;
                $scope.dataType = checkEmpty($stateParams.dataType) ? 'song' : $stateParams.dataType;
                $scope.pId = $stateParams.pId;
                $scope.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
                $scope.ckTagError = {};
                //获取项目的自定义权限分配模板（A,B,AB之类的）
                $scope.authoritySetting = [];

                //获取项目的流程
                getTaskContent($scope, $stateParams, $http);
                //获取所有用户
                if($scope.$parent.users == undefined || $scope.$parent.users.length <= 0){
                    getAllUser($http, function(users){
                        $scope.$parent.users = users;
                    });
                }

                //选择标签时候选择顶部标签
                $scope.selectMainTag = function(tag){
                    $scope.tag_list = tag.children;
                };

                //选择需要搜索的标签
                $scope.searchTag = [];
                $scope.selectSearchTag = function(tag){
                    //首先判断重复
                    if($scope.searchTag != undefined && $scope.searchTag.length != 0){
                        for(var i = 0; i < $scope.searchTag.length; i++){
                            if($scope.searchTag[i].id == tag.id){
                                return;
                            }
                        }
                    }
                    //然后判断父标签是否重复
                    //var tagIds = getPropertyFromCheckBox($scope.form.searchTag, 'undefined', undefined, 'id');
                    if($scope.searchTag != undefined && $scope.searchTag.length != 0){
                        //下面要判断新来的tag的一级类别，如果一级类别相同，那么把原有标签替换掉
                        //如果和原有的所有标签一级类别都不重复，也就是新类别的标签，那么在原有的标签上面新增
                        for(var n = 0; n < $scope.searchTag.length; n++){
                            var tempTag = $scope.searchTag[n];
                            if(tag.ancestorId == tempTag.ancestorId){
                                $scope.searchTag[n] = tag;
                                return;
                            }
                        }
                    }
                    $scope.searchTag.push(tag);
                };

                //标签右上角的叉叉函数
                $scope.songTagRemove = function(tag){
                    $scope.searchTag.remove(tag);
                };

                //分配项目
                $scope.distributionTask = function(userId){
                    console.log(userId);
                    var authSetting = $scope.form.task_auth_setting;
                    var taskIds = getPropertyFromCheckBox($scope.datas, "isCheck", true, "taskId");
                    if(isPropertyEmpty(userId)){
                        return sweetAlertCommon(SweetAlert, '请选择分配人', 'warning');
                    }
                    if(taskIds.length <= 0){
                        return sweetAlertCommon(SweetAlert, '请选择分配数据', 'warning');
                    }
                    //分配任务
                    assignTaskNewSong(taskIds, authSetting.flowId, authSetting.auth, userId, SweetAlert, $scope, TaskService);
                };
                //$scope.export = function(){ //导出数据
                //    exportData($scope);
                //};
                //复选框的单个选择
                $scope.chk = function(data, datas){
                    $scope.selectedDataIds = getPropertyFromCheckBox(datas, 'isCheck', true, 'songId');
                };
                //复选框的全选
                $scope.checkAll = function(all, datas){
                    selectAll($scope, datas, 'isCheck', 'allIsCheck');
                    $scope.selectedDataIds = getPropertyFromCheckBox(datas, 'isCheck', true, 'songId');
                };
                //分页函数
                $scope.choosePage = function(pageType){
                    //$stateParams.pageNo = $scope.params.currentPage;
                    $state.go('app.uc_task_check_song.' + pageType, {pageNo: $scope.form.currentPage});
                };
                //点击查询按钮
                $scope.paramsSearchClick = function(type){
                    var tagIds = [];
                    for(var i = 0; i < $scope.searchTag.length; i++){
                        tagIds.push($scope.searchTag[i].id);
                    }

                    $scope.form.tags = tagIds.join(",");
                    //下面处理搜索字段
                    var datas = cloneOneObject($scope.form);
                    datas = iteratorData(datas, $filter);
                    //对错误分类进行处理
                    // datas.ckTagErrors = datas.ckTagErrors.join(',');

                    // var ckTagErrors = [];
                    // for(var i = 1; i <= 5; i++){
                    //     if($scope.ckTagError["tag" + i]){
                    //         ckTagErrors.push(i);
                    //     }
                    // }
                    // console.log(ckTagErrors);
                    // datas.ckTagErrors = ckTagErrors.join(",");

                    var propertys = ['projectId','taskStatus','copyrightId','taskStatusList','songIds','songName','albumName','artistName','projectName','createStartTime','createEndTime','distributionStartTime','distributionEndTime','completeStartTime','completeEndTime','status','karakal_status','ckResult','ckTagErrors','scoreStart','scoreEnd','sendStartTime','sendEndTime','editUserName',
                        'auditUserName','urgentDegree','uid','cpCreateStartTime','cpCreateEndTime','tags','hotScoreMin','hotScoreMax','status','mscoreMin','mscoreMax','tagBeans','dataType'];
                    datas = keepObjectProperty(propertys, datas);

                    datas.pId = $stateParams.pId;
                    datas.taskStatus = $stateParams.taskStatus;
                    datas.taskStatusList = $stateParams.taskStatusList;
                    if(!checkEmpty(datas.tagBeans)) datas.tagBeans = angular.toJson(datas.tagBeans);

                    console.log(datas);

                    $state.go('app.uc_task_check_song.' + type, datas,{reload: true,inherit: false});
                };
                //查看素材信息
                $scope.showMaterialInfo = function(type, data){
                    openNewTab(type, data, 'Info', $state);
                };
                //跳转到抽查页面
                $scope.jumpToCheck = function(data, type){
                    jumpToCheck($state, type, data);
                };
                $scope.jumpToCheckTag = function (data) {
                    var type = 'somg';
                    var param = {};
                    param[type+'Id'] = data[type + 'Id'];
                    param['lastPage'] = returnLastPageTime();
                    param['taskId'] = data.taskId;
                    var openUrl =  $state.href('material.taggingCheck',param);
                    // document.body.addEventListener('click', function () {
                    //     // 打开页面，此处最好使用提示页面
                    //     var newWin = window.open('loading page');
                    //
                    //     // ajax().done(function() {
                    //         // 重定向到目标页面
                    //         newWin.location.href = openUrl;
                    //     // });
                    // });
                    // window.open(openUrl,'_blank');
                    // jumptoCheckTag($state, 'song', data);
                };
                //播放歌曲
                $scope.addPlaySong = function(data){
                    console.log(data);
                    addPlaySong(data.songId, data.copyrightId,SweetAlert);
                };
                //重置搜索条件
                $scope.reset = function(){
                    $scope.form = {};
                    $scope.searchTag.length = 0;
                    $scope.form.task_auth_setting = $scope.authoritySetting[0];
                    if(!isPropertyEmpty($stateParams.uid) && ($scope.pageType == "uncompelete" || ($scope.pageType == "compelete" && $scope.userRole == "cyr"))){
                        $scope.form.uid = $stateParams.uid;
                    }
                    for(var n in $scope.ckTagError){
                        $scope.ckTagError[n] = false;
                    }
                    clearUploadExcel($http,0);
                };
                //导出excel
                //$scope.export = function(){
                //    exportMaterialExcel('song', $stateParams, $scope.datas);
                //};
                //打开日期框
                $scope.open = function(flag) {
                    $scope.dateStatus["opened" + flag] = true;
                };
                $scope.dateStatus = {
                    opened1: false, opened2: false, opened3: false, opened4: false, opened5: false, opened6: false
                };
                $scope.changeDataType = function (dataType) { //更新抽查数据类型
                    var param = {};
                    if(dataType == 'song') param.pId = 9137;  //歌曲抽查
                    if(dataType == 'songTag') param.pId = 9140;  //标签抽查
                    param.dataType = dataType;
                    $state.go($state.current.name, param);
                }
            }]
        })
        .state('app.uc_task_check_song.unassigned',{
            url: '/unassigned?:sendStartTime&:sendEndTime',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_song/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout, $rootScope, display){
                        ucGetSongTagTree($http, $scope, $stateParams,$timeout,$rootScope,display, function(){
                            ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree, "song");
                        });

                        $scope.$parent.pageType = "unassigned";
                        $stateParams.projectId = $stateParams.pId;
                        $stateParams.isQueryExcel = 1;
                        ucCheckGetData("song", $stateParams, $scope, $http);
                    }]
                }
            }
        })
        .state('app.uc_task_check_song.assigned',{
            url: '/assigned?:sendStartTime&:sendEndTime',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_song/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout,$rootScope,display){
                        ucGetSongTagTree($http, $scope, $stateParams,$timeout,$rootScope,display, function(){
                            ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree, "song");
                        });

                        $scope.$parent.pageType = "assigned";
                        $stateParams.projectId = $stateParams.pId;
                        ucCheckGetData("song", $stateParams, $scope, $http);
                    }]
                }
            }
        })
        .state('app.uc_task_check_song.uncompelete',{
            url: '/uncompelete?:sendStartTime&:sendEndTime',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_song/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout,$rootScope,display){
                        $stateParams.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
                        ucGetSongTagTree($http, $scope, $stateParams,$timeout,$rootScope,display, function(){
                            ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree, "song");
                        });
                        $scope.$parent.pageType = "uncompelete";
                        $stateParams.projectId = $stateParams.pId;
                        ucCheckGetData("song", $stateParams, $scope, $http);
                    }]
                }
            }
        })
        .state('app.uc_task_check_song.compelete',{
            url: '/compelete?completeStartTime&:completeEndTime&:ckResult&:ckTagErrors',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/check_song/uncompelete.html',
                    resolve: helper.resolveFor('localytics.directives'),
                    controller: ["$scope", "$http", "$stateParams", "$cookies", "$timeout", "$rootScope", "display", function($scope, $http, $stateParams, $cookies, $timeout,$rootScope,display){
                        ucGetSongTagTree($http, $scope, $stateParams,$timeout,$rootScope,display, function(){
                            ucCheckFillSearchCondition($stateParams, $scope, $http, $cookies, $scope.$parent.songTagTree, "song");
                        });
                        $scope.$parent.pageType = "compelete";
                        $stateParams.projectId = $stateParams.pId;
                        ucCheckGetData("song", $stateParams, $scope, $http);
                        $scope.tagErrorChoose = function(t){ //添加错误分类
                            tagErrorChoose(t,$scope);
                        };
                        $scope.ckTagErrorsRemove = function(c){
                            $scope.form.ckTagErrors.remove(c);
                        }
                    }]
                }
            }
        })
}
function tagErrorChoose(t,$scope){
    if(isPropertyEmpty(t)) return;
    if(checkEmpty($scope.form)) $scope.form = {};
    if(checkEmpty($scope.form.ckTagErrors)) $scope.form.ckTagErrors = [];
    if($scope.form.ckTagErrors.indexOf(t) != -1) return;
    $scope.form.ckTagErrors.push(t)
}
function clearUploadExcel($http,type){
    $http.jsonp(_search_url+'checksearch/resetCkUser.json?type='+type+'&'+CALLBACK).success(function(res){
        if(res.code == '000000') console.log('清空excel成功');
        else console.log('清空excel失败');
        // location.reload();
    });
}
//获取标签树并判断
function ucGetSongTagTree($http, $scope, $stateParams,$timeout,$rootScope,display, method){
    var songFilterTagTree = [];
    var song_tag_url = tag_tree_url + 'getTagsByMaterialAndUser.do?userId=' + _session.id + '&materialType=3&maxLevel=3';
    $http.get(song_tag_url).success(function(res){
        if(res.message == 'success'){
            //循环标签树设置祖先节点id
            for(var i = 0; i < res.tnList.length; i++){
                for(var j = 0; j < res.tnList[i].children.  length; j++){
                    res.tnList[i].children[j].ancestorId = res.tnList[i].id;
                    res.tnList[i].children[j].ancestorName = res.tnList[i].name;
                }
            }
            //把标签树保存下来供其它地方根据ID获取标签
            var songTagTree = res.tnList;
            $scope.$parent.songTagTree = cloneOneObject(res.tnList);
            songFilterTagTree.length = 0;
            for(var n = 0; n < songTagTree.length; n++ ){
                for(var m = 0; m < songTagTree[n].children.length; m++){
                    songFilterTagTree.push(songTagTree[n].children[m]);
                }
            }
            $scope.songFilterTagTree = songFilterTagTree;
            //ucSongFillSearchCondition($stateParams, $scope,songTagTree);
            ////下面的代码是拼凑歌曲页面顶部的标签树的结构
            var tags = [];
            for(var i=0; i < songTagTree.length; i++){
                var nodeList = [];
                var tag_all = getAllNode(songTagTree[i],nodeList);
                var tag = tag_all[tag_all.length -1];
                tag.children = [];
                for(var j = 0; j < tag_all.length - 1;j++){
                    tag.children.push(tag_all[j]);
                }
                tags.push(tag);
            }
            //console.log(tags);
            $scope.tags_title = tags;

            method();
        } else {
            console.log(res);
            //alert('返回异常，无法加载标签，返回值:' + JSON.stringify(res));
            alertTipCommon($timeout,$rootScope,'返回异常，无法加载标签，返回值:' + JSON.stringify(res),display);
        }
        //点击顶部标签展开下级的标签
        if($stateParams.id != undefined){
            for(var i = 0; i < $scope.tags_title.length; i++){
                if($scope.tags_title[i].id == $stateParams.id){
                    $scope.tags_list = $scope.tags_title[i].children;
                }
            }
        }
    }).error(function(res){
        //alert('网络错误，无法加载标签');
        alertTipCommon($timeout,$rootScope,'网络错误，无法加载标签',display);
    });
}

/**
 * Created by kiraCheng on 2016/3/14.
 */
angular.module('app.routes').config(['$urlMatcherFactoryProvider', function($urlMatcherFactory) {

    $urlMatcherFactory.type('CoolParam',
        {
            name : 'CoolParam',
            decode: function(val)  { return typeof(val) ==="string" ? JSON.parse(val) : val;},
            encode: function(val)  { return JSON.stringify(val); },
            equals: function(a, b) { return this.is(a) && this.is(b)
                && a.status === b.status && a.type == b.type },
            is: function(val)      { return angular.isObject(val)
                && "status" in val && "type" in val },
        })

}]);
angular.module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.examine',{
            url: '/examine',
            templateUrl: 'app/views/uc/examine/examine.html',
            controller: ["$scope", "$http", "$state", "$filter", "$cookies", "$stateParams", function($scope,$http,$state,$filter,$cookies,$stateParams){
                $scope.form = {},$scope.form.tagBeans = [],$scope.form.searchTag = [];
                $scope.tabs = [{"name":"歌曲","type":"1"},{"name":"专辑","type":"2"},{"name":"艺人","type":"3"},{"name":"标签","type":"4"},{"name":"统计","type":"5"}];
                //打开日期框
                $scope.open = function(flag) {
                    $scope.dateStatus["opened" + flag] = true;
                };
                $scope.dateStatus = {
                    opened1: false,
                    opened2: false,
                    opened3: false,
                    opened4: false,
                    opened5: false,
                    opened6: false
                };
                $scope.changeTagType = function (type) {
                    for(var i = 0; i < $scope.form.tagBeans.length; i++){
                        if(!checkEmpty($scope.form.tagBeans[i].type)){
                            $scope.form.tagBeans[i].type = type;
                        }
                    }
                };
                $scope.submit = function () {   //查询按钮
                    var params = $scope.form;
                    if(isPropertyEmpty(params.lastEditSearch)){
                        params.uid = "";
                    }
                    if(!isPropertyEmpty(params.searchTag)){
                        var tagIds = '';
                        for(var i = 0; i < params.searchTag.length; i++){
                            tagIds += params.searchTag[i].id + ',';
                        }
                        if(params.searchTag.length != 0){
                            tagIds = tagIds.substr(0, tagIds.length - 1);
                        }
                        params.tagIds = tagIds;
                    }
                    if(!checkEmpty(params.tagBeans))
                        params.tagBeans = angular.toJson(params.tagBeans);
                    params.pageNo = '',params.pageSize = '',params.type = $scope.type;
                    $state.go('app.examine.'+$scope.type,params,{reload: true, inherit: false});
                };
            }]
        })
        .state('app.examine.1',{
            url: '/:type/song?:tagIds&:copyrightId&:songIds&:songName&:albumName&:artistName&:degree&:newSong&:uid&:startTime&:pageNo&:pageSize&:endTime&:{orderBys:json}&:mscoreMin&:mscoreMax&:hotScoreMin&:hotScoreMax&:projectName&:urgentDegree&:distributionStartTime&:distributionEndTime&:lastEditSearch',
            views:{
                'data-list':{
                    templateUrl: 'app/views/uc/examine/data_song.html',
                    controller: 'ExamineController'
                }
            }
        })
        .state('app.examine.2',{
            url: '/:type/album?:albumIds&:artistName&:albumName&:uid&:startTime&:endTime&:pageNo&:pageSize&:{orderBys:json}&:mscoreMin&:mscoreMax&:hotScoreMin&:hotScoreMax&:tagBeans&:lastEditSearch&:style',
            views:{
                'data-list':{
                    templateUrl: 'app/views/uc/examine/data_album.html',
                    controller: 'ExamineController'
                }
            }
        })
        .state('app.examine.3',{
            url: '/:type/artist?:artistIds&:artistName&:uid&:startTime&:endTime&:pageNo&:pageSize&:{orderBys:json}&:mscoreMin&:mscoreMax&:hotScoreMin&:hotScoreMax&:tagBeans&:lastEditSearch&:style',
            views:{
                'data-list':{
                    templateUrl: 'app/views/uc/examine/data_artist.html',
                    controller: 'ExamineController'
                }
            }
        })
        .state('app.examine.4',{
            url: '/:type/tag?:tagIds&:copyrightId&:songIds&:songName&:albumName&:artistName&:tagStartTime&:tagEndTime&:degree&:newSong&:uid&:startTime&:pageNo&:pageSize&:endTime&:mscoreMin&:mscoreMax&:hotScoreMin&:hotScoreMax&:projectName&:urgentDegree&:lastEditSearch&:{orderBys:json}',
            views:{
                'data-list':{
                    templateUrl: 'app/views/uc/examine/data_song.html',
                    controller: ["$stateParams", "$scope", "$cookies", "$filter", "$http", "$timeout", "$rootScope", "display", "$state", "$location", "SweetAlert", function($stateParams,$scope,$cookies,$filter,$http,$timeout,$rootScope,display,$state,$location,SweetAlert){
                        $scope.$parent.types = $scope.types = ['song','album','artist','song'];
                        setParentValue($scope,$stateParams,$http,$cookies,'tag',$filter);
                        getExamineData('songTag',$scope,$stateParams,$http,$filter);
                        $scope.choosePage = function(){
                            choosePageCommon($scope,$state,'app.examine.4')
                        };
                        $scope.examineJump = function(data,tp, flag){ //跳转审核界面
                            examineJumpNew(tp,data,$state,SweetAlert, flag);
                        };
                        /*标签搜索操作*/
                        getTagList("3",$scope.$parent,$stateParams,$http,$cookies,SweetAlert,1);
                    }]
                }
            }
        })
        .state('app.examine.5',{
            url: '/:type/tongji?:songName&:artistName',
            views:{
                'data-list':{
                    templateUrl: 'app/views/uc/examine/data_tongji.html',
                    controller: ["$stateParams", "$scope", function($stateParams,$scope){
                        $scope.$parent.type = $stateParams.type;
                    }]
                }
            }
        })
}]);
angular.module('app.routes').controller('ExamineController',["$stateParams", "$scope", "$cookies", "$http", "$filter", "$state", "SweetAlert", function($stateParams,$scope,$cookies,$http,$filter,$state,SweetAlert){
    $scope.$parent.types = $scope.types = ['song','album','artist','tag'];
    $scope.$parent.type = $stateParams.type;

    getExamineData($scope.types[$stateParams.type-1],$scope,$stateParams,$http,$filter);
    setParentValue($scope,$stateParams,$http,$cookies,$scope.types[$stateParams.type-1],$filter);

    $scope.choosePage = function(){
        choosePageCommon($scope,$state,'app.examine.'+$stateParams.type)
    };
    $scope.examineJump = function(data,tp, flag){ //跳转审核界面
        examineJumpNew(tp,data,$state,SweetAlert, flag);
    };
    $scope.infoJump = function(type,data){ //跳转详情界面
        openNewTab(type,data,'Info',$state);
    };
    $scope.search = function(songName,artistName){  //搜字搜索
        var url = $state.href('app.song',{'songKeyword':songName,'artistKeyword':artistName});
        window.open(url,'_blank');
    };
    /*标签搜索操作*/
    getTagList(4 - new Number($stateParams.type),$scope.$parent,$stateParams,$http,$cookies,SweetAlert,1);
    
}]);
angular.module('app.routes').controller('BatchModalCtrl',["$uibModalInstance", "$scope", "$stateParams", "datas", "form", "types", "ExamineService", "SweetAlert", "$state", function ($uibModalInstance,$scope,$stateParams,datas,form,types,ExamineService,SweetAlert,$state) {
    $scope.batch = {};
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function () {
        var data = {type: types[$stateParams.type-1]};
        if($stateParams.type == '4') data.type = 'songTag';
        if(checkEmpty(datas))
            return $scope.error = '暂无审核的数据';
        if(checkEmpty($scope.batch.type))
            return $scope.error = '请选择审核操作类型';
        if(checkEmpty($scope.batch.pass))
            return $scope.error = '请选择审核通过或不通过';
        data.status = $scope.batch.pass;
        data.searchParams = {};
        switch($scope.batch.type){
            case '1':
                var ids = [];
                datas.forEach(function (val) {
                    if(val.isCheck) ids.push(val[types[$stateParams.type-1]+'Id']);
                });
                if(ids.length == 0){
                    return $scope.error = '请选择需要审核的数据';
                }
                data.searchParams[types[$stateParams.type-1]+'Ids'] = ids;
                break;
            case '2':
                if(checkEmpty($scope.batch.startNo) || checkEmpty($scope.batch.endNo)) return $scope.error = '请填写完整的序号起止数目';
                // data.searchParams = cloneOneObject(form);
                data.searchParams = excludeProperties(form,['pageSize','pageNo','type']);
                data.searchParams.startNo = $scope.batch.startNo - 1,data.searchParams.endNo = $scope.batch.endNo - 1;
                break;
            case '3':
                if(checkEmpty($scope.batch.pageStart) || checkEmpty($scope.batch.pageEnd)) return $scope.error = '请填写完整的起止页数';
                // data.searchParams = cloneOneObject(form);
                data.searchParams = excludeProperties(form,['pageSize','pageNo','type']);
                data.searchParams.startNo = ($scope.batch.pageStart - 1) * form.pageSize;
                data.searchParams.endNo = ($scope.batch.pageEnd) * form.pageSize - 1;
                break;
        }
        data.searchParams.taskStatus = 0;
        console.log(data);
        $scope.error = '';
        var promise = ExamineService.service.batchExamine(JSON.stringify(data));
        promise.then(function (res) {
            if(res.status == 1) sweetAlertCall(SweetAlert,res.msg,'success',null,function () {
                location.reload();
            }),$uibModalInstance.dismiss('cancel');
            else sweetAlertCommon(SweetAlert,res.msg,'error');
        });

    };
}]);
function setParentValue($scope,$stateParams,$http,$cookies,tp,$filter){    //设置父元素作用域对象，tp:父元素对象类型
    //console.log($scope.$parent.users);
    //console.log(git_users);
    if(!isPropertyEmpty($stateParams.tagBeans)) $stateParams.tagBeans = JSON.parse($stateParams.tagBeans);
    $scope.$parent.type = $stateParams.type;
    $scope.$parent['form'] = iteratorStateParam($stateParams,$filter);
    if($scope.$parent.users ==undefined || $scope.$parent.users.length <= 0){
        getGitUsers($http,$cookies,$scope, 1, function (){
            //console.log($scope.gitUsers);
            $scope.$parent.users = git_users;
            fillUser();
        });
    } else {
        fillUser();
    }
    function fillUser(){
        if(!isPropertyEmpty($stateParams.uid)){
            for(var n = 0; n < $scope.$parent.users.length; n++){
                //var user = $scope.gitUsers[n];
                if($scope.$parent.users[n].uId == $stateParams.uid){
                    $scope.$parent['form'].uid = $scope.$parent.users[n].name;
                }
            }
        }
    }
    if(!isPropertyEmpty($stateParams.tagIds)){
        for(var i = 0; i < $stateParams.tagIds.split(',').length; i++){
            //遍历获取到的标签树获得标签ID对应的标签
            var tag = getTagById($stateParams.tagIds.split(',')[i], JSON.parse(localStorage.getItem('tagTree1')));
            if(tag != undefined){
                if(checkEmpty($scope.form.searchTag)) $scope.form.searchTag = [];
                $scope.form.searchTag.push(tag);
            }
        }
    }
};
function getExamineData(tp,$scope,$stateParams,$http,$filter){    //获取审核数据列表，tp数据类型
    //var examine_search = 'http://temp.karakal.com.cn:18089/new/mzk-search/1/search/audit/';
    if(checkEmpty($stateParams.pageSize)) $stateParams.pageSize = 100;
    var param = deleteProperty(iteratorStateParam($stateParams,$filter,tp+'Ids'),'type');    //根据需求获取参数所转换对象
    if(tp == 'songTag'){
        param.songIds = stringToArray(param.songIds);   //标签审核参数特殊处理：将数字字符串转成数组
    }
    if(!isPropertyEmpty($stateParams.tagIds)) param.tags = stringToArray($stateParams.tagIds);
    if(!isPropertyEmpty($stateParams.tagBeans)) param.tagBeans = JSON.parse($stateParams.tagBeans);
    param.taskStatus = 0;
    $http.jsonp(examine_search + tp + '.json' + '?data=' + JSON.stringify(param) + '&' + CALLBACK).success(function (res) {
        // $scope.datas = res.data.list;
        $scope.$parent.datas = res.data.list;
        paginationDiscreteness($scope,5,res.data.pageSize,res.data.totalCount,res.data.pageTotal,res.data.pageNo);
    });
}

function examineJumpNew(tp,data,$state,SweetAlert, flag){
    var rtp = tp;
    if(tp == 'songTag'){
        rtp = 'song';
    };
    jQuery.ajax({
        url: http_url+'/auditing/'+tp+'/'+data.taskId+'.json?'+'rid='+data[rtp+'Id'] ,
        type: "post",
        async: false,
        timeout: 15000,
        dataType: "jsonp",  // not "json" we'll parse
        jsonp: CALLBACK,
        contentType: "application/jsonp; charset=utf-8",
        success: function(res) {
            console.log(rtp);
            if(res.status != 1){
                //alertTipCommon($timeout,$rootScope,res.msg,display);
                sweetAlertCommon(SweetAlert,res.msg,'warning');
                return;
            }
            var params = {returnBtn: true};
            params[rtp+'Id'] = data[rtp + 'Id'];
            params.taskId = data.taskId;
            params.lastPage = returnLastPageTime();
            var url = $state.href(tp + 'Examine', params);
            if(tp == 'songTag'){
                url = $state.href('material.taggingExamine', params);
            }
            if(flag) window.open(url , flag);
            else window.open(url, '','left=0,top=0,location=0,status=0,width=1000,height=600,toolbar=yes,menubar=yes');
            //window.open('/mls/resources/pages/top/index.html#/'+tp+'Examine?'+tp+'Id=' + data[tp+'Id'] + '&taskId=' + data.taskId + '&lastPage=' + returnLastPageTime(), '_blank');
        },
        error: function (res) {
            console.log(res);
        }
    });
}
function examineJump(tp,data,$state,$timeout,$rootScope,display){     //检测状态后跳转审核界面
    jQuery.ajax({
        url: http_url+'/auditing/'+tp+'/'+data.taskId+'.json?'+'rid='+data[tp+'Id'] ,
        type: "post",
        async: false,
        timeout: 15000,
        dataType: "jsonp",  // not "json" we'll parse
        jsonp: CALLBACK,
        contentType: "application/jsonp; charset=utf-8",
        success: function(res) {
            if(res.status != 1){
                alertTipCommon($timeout,$rootScope,res.msg,display);
                return;
            }
            //var url = $state.href(tp+'Examine',{artistId:data[tp+'Id'],taskId:data.taskId});
            //if(tp == 'artist'){
            window.open('/mls/resources/pages/top/index.html#/'+tp+'Examine?'+tp+'Id=' + data[tp+'Id'] + '&taskId=' + data.taskId + '&lastPage={"url":"' + encodeURIComponent(document.location.href)+'"}', '_blank');
            //} else {
            //    window.open(url, '_blank');
            //}
        },
        error: function (res) {
            console.log(res);
        }
    });
}

function xingzuo() {
    var value = '';
    var start = 1901, date=document.getElementById("txtDay").value, month=document.getElementById("txtMonth").value;
    with (document.getElementById("txtXZ")){
        if (month == 1 && date >=20 || month == 2 && date <=18) {value = "水瓶座";}
        if (month == 1 && date > 31) {value = "Huh?";}
        if (month == 2 && date >=19 || month == 3 && date <=20) {value = "双鱼座";}
        if (month == 2 && date > 29) {value = "Say what?";}
        if (month == 3 && date >=21 || month == 4 && date <=19) {value = "白羊座";}
        if (month == 3 && date > 31) {value = "OK. Whatever.";}
        if (month == 4 && date >=20 || month == 5 && date <=20) {value = "金牛座";}
        if (month == 4 && date > 30) {value = "I'm soooo sorry!";}
        if (month == 5 && date >=21 || month == 6 && date <=21) {value = "双子座";}
        if (month == 5 && date > 31) {value = "Umm ... no.";}
        if (month == 6 && date >=22 || month == 7 && date <=22) {value = "巨蟹座";}
        if (month == 6 && date > 30) {value = "Sorry.";}
        if (month == 7 && date >=23 || month == 8 && date <=22) {value = "狮子座";}
        if (month == 7 && date > 31) {value = "Excuse me?";}
        if (month == 8 && date >=23 || month == 9 && date <=22) {value = "室女座";}
        if (month == 8 && date > 31) {value = "Yeah. Right.";}
        if (month == 9 && date >=23 || month == 10 && date <=22) {value = "天秤座";}
        if (month == 9 && date > 30) {value = "Try Again.";}
        if (month == 10 && date >=23 || month == 11 && date <=21) {value = "天蝎座";}
        if (month == 10 && date > 31) {value = "Forget it!";}
        if (month == 11 && date >=22 || month == 12 && date <=21) {value = "人马座";}
        if (month == 11 && date > 30) {value = "Invalid Date";}
        if (month == 12 && date >=22 || month == 1 && date <=19) {value = "摩羯座";}
        if (month == 12 && date > 31) {value = "No way!";}
    }
}


/**
 * Created by hao.cheng on 2016/7/19.
 */
(function () {
    'use strict';
    angular.module('app.routes').service('ExamineService',ExamineService);
    ExamineService.$inject = ['$http','SweetAlert'];
    function ExamineService($http,SweetAlert) {
        this.service = {
            'batchExamine': batchExamine
        };
        function batchExamine(data) {
            return $http.jsonp(AUDITBATCH + '?' + CALLBACK + '&data=' + data).then(function (res) {
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert,'接口请求异常','warning');
            });
        }
    }
}());
/**
 * Created by YuChunzhuo-Dev on 2016/8/8.
 */
(function(){
    'use strict';
    angular.module('app.routes').config(ConstantConfig);
    ConstantConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
    function ConstantConfig($stateProvider, helper){
        $stateProvider
            .state('app.constant',{
                url:'/constant',
                templateUrl: helper.basepath('uc/constant/constant.html')
            })
            .state('app.constant.list',{
                url:'/list?pageSize&:pageNo',
                views:{
                    'page':{
                        templateUrl: helper.basepath('uc/constant/constant-list.html'),
                        controller: 'ConstantListController'
                    }
                }
            })
            .state('app.constant.edit',{
                url:'/edit?:key&:readonly',
                views:{
                    'page':{
                        templateUrl: helper.basepath('uc/constant/constant-edit.html'),
                        controller: 'ConstantEditController'
                    }
                }
            })
    };

    angular.module('app.routes').controller('ConstantListController', ["$scope", "$stateParams", "ConstantService", "SweetAlert", function($scope, $stateParams, ConstantService, SweetAlert){
        ConstantService.method.getDatas($scope, $stateParams);
        $scope.deleteData = function(data){
            if(data.config){
                sweetAlertConfirm(SweetAlert, function(){
                    ConstantService.method.deleteData(data.config);
                });
            }
        }
    }]);
    angular.module('app.routes').controller('ConstantEditController', ["$scope", "$stateParams", "$state", "ConstantService", "SweetAlert", function($scope, $stateParams, $state, ConstantService, SweetAlert){
        $scope.readonly = $stateParams.readonly;
        if($stateParams.key){
            ConstantService.method.detailData($scope, $stateParams.key);
        }
        $scope.submit = function(data){
            sweetAlertConfirm(SweetAlert, function() {
                ConstantService.method.saveData(data, $state);
            });
        };
    }]);
})();
/**
 * Created by YuChunzhuo-Dev on 2016/8/8.
 * 系统常量service
 */
(function(){
    'use strict';
    angular.module('app.routes').service('ConstantService', ConstantService);
    ConstantService.$inject = ['$http','SweetAlert'];
    function ConstantService($http, SweetAlert){
        var config_url = http_url + '/config/';
        var _self = this;
        _self.service = {
            'query':query,
            'save':save,
            'remove':remove,
            'info':info
        };
        _self.method = {
            'getDatas':getDatas,
            'deleteData':deleteData,
            'saveData':saveData,
            'detailData':detailData
        };

        function query(params){
            var url = config_url + 'query.json?' + formatObject4Url(params);
            return $http.get(url).then(function(res){
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '系统常量接口请求异常', 'warning');
            });
        }
        function save(data){
            var url = config_url + 'save.json';
            console.log(url);
            return $http(new PostSetup(url, 'data=' + data)).then(function(res){
            // return $http.jsonp(url).then(function(res){
                return res.data;
            }, function(){
                sweetAlertCommon(SweetAlert, '系统常量接口请求异常', 'warning');
            });
        }
        function remove(key){
            var url = config_url + 'remove/' + key + '.json';
            return $http.get(url).then(function(res){
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '系统常量接口请求异常', 'warning');
            });
        }
        function info(key){
            var url = config_url + 'info/' + key + '.json';
            return $http.get(url).then(function(res){
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '系统常量接口请求异常', 'warning');
            });
        }

        function getDatas($scope, $stateParams){
            var params = cloneOneObject($stateParams);
            var _promise = _self.service.query(params);
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1)
                        $scope.datas = res.data;
                    else
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                })
            }
        }

        function deleteData(key){
            var _promise = _self.service.remove(key);
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1){
                        sweetAlertCall(SweetAlert,res.msg,'success',null,function () {
                            location.reload();
                        });
                    } else {
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                })
            }
        }

        function saveData(data, $state){
            var _promise = _self.service.save(angular.toJson(data));
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1){
                        sweetAlertCall(SweetAlert,res.msg,'success',null,function () {
                            $state.go('app.constant.list');
                        });
                    } else {
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                })
            }
        }

        function detailData($scope, key){
            var _promise = _self.service.info(key);
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1){
                        $scope.data = res.data;
                    } else {
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                });
            }
        }

    };
})();
/**
 * Created by hao.cheng on 2016/8/16.
 */
(function () {
    'use strict';
    angular.module('app.routes').config(DictionaryConfig);
    DictionaryConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
    function DictionaryConfig($stateProvider, helper) {
        $stateProvider
            .state('app.dictionary', {
                url: '/dictionary',
                views: {
                    '': {
                        templateUrl: helper.basepath('partials/container-tpl.html'),
                        controller: 'DictionaryHeadController'
                    }
                }
            })
            .state('app.dictionary.nation', {       //民族
                url: '/nation?:pageSize&:pageNo&:searchKeyWord',
                views: {
                    'condition': {
                        templateUrl: helper.basepath('datadictionary/dictionary-condition.html'),
                        controller: 'DictionaryHeadController'
                    },
                    'data-list': {
                        templateUrl: helper.basepath('datadictionary/dictionary-country.html'),
                        controller: 'DictionaryBodyController',
                        resolve: helper.resolveFor('xeditable')
                    }
                }
            })
            .state('app.dictionary.country', {      //国家
                url: '/country?:pageSize&:pageNo&:searchKeyWord',
                views: {
                    'condition': {
                        templateUrl: helper.basepath('datadictionary/dictionary-condition.html'),
                        controller: 'DictionaryHeadController'
                    },
                    'data-list': {
                        templateUrl: helper.basepath('datadictionary/dictionary-country.html'),
                        controller: 'DictionaryBodyController',
                        resolve: helper.resolveFor('xeditable')
                    }
                }
            })
            .state('app.dictionaryEdit', {
                url: '/dictionary/edit?:type&:id',
                views: {
                    '': {
                        templateUrl: helper.basepath('datadictionary/dictionary-edit.html'),
                        controller: 'DictionaryEditController'
                    }
                }
            })

    }

    /*数据字典系列controller*/
    angular.module('app.routes').controller('DictionaryHeadController', ["$scope", "$state", function ($scope,$state) {
        $scope.container = new Container('数据字典',{show: false});
        $scope.addDic = function () {
            var type = '';
            if($state.current.name.indexOf('country') != -1){
                type = 'country';
            } else if($state.current.name.indexOf('nation') != -1){
                type = 'nation';
            }
            if(!checkEmpty(type)){
                $state.go('app.dictionaryEdit', {type: type});
            }
        }
    }]);
    angular.module('app.routes').controller('DictionaryBodyController', ["$scope", "$state", "DictionaryService", "SweetAlert", "$stateParams", function ($scope, $state, DictionaryService, SweetAlert, $stateParams) {
        var _title;
        if($state.current.name.indexOf('country') != -1) {
            _title = '数据字典-国家地区管理';
            $scope.$parent.type = 'country';
        } else {
            _title = '数据字典-民族管理';
            $scope.$parent.type = 'nation';
        }
        $scope.$parent.container.title = _title;
        $scope.$parent.form = inherit($stateParams);

        loadSearch();

        function loadSearch() {
            var _promise = DictionaryService.service.search($scope.$parent.type, JSON.stringify($stateParams));
            if(_promise) _promise.then(function (res) {
                console.log(res);
                $scope.$parent.datas = res.data.list;
                paginationDiscreteness($scope, 5, res.data.pageSize, res.data.totalCount, res.data.pageTotal, res.data.pageNo);
            });
        }

        $scope.saveDic = function (data, rowform) {     //保存按钮
            console.log(data);
            sweetAlertConfirm(SweetAlert, function () {
                DictionaryService.service.saveDic($scope.$parent.type, JSON.stringify(data)).then(function (res) {
                    if(res.status == 1) return sweetAlertCommon(SweetAlert, res.msg, 'success'),rowform.$cancel();
                    else return sweetAlertCommon(SweetAlert, res.msg, 'error');
                });
            }, 'warning');
        };
        $scope.deleteDic = function (data) {        //删除按钮
            sweetAlertConfirm(SweetAlert, function () {
                DictionaryService.service.deleteDic($scope.$parent.type, data.id, null).then(function (res) {
                    if(res.status == 1) return sweetAlertCommon(SweetAlert, res.msg, 'success'),loadSearch();
                    else return sweetAlertCommon(SweetAlert, res.msg, 'error');
                })
            }, 'warning')
        }
    }]);
    angular.module('app.routes').controller('DictionaryEditController', ["$scope", "$stateParams", "$state", "DictionaryService", "SweetAlert", function($scope, $stateParams, $state, DictionaryService, SweetAlert){
        $scope.type = $stateParams.type;
        $scope.isRepeat = false;
        if($stateParams.id){
            DictionaryService.service.search($scope.type, JSON.stringify($stateParams)).then(function(res){
                if(res.status == 1 && res.data.list.length > 0) {
                    $scope.data = res.data.list[0];
                } else {
                    return sweetAlertCommon(SweetAlert, res.msg, 'error');
                }
            });
        }
        $scope.formChange = function(data){
            DictionaryService.service.search($scope.type, JSON.stringify(data)).then(function(res){
                if(res.status == 1 && res.data && res.data.list.length > 0){
                    $scope.isRepeat = true;
                } else {
                    $scope.isRepeat = false;
                }
            });
        };
        $scope.submit = function(data){
            if($scope.isRepeat){
                sweetAlertConfirm(SweetAlert,function(){
                    saveDictionary(data);
                }, "warning", "已经有一条相同的数据", "确定新建吗？");
            } else {
                sweetAlertConfirm(SweetAlert, function(){
                    saveDictionary(data);
                }, "warning");
            }
        };
        $scope.return = function(){
            $state.go('app.dictionary.' + $stateParams.type, {pageNo: 1, pageSize: 100});
        };
        var saveDictionary = function(data){
            DictionaryService.service.saveDic($scope.type, JSON.stringify(data)).then(function (res) {
                if(res.status == 1) {
                    return sweetAlertCommon(SweetAlert, res.msg, 'success')
                        ,$state.go('app.dictionary.' + $stateParams.type, {pageNo: 1, pageSize: 100});
                } else {
                    return sweetAlertCommon(SweetAlert, res.msg, 'error');
                }
            });
        }
    }]);

    angular.module('app.routes').controller('DictionaryCountrySelectController', ["$scope", "$stateParams", "DictionaryService", function($scope, $stateParams, DictionaryService){
        var _promise = DictionaryService.service.search('country', JSON.stringify({}));
        if(_promise) _promise.then(function (res) {
            $scope.countrySelects = res.data.list;
        });
    }]);
})();
/**
 * Created by hao.cheng on 2016/8/16.
 */
(function () {
    'use strict';

    angular.module('app.routes').service('DictionaryService', DictionaryService);
    DictionaryService.$inject = ['$http', 'SweetAlert', '$q'];
    function DictionaryService($http, SweetAlert, $q) {
        var _self = this,_deferred = $q.defer();
        _self.service = {
            'search': search,
            'saveDic': saveDic,
            'deleteDic': deleteDic
        };
        
        function search(type, data) {
            return httpRequest(DICTIONARY_SEARCH + type + '.json', data, '数据字典搜索接口请求异常');
        }
        function saveDic(type, data) {
            return httpRequest(DICTIONARY_SAVE + type + '.json', data, '数据字典保存接口请求异常');
        }
        function deleteDic(type, id, data) {
            return httpRequest(DICTIONARY_DELETE + type + '/' + id + '.json', data, '数据字典删除接口请求异常');
        }

        function httpRequest(url, data, errMsg) {
            return $http(new PostSetup(url, 'data=' + data)).then(function (res) {
                // _deferred.resolve(res);
                // return _deferred.promise;
                return res.data;
            }, function (err) {
                sweetAlertCommon(SweetAlert, errMsg, 'warning');
            })
        }
    }
})();
/**
 * Created by YuChunzhuo on 2016/1/27.
 */

angular.module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.uc_task_new_song',{
            url: '/uc_atask_new_song?:pId&:status&:taskStatus&:uId&:pageNo&:pageSize&:taskStatusList&:urgentDegree&:language',
            templateUrl: 'app/views/uc/new_song/uc_task_new_song.html',
            controller: ["$scope", "$http", "$stateParams", "$cookies", "$filter", "$timeout", "$rootScope", "display", "$state", "SweetAlert", "TaskService", function($scope,$http,$stateParams,$cookies,$filter,$timeout,$rootScope,display,$state,SweetAlert, TaskService){
                //记录当前界面的tab
                $scope.nowTab = "";

                $scope.params = new Object();
                if($scope.datas == undefined){
                    $scope.datas = [];
                }
                if($scope.cyr_list == undefined){
                    $scope.cyr_list = [];
                }
                //$scope.choseArr = [];
                //用于判断当前url是否有userId参数
                $scope.userId = $stateParams.uId;
                if($scope.userId == undefined && ($stateParams.taskStatus == 1 || $stateParams.taskStatus == 2)){
                    $scope.userId = -1;
                }
                $scope.userRole = 'cyr';
                $scope.taskStatus = $stateParams.taskStatus;
                //if($stateParams.status == 0){
                //    $scope.show = true;
                //}else{
                //    $scope.show = false;
                //}
                $scope.pId = $stateParams.pId;
                $scope.uId = _session.id;
                var param = {};
                param.pId = $stateParams.pId;
                //param.uId = -1;
                param.status = $stateParams.status;
                var p_param= {};
                p_param.id = $stateParams.pId;
                var p_type = '';
                //获取项目的流程
                getTaskContent($scope, $stateParams, $http);
                //$http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data='+ JSON.stringify(p_param)).success(function(res){
                //    $scope.p_type = res.data.list[0].flowType;
                //    $scope.cyr_list = [];
                //    for(var i = 0; i < res.data.list[0].cyrList.length;i++){
                //        $scope.cyr_list.push(res.data.list[0].cyrList[i]);
                //    }
                //    for(var i = 0; i < res.data.list[0].fzrList.length;i ++){
                //        $scope.cyr_list.push(res.data.list[0].fzrList[i]);
                //        if(res.data.list[0].fzrList[i].uid == _session.id){
                //            $scope.userRole = 'fzr';
                //        }
                //    }
                //});
                $scope.user = undefined;
                //$scope.removeUser = function(){ //去除分配人的方法
                //    //console.log($scope.user);
                //    $scope.user = undefined;
                //};
                //获取项目的自定义权限分配模板（A,B,AB之类的）
                $scope.authoritySetting = [];
                $http.jsonp(uc_new_song_auth + "?" + CALLBACK + "&pId=" + $stateParams.pId).success(function(res){
                    if(res.returnCode == "000000"){
                        $scope.authoritySetting = res.list;
                        $scope.params.task_auth_setting = $scope.authoritySetting[0];
                    }
                });

                $scope.selectCyr = function(v){ //select选择参与人分配/查看任务的方法
                    //console.log($scope.user);
                    //console.log(v);
                    $scope.user = {};
                    if(v != undefined){
                        $scope.user.name = v.uName;
                        $scope.user.id = v.uid;
                    }
                };
                //分配任务
                $scope.distributionTask = function(userId){
                    var authSetting = $scope.params.task_auth_setting;
                    var taskIds = getPropertyFromCheckBox($scope.datas, "isCheck", true, "taskId");
                    if(isPropertyEmpty(userId)){
                        return sweetAlertCommon(SweetAlert, '请选择分配人', 'warning');
                    }
                    if(taskIds.length <= 0){
                        return sweetAlertCommon(SweetAlert, '请选择分配数据', 'warning');
                    }
                    //分配任务
                    assignTaskNewSong(taskIds, authSetting.flowId, authSetting.auth, userId, SweetAlert, $scope, TaskService);
                };
                $scope.export = function(){ //导出数据
                    exportData($scope);
                };
                //复选框的单个选择
                $scope.chk = function(data, checkb){
                    //ucTaskSelectOne($scope, data, checkb);
                    selectOne(data, checkb, 'isCheck');
                };
                //复选框的全选
                $scope.checkAll = function(all, datas){
                    //ucTaskSelectAll($scope, all, datas);
                    selectAll($scope, datas, 'isCheck', 'allIsCheck');
                };
                //处理单个歌曲
                $scope.dealSong = function(data){
                    //console.log(data);
                    editJump($http,'song',data,$state,SweetAlert,'_self');
                };
                $scope.rightClick = function (data) {
                    editJump($http,'song',data,$state,SweetAlert);
                };
                //分页函数
                $scope.choosePage = function(pageType){
                    console.log(pageType);
                    //var id = getIdByName($scope.params.selectedUser, $scope.cyr_list);
                    $stateParams.pageNo = $scope.params.currentPage;
                    //getUcTaskDatas('song', id, $scope, $stateParams, $http);
                    $state.go('app.uc_task_new_song.' + pageType, {pageNo: $scope.params.currentPage, taskStatus: $stateParams.taskStatus, uId: $stateParams.uId});
                };
                $scope.removeErrorType = function(obj){
                    obj.$parent.data.errorType.remove(obj.tag);
                };
                $scope.jumpInfo = function(type,id){
                    var param = {};
                    param[type+'Id'] = id;
                    param['lastPage'] = returnLastPageTime();
                    window.open($state.href(type+'Info',param),'_blank');
                };
            }]
        })
        //未完成
        .state('app.uc_task_new_song.uncompelete',{
            url: "/uncompelete?:cid&:productSongName&:productAlbumName&:productArtistName&:songId&:catalogSongName&:catalogAlbumName&:catalogArtistName&:dataState&:newOrFirst&:degree&:projectName&:distributionTimeStart&:distributionTimeEnd&:errorTypeTag&:auth",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/new_song/assigned.html',
                    controller: ["$scope", "$http", "$stateParams", "$filter", "$state", "SweetAlert", "BaseService", function($scope,$http,$stateParams,$filter,$state,SweetAlert,BaseService){
                        $stateParams.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
                        $scope.$parent.nowTab = "uc_task_new_song.uncompelete";

                        //console.log('未完成');
                        // if($stateParams.dataState == undefined){
                        //     $stateParams.dataState = '10';
                        // }
                        fillSearchConditionAgain($stateParams, $scope);
                        $stateParams.uId = JSON.parse(localStorage.getItem("ngStorage-loginUserInfo")).uid;
                       getUcTaskDatasNewSong('copyright', '1', $stateParams.uId, $scope, $stateParams, $http,SweetAlert);
                        $scope.$parent.pageType = "uncompelete";
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                        $scope.paramsSearchClick = function(){
                            $state.go('app.uc_task_new_song.uncompelete',{taskStatus:$scope.params.taskStatus,productSongName: $scope.params.productSongName, productAlbumName: $scope.params.productAlbumName, productArtistName: $scope.params.productArtistName, cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, dataState: $scope.params.dataState, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, projectName: $scope.params.projectName, distributionTimeStart: formatDate(Date.parse($scope.params.distributionTimeStart),$filter), distributionTimeEnd: formatDate(Date.parse($scope.params.distributionTimeEnd),$filter), auth: $scope.params.auth, errorTypeTag: $scope.params.errorTypeTag,urgentDegree:$scope.params.urgentDegree,language:$scope.params.language,songId:$scope.params.songId});
                        };
                        $scope.reset = function () {
                            $scope.params = {};
                            var promise = BaseService.service.clearExcelSearch(4);
                            if(promise) promise.then(function (res) {
                                if(res.code != '000000') sweetAlertCommon(SweetAlert, '清空excel查询失败', 'error');
                            })
                        }
                    }]
                }
            }
        })
        //已分配
        .state('app.uc_task_new_song.assigned',{
            url: "/assigned?:cid&:productSongName&:productAlbumName&:productArtistName&:songId&:catalogSongName&:catalogAlbumName&:catalogArtistName&:dataState&:newOrFirst&:degree&:projectName&:distributionTimeStart&:distributionTimeEnd&:errorTypeTag",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/new_song/assigned.html',
                    controller: ["$scope", "$stateParams", "$http", "$filter", "$state", "BaseService", function($scope, $stateParams, $http, $filter, $state, BaseService){
                        $scope.$parent.nowTab = "uc_task_new_song.assigned";

                        //console.log('已分配');
                        fillSearchConditionAgain($stateParams, $scope);
                       getUcTaskDatasNewSong('copyright', '1', $stateParams.uId, $scope, $stateParams, $http);
                        $scope.$parent.pageType = "assigned";
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                        $scope.paramsSearchClick = function(){
                            //console.log($scope.params.user);
                            // if($scope.params.user != undefined){
                                $state.go('app.uc_task_new_song.assigned',{taskStatus:$scope.params.taskStatus,productSongName: $scope.params.productSongName, productAlbumName: $scope.params.productAlbumName, productArtistName: $scope.params.productArtistName, songId: $scope.params.songId, cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, dataState: $scope.params.dataState, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, projectName: $scope.params.projectName, distributionTimeStart: formatDate(Date.parse($scope.params.distributionTimeStart),$filter), distributionTimeEnd: formatDate(Date.parse($scope.params.distributionTimeEnd),$filter), uId: $scope.params.uId, errorTypeTag: $scope.params.errorTypeTag,urgentDegree:$scope.params.urgentDegree,language:$scope.params.language});
                                //$state.go('uc_task_new_song.unassigned',{productSongName: $scope.params.productSongName, productAlbumName: $scope.params.productAlbumName, productArtistName: $scope.params.productArtistName, cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, filterCondition: $scope.params.filterCondition, songId: $scope.params.songId, creatTimeStart: formatDate(Date.parse($scope.params.creatTimeStart),$filter), creatTimeEnd: formatDate(Date.parse($scope.params.creatTimeEnd),$filter), projectName: $scope.params.projectName, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, uId: $scope.params.user.uId, errorTypeTag: $scope.params.errorTypeTag});
                            // } else {
                            //     $state.go('app.uc_task_new_song.assigned',{productSongName: $scope.params.productSongName, productAlbumName: $scope.params.productAlbumName, productArtistName: $scope.params.productArtistName, songId: $scope.params.songId, cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, dataState: $scope.params.dataState, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, projectName: $scope.params.projectName, distributionTimeStart: formatDate(Date.parse($scope.params.distributionTimeStart),$filter), distributionTimeEnd: formatDate(Date.parse($scope.params.distributionTimeEnd),$filter), uId: '', errorTypeTag: $scope.params.errorTypeTag});
                            // }
                        };
                        $scope.reset = function () {
                            $scope.params = {};
                            var promise = BaseService.service.clearExcelSearch(4);
                            if(promise) promise.then(function (res) {
                                if(res.code != '000000') sweetAlertCommon(SweetAlert, '清空excel查询失败', 'error');
                            })
                        }
                    }]
                }
            }
        })
        //未分配
        .state('app.uc_task_new_song.unassigned',{
            url: "/unassigned?:productSongName&:productAlbumName&:productArtistName&:cid&:catalogSongName&:catalogAlbumName&:catalogArtistName&:filterCondition&:songId&:creatTimeStart&:creatTimeEnd&:projectName&:newOrFirst&:degree&:errorTypeTag",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/new_song/unassigned.html',
                    controller: ["$scope", "$stateParams", "$http", "$filter", "$state", "BaseService", function($scope, $stateParams, $http, $filter,$state, BaseService){
                        $scope.$parent.nowTab = "uc_task_new_song.unassigned";

                        fillSearchConditionAgain($stateParams, $scope);

                       getUcTaskDatasNewSong('copyright', '0', $stateParams.uId, $scope, $stateParams, $http);
                        $scope.$parent.pageType = "unassigned";
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                        $scope.paramsSearchClick = function(){
                            console.log($scope.params.user);
                            if($scope.params.user != undefined){
                                $state.go('app.uc_task_new_song.unassigned',{productSongName: $scope.params.productSongName, productAlbumName: $scope.params.productAlbumName, productArtistName: $scope.params.productArtistName, cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, filterCondition: $scope.params.filterCondition, songId: $scope.params.songId, creatTimeStart: formatDate(Date.parse($scope.params.creatTimeStart),$filter), creatTimeEnd: formatDate(Date.parse($scope.params.creatTimeEnd),$filter), projectName: $scope.params.projectName, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, uId: $scope.params.user.uId, errorTypeTag: $scope.params.errorTypeTag,urgentDegree:$scope.params.urgentDegree,language:$scope.params.language});
                            } else {
                                $state.go('app.uc_task_new_song.unassigned',{productSongName: $scope.params.productSongName, productAlbumName: $scope.params.productAlbumName, productArtistName: $scope.params.productArtistName, cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, filterCondition: $scope.params.filterCondition, songId: $scope.params.songId, creatTimeStart: formatDate(Date.parse($scope.params.creatTimeStart),$filter), creatTimeEnd: formatDate(Date.parse($scope.params.creatTimeEnd),$filter), projectName: $scope.params.projectName, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, uId: '', errorTypeTag: $scope.params.errorTypeTag,urgentDegree:$scope.params.urgentDegree,language:$scope.params.language});
                            }
                        };
                        $scope.reset = function () {
                            $scope.params = {};
                            var promise = BaseService.service.clearExcelSearch(4);
                            if(promise) promise.then(function (res) {
                                if(res.code != '000000') sweetAlertCommon(SweetAlert, '清空excel查询失败', 'error');
                            })
                        }
                    }]
                }
            }
        })
        //已完成
        .state('app.uc_task_new_song.compelete',{
            url: "/compelete?:cid&:productSongName&:productAlbumName&:productArtistName&:songId&:catalogSongName&:catalogAlbumName&:catalogArtistName&:newOrFirst&:degree&:projectName&:distributionTimeStart&:distributionTimeEnd&:compeleteTimeStart&:compeleteTimeEnd",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/new_song/compelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$filter", "$state", "BaseService", function($scope,$http,$stateParams,$filter,$state,BaseService){
                        $scope.$parent.nowTab = "uc_task_new_song.compelete";

                        console.log('已完成');
                        fillSearchConditionAgain($stateParams, $scope);
                        getUcTaskDatasNewSong('copyright', '3', $stateParams.uId, $scope, $stateParams, $http);
                        $scope.$parent.pageType = "compelete";
                        //打开日期框
                        $scope.open = function(flag) {
                            $scope.dateStatus['opened' + flag] = true;
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false,
                            opened3: false,
                            opened4: false
                        };
                        $scope.paramsSearchClick = function(){
                            $state.go('app.uc_task_new_song.compelete',{taskStatus:$scope.params.taskStatus,productSongName: $scope.params.productSongName, productAlbumName: $scope.params.productAlbumName, productArtistName: $scope.params.productArtistName, cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, projectName: $scope.params.projectName, distributionTimeStart: formatDate(Date.parse($scope.params.distributionTimeStart),$filter), distributionTimeEnd: formatDate(Date.parse($scope.params.distributionTimeEnd),$filter), compeleteTimeStart: formatDate(Date.parse($scope.params.compeleteTimeStart),$filter), compeleteTimeEnd: formatDate(Date.parse($scope.params.compeleteTimeEnd),$filter),urgentDegree:$scope.params.urgentDegree,language:$scope.params.language,songId:$scope.params.songId});
                        };
                        $scope.reset = function () {
                            $scope.params = {};
                            var promise = BaseService.service.clearExcelSearch(4);
                            if(promise) promise.then(function (res) {
                                if(res.code != '000000') sweetAlertCommon(SweetAlert, '清空excel查询失败', 'error');
                            })
                        }
                    }]
                }
            }
        })
}]);

function fillSearchConditionAgain($stateParams, $scope){
    if(!checkEmpty($stateParams.taskStatus)) $scope.$parent.params.taskStatus = $stateParams.taskStatus + '';
    if($stateParams.productSongName != undefined && $stateParams.productSongName != ''){
        $scope.$parent.params.productSongName = $stateParams.productSongName;
    }
    if($stateParams.productAlbumName != undefined && $stateParams.productAlbumName != ''){
        $scope.$parent.params.productAlbumName = $stateParams.productAlbumName;
    }
    if($stateParams.productArtistName != undefined && $stateParams.productArtistName != ''){
        $scope.$parent.params.productArtistName = $stateParams.productArtistName;
    }
    if($stateParams.cid != undefined && $stateParams.cid != ''){
        $scope.$parent.params.cid = $stateParams.cid;
    }
    if($stateParams.catalogSongName != undefined && $stateParams.catalogSongName != ''){
        $scope.$parent.params.catalogSongName = $stateParams.catalogSongName;
    }
    if($stateParams.catalogAlbumName != undefined && $stateParams.catalogAlbumName != ''){
        $scope.$parent.params.catalogAlbumName = $stateParams.catalogAlbumName;
    }
    if($stateParams.catalogArtistName != undefined && $stateParams.catalogArtistName != ''){
        $scope.$parent.params.catalogArtistName = $stateParams.catalogArtistName;
    }
    if($stateParams.filterCondition != undefined && $stateParams.filterCondition != ''){
        $scope.$parent.params.filterCondition = $stateParams.filterCondition;
    }
    if($stateParams.songId != undefined && $stateParams.songId != ''){
        $scope.$parent.params.songId = $stateParams.songId;
    }
    if($stateParams.creatTimeStart != undefined && $stateParams.creatTimeStart != ''){
        $scope.$parent.params.creatTimeStart = $stateParams.creatTimeStart;
    }
    if($stateParams.creatTimeEnd != undefined && $stateParams.creatTimeEnd != ''){
        $scope.$parent.params.creatTimeEnd = $stateParams.creatTimeEnd;
    }
    if($stateParams.projectName != undefined && $stateParams.projectName != ''){
        $scope.$parent.params.projectName = $stateParams.projectName;
    }
    if($stateParams.newOrFirst != undefined && $stateParams.newOrFirst != ''){
        $scope.$parent.params.newOrFirst = $stateParams.newOrFirst;
    }
    if($stateParams.degree != undefined && $stateParams.degree != ''){
        $scope.$parent.params.degree = $stateParams.degree;
    }
    if($stateParams.dataState != undefined && $stateParams.dataState != ''){
        $scope.$parent.params.dataState = $stateParams.dataState;
        //$("select.uc_dataState").val($stateParams.dataState);
    }
    if($stateParams.degree != undefined && $stateParams.degree != ''){
        $scope.$parent.params.degree = $stateParams.degree;
    }
    if($stateParams.uId != undefined && $stateParams.uId != ''){
        $scope.$parent.params.uId = parseInt($stateParams.uId);
    }
    if($stateParams.errorTypeTag != undefined && $stateParams.errorTypeTag != ''){
        $scope.$parent.params.errorTypeTag = $stateParams.errorTypeTag;
        //$("select.uc_auth").val($stateParams.auth);
    }
    if($stateParams.auth != undefined && $stateParams.auth != ''){
        $scope.$parent.params.auth = $stateParams.auth;
        //$("select.uc_auth").val($stateParams.auth);
    }
    if($stateParams.distributionTimeStart != undefined && $stateParams.distributionTimeStart != ''){
        $scope.$parent.params.distributionTimeStart = $stateParams.distributionTimeStart;
    }
    if($stateParams.distributionTimeEnd != undefined && $stateParams.distributionTimeEnd != ''){
        $scope.$parent.params.distributionTimeEnd = $stateParams.distributionTimeEnd;
    }
    if($stateParams.compeleteTimeStart != undefined && $stateParams.compeleteTimeStart != ''){
        $scope.$parent.params.compeleteTimeStart = $stateParams.compeleteTimeStart;
    }
    if($stateParams.compeleteTimeEnd != undefined && $stateParams.compeleteTimeEnd != ''){
        $scope.$parent.params.compeleteTimeEnd = $stateParams.compeleteTimeEnd;
    }
    if(!isPropertyEmpty($stateParams.urgentDegree)) $scope.$parent.params.urgentDegree = $stateParams.urgentDegree;
    if(!isPropertyEmpty($stateParams.language)) $scope.$parent.params.language = $stateParams.language;
}

//根据用户id选出用户
function filterUserById(users, id){
    return filterElemByProperty(users, 'uId', id);
}

//根据元素的某个属性从列表中选出某个元素
function filterElemByProperty(array, propertyName, propertyValue){
    //var sss = new Array();
    for(var i = 0; i < array.length; i++){
        var elem = array[i];
        if(elem[propertyName] == propertyValue){
            return elem;
        }
    }
}

function checkBoxSingle(data, checkb){
    console.log('2333');
    selectOne(data, checkb, 'isCheck');
}

angular.module('app.routes').controller('NewSongImportController', ["$scope", "$uibModalInstance", "SweetAlert", "$stateParams", "$timeout", function($scope,$uibModalInstance,SweetAlert,$stateParams,$timeout){
    $scope.cancel = function(){
        $uibModalInstance.dismiss('cancel');
    };
    $scope.downloadTpl = function(){
        var url = environment + '/cmssearch/resources/excel/newsong.xlsx';
        window.open(url);
    };
    $scope.import = function(){
        var filename = $('#excelFile').val();
        if(filename == undefined || filename == ''){
            $scope.error = '请选择上传的excel文件';
            return;
        }
        var url = _search_url + "/search/task/copyright/exlQuery.json";
        ajaxFileUpload(url, $scope, '', $uibModalInstance, SweetAlert,'excelFile',$stateParams,undefined,$timeout);
    };
}]);
angular.module('app.routes').controller('NewSongExportController', ["$scope", "$uibModalInstance", "SweetAlert", "$stateParams", "datas", "params", function($scope,$uibModalInstance,SweetAlert,$stateParams,datas,params){
    $scope.cancel = function(){
        $uibModalInstance.dismiss('cancel');
    };
    $scope.export = function(){
        var _data = {};
        if(checkEmpty(datas))
            return sweetAlertCommon(SweetAlert, '暂无数据', 'warning');
        if(checkEmpty($scope.export.type))
            return sweetAlertCommon(SweetAlert, '请选择导出操作类型', 'warning');
        _data = compeleteUrlDataNewSong(_data, 0, $stateParams.uId, $scope, $stateParams);
        switch($scope.export.type){
            case '1':
                var ids = [];
                datas.forEach(function (val) {
                    if(val.isCheck) ids.push(val['copyrightId']);
                });
                if(ids.length == 0){
                    return sweetAlertCommon(SweetAlert, '请选择要导出的数据', 'warning');
                }
                _data.copyrightIds = ids;
                break;
            case '2':
                if(checkEmpty($scope.export.startNo) || checkEmpty($scope.export.endNo)) return sweetAlertCommon(SweetAlert, '请填写完整的序号起止数目', 'warning');
                // _data = excludeProperties(params,['pageSize','pageNo']);
                _data.startNo = $scope.export.startNo - 1,_data.endNo = $scope.export.endNo - 1;
                break;
            case '3':
                if(checkEmpty($scope.export.pageStart) || checkEmpty($scope.export.pageEnd)) return sweetAlertCommon(SweetAlert, '请填写完整的起止页数', 'warning');
                // _data = excludeProperties(params,['pageSize','pageNo']);
                _data.startNo = ($scope.export.pageStart - 1) * params.itemsPerPage;
                _data.endNo = ($scope.export.pageEnd) * params.itemsPerPage - 1;
                break;
        }
        window.open(_search_url + 'search/task/copyright/export.json?data=' + JSON.stringify(_data), '_blank');
    };
}]);
angular.module('app.routes').controller('NewSongDeleteController', ["$scope", "$uibModalInstance", "$http", "SweetAlert", "$stateParams", "$timeout", "datas", "params", function($scope,$uibModalInstance,$http,SweetAlert,$stateParams,$timeout,datas,params){
    $scope.export = {};
    $scope.cancel = function(){
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function(){
        console.log(datas);
        console.log(params);
        var _data = {};
        if(checkEmpty(datas))
            return sweetAlertCommon(SweetAlert, '暂无数据', 'warning');
        if(checkEmpty($scope.export.type))
            return sweetAlertCommon(SweetAlert, '请选择导出操作类型', 'warning');
        if(checkEmpty($stateParams.pageSize)) $stateParams.pageSize = 100;
        _data = compeleteUrlDataNewSong(_data, 0, $stateParams.uId, $scope, $stateParams);
        var url = uc_new_song + "copyrightDel.json?" + CALLBACK + "&data=";
        switch($scope.export.type){
            case '1':
                var ids = [];
                datas.forEach(function (val) {
                    if(val.isCheck) ids.push(val['taskId']);
                });
                if(ids.length == 0){
                    return sweetAlertCommon(SweetAlert, '请选择要导出的数据', 'error');
                }
                _data.taskIds = ids;
                break;
            case '2':
                if(checkEmpty($scope.export.startNo) || checkEmpty($scope.export.endNo)) return sweetAlertCommon(SweetAlert, '请填写完整的序号起止数目', 'warning');
                // _data = excludeProperties(params,['pageSize','pageNo']);
                _data.startNo = $scope.export.startNo - 1,_data.endNo = $scope.export.endNo - 1;
                break;
            case '3':
                if(checkEmpty($scope.export.pageStart) || checkEmpty($scope.export.pageEnd)) return sweetAlertCommon(SweetAlert, '请填写完整的起止页数', 'warning');
                // _data = excludeProperties(params,['pageSize','pageNo']);
                _data.startNo = ($scope.export.pageStart - 1) * params.itemsPerPage;
                _data.endNo = ($scope.export.pageEnd) * params.itemsPerPage - 1;
                break;
        }
        url += encodeURIComponent(JSON.stringify(_data));
        $http.jsonp(url).success(function(res){
            if(res.returnCode == '000000'){
                sweetAlertCommon(SweetAlert);
                $timeout(function () {
                    location.reload();
                }, 1000);
            } else{
                sweetAlertCommon(SweetAlert, res.description, 'warning');
            }
        }).error(function () {
            sweetAlertCommon(SweetAlert, "批量删除接口异常", 'warning');
        })
    };
}]);
/**
 * Created by YuChunzhuo on 2016/3/28.
 */
angular.module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.uc_task_new_song_tag',{
            url: '/uc_atask_new_song_tag?:pId&:status&:taskStatus&:uId&:pageNo&:pageSize&:taskStatusList',
            templateUrl: 'app/views/uc/new_song_tag/uc_task_new_song_tag.html',
            controller: ["$scope", "$http", "$stateParams", "$cookies", "$filter", "$timeout", "$rootScope", "display", "$state", function($scope,$http,$stateParams,$cookies,$filter,$timeout,$rootScope,display,$state){
                //记录当前界面的tab
                $scope.nowTab = "";

                $scope.params = new Object();
                $scope.datas = [];
                $scope.cyr_list = [];
                //用于判断当前url是否有userId参数
                $scope.userId = $stateParams.uId;
                if($scope.userId == undefined && ($stateParams.taskStatus == 1 || $stateParams.taskStatus == 2)){
                    $scope.userId = -1;
                }
                $scope.userRole = 'cyr';
                $scope.taskStatus = $stateParams.taskStatus;
                $scope.pId = $stateParams.pId;
                $scope.uId = _session.id;
                var param = {};
                param.pId = $stateParams.pId;
                //param.uId = -1;
                param.status = $stateParams.status;
                var p_param= {};
                p_param.id = $stateParams.pId;
                var p_type = '';
                //获取项目的流程
                $http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data='+ JSON.stringify(p_param)).success(function(res){
                    $scope.p_type = res.data.list[0].flowType;
                    $scope.cyr_list = [];
                    for(var i = 0; i < res.data.list[0].cyrList.length;i++){
                        $scope.cyr_list.push(res.data.list[0].cyrList[i]);
                    }
                    for(var i = 0; i < res.data.list[0].fzrList.length;i ++){
                        $scope.cyr_list.push(res.data.list[0].fzrList[i]);
                        if(res.data.list[0].fzrList[i].uid == _session.id){
                            $scope.userRole = 'fzr';
                        }
                    }
                });
                $scope.user = undefined;
                //获取项目是第多少个自定义权限分配模板（A,B,AB之类的）
                $scope.authoritySetting = [];
                $http.jsonp(uc_new_song_auth + "?" + CALLBACK + "&pId=" + $stateParams.pId).success(function(res){
                    if(res.returnCode == "000000"){
                        $scope.authoritySetting = res.list;
                        $scope.params.task_auth_setting = $scope.authoritySetting[0];
                    }
                });

                $scope.selectCyr = function(v){ //select选择参与人分配/查看任务的方法
                    //console.log($scope.user);
                    //console.log(v);
                    $scope.user = {};
                    if(v != undefined){
                        $scope.user.name = v.uName;
                        $scope.user.id = v.uid;
                    }
                };
                //分配任务
                $scope.distributionTask = function(){
                    //console.log($scope.params.task_auth_setting);
                    authSetting = $scope.params.task_auth_setting;
                    //console.log($scope.datas);
                    var taskIds = getPropertyFromCheckBox($scope.datas, "isCheck", true, "taskId");
                    //console.log(taskIds);
                    if($scope.user == undefined || $scope.user.id == undefined){
                        alertTipCommon($timeout,$rootScope,'没有选择分配人',display);
                        return;
                    }
                    //分配任务
                    //assignTask('song', uId, $scope, $stateParams, $http);
                    assignTaskNewSong(taskIds, authSetting.flowId, authSetting.auth, $scope.user.id, $scope, $http,$timeout,$rootScope,display);
                };

                $scope.dealNewSongTag = function(songId, taskId){
                    $http.jsonp(http_url + '/tagRel/edit/song/' + songId + '.json?' + CALLBACK + '&taskId=' + taskId).success(function(res){ //锁定打标签状态
                        if(res.status != 1){
                            alertTipCommon($timeout,$rootScope,'该数据无编辑权限',display);
                            return;
                        }else{
                            alertTipCommon($timeout,$rootScope,'状态锁定成功',display);
                        }
                        var url = $state.href('app.tagging.info',{songId:songId});    //状态锁定成功后进入打标签页面
                        window.open(url, '_blank');
                    })
                };

                $scope.export = function(){ //导出数据
                    exportData($scope);
                };
                //复选框的单个选择
                $scope.chk = function(data, checkb){
                    //ucTaskSelectOne($scope, data, checkb);
                    selectOne(data, checkb, 'isCheck');
                };
                //复选框的全选
                $scope.checkAll = function(all, datas){
                    //ucTaskSelectAll($scope, all, datas);
                    selectAll($scope, datas, 'isCheck', 'allIsCheck');
                };
                //分页函数
                $scope.choosePage = function(pageType){
                    //var id = getIdByName($scope.params.selectedUser, $scope.cyr_list);
                    $stateParams.pageNo = $scope.params.currentPage;
                    //getUcTaskDatas('song', id, $scope, $stateParams, $http);
                    $state.go('app.uc_task_new_song_tag.' + pageType, {pageNo: $scope.params.currentPage, taskStatus: $stateParams.taskStatus, uId: $stateParams.uId});
                };
                //预设分配AB权限
                $scope.authoritySetting = [
                    {
                        name:'全权限',
                        value:'AB'
                    },
                    {
                        name:'A权限',
                        value:'A'
                    },
                    {
                        name:'B权限',
                        value:'B'
                    }
                ];
                $scope.setting = $scope.authoritySetting[0];

                $scope.removeErrorType = function(obj){
                    obj.$parent.data.errorType.remove(obj.tag);
                };
                $scope.jumpInfo = function(type,id){
                    var param = {};
                    param[type+'Id'] = id;
                    param['lastPage'] = returnLastPageTime();
                    window.open($state.href(type+'Info',param),'_blank');
                };
            }]
        })
        //未分配
        .state('app.uc_task_new_song_tag.unassigned',{
            url: "/unassigned?:catalogSongName&:catalogAlbumName&:catalogArtistName&:cid&:filterCondition&:songId&:creatTimeStart&:creatTimeEnd&:projectName&:newOrFirst&:degree&:errorTypeTag",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/new_song_tag/unassigned.html',
                    controller: ["$scope", "$stateParams", "$http", "$filter", "$state", function($scope, $stateParams, $http, $filter,$state){
                        $scope.nowTab = "unassigned";
                        fillSearchCondition($stateParams, $scope);

                        getUcTaskDatasNewSong('copyright', '0', $stateParams.uId, $scope, $stateParams, $http);
                        $scope.$parent.pageType = "unassigned";
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                        $scope.paramsSearchClick = function(){
                            $state.go('app.uc_task_new_song_tag.unassigned',{cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, filterCondition: $scope.params.filterCondition, songId: $scope.params.songId, creatTimeStart: formatDate(Date.parse($scope.params.creatTimeStart),$filter), creatTimeEnd: formatDate(Date.parse($scope.params.creatTimeEnd),$filter), projectName: $scope.params.projectName, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, errorTypeTag: $scope.params.errorTypeTag});
                        };
                        $scope.reset = function () {
                            $scope.params = {};
                        };
                    }]
                }
            }
        })
        //已分配
        .state('app.uc_task_new_song_tag.assigned',{
            url: "/assigned?:cid&:catalogSongName&:catalogAlbumName&:catalogArtistName&:songId&:tagStatus&:newOrFirst&:degree&:projectName&:distributionTimeStart&:distributionTimeEnd",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/new_song_tag/assigned.html',
                    controller: ["$scope", "$stateParams", "$http", "$filter", "$state", function($scope, $stateParams, $http, $filter, $state){
                        $scope.nowTab = "assigned";

                        fillSearchCondition($stateParams, $scope);
                        getUcTaskDatasNewSong('copyright', '1', $stateParams.uId, $scope, $stateParams, $http);
                        $scope.$parent.pageType = "assigned";
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                        $scope.paramsSearchClick = function(){
                            if($scope.params.user != undefined){
                                $state.go('app.uc_task_new_song_tag.assigned',{cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, songId: $scope.params.songId, tagStatus: $scope.params.tagStatus, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, projectName: $scope.params.projectName, distributionTimeStart: formatDate(Date.parse($scope.params.distributionTimeStart),$filter), distributionTimeEnd: formatDate(Date.parse($scope.params.distributionTimeEnd),$filter), uId: $scope.params.user.uid, errorTypeTag: $scope.params.errorTypeTag});
                            } else {
                                $state.go('app.uc_task_new_song_tag.assigned',{cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, songId: $scope.params.songId, tagStatus: $scope.params.tagStatus, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, projectName: $scope.params.projectName, distributionTimeStart: formatDate(Date.parse($scope.params.distributionTimeStart),$filter), distributionTimeEnd: formatDate(Date.parse($scope.params.distributionTimeEnd),$filter), uId: '', errorTypeTag: $scope.params.errorTypeTag});
                            }
                        };
                        $scope.reset = function () {
                            $scope.params = {};
                        };
                    }]
                }
            }
        })
        //未完成
        .state('app.uc_task_new_song_tag.uncompelete',{
            url: "/uncompelete?:cid&:catalogSongName&:catalogAlbumName&:catalogArtistName&:songId&:tagStatus&:newOrFirst&:degree&:projectName&:distributionTimeStart&:distributionTimeEnd&:errorTypeTag",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/new_song_tag/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$filter", "$state", function($scope,$http,$stateParams,$filter,$state){
                        $scope.nowTab = "uncompelete";

                        if($stateParams.tagStatus == undefined){
                            $stateParams.tagStatus = '10';
                        }
                        fillSearchCondition($stateParams, $scope);
                        getUcTaskDatasNewSong('copyright', '1', $stateParams.uId, $scope, $stateParams, $http);
                        $scope.$parent.pageType = "uncompelete";
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                        $scope.paramsSearchClick = function(){
                            $state.go('app.uc_task_new_song_tag.uncompelete',{cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, songId:$scope.params.songId, tagStatus: $scope.params.tagStatus, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, projectName: $scope.params.projectName, distributionTimeStart: formatDate(Date.parse($scope.params.distributionTimeStart),$filter), distributionTimeEnd: formatDate(Date.parse($scope.params.distributionTimeEnd),$filter), errorTypeTag: $scope.params.errorTypeTag});
                        };
                        $scope.reset = function () {
                            $scope.params = {};
                        };
                    }]
                }
            }
        })
        //已完成
        .state('app.uc_task_new_song_tag.compelete',{
            url: "/compelete?:cid&:catalogSongName&:catalogAlbumName&:catalogArtistName&:songId&:newOrFirst&:degree&:projectName&:distributionTimeStart&:distributionTimeEnd&:compeleteTimeStart&:compeleteTimeEnd",
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/new_song_tag/compelete.html',
                    controller: ["$scope", "$http", "$stateParams", "$filter", "$state", function($scope,$http,$stateParams,$filter,$state){
                        $scope.nowTab = "compelete";

                        console.log('已完成');
                        fillSearchCondition($stateParams, $scope);
                        getUcTaskDatasNewSong('copyright', '3', $stateParams.uId, $scope, $stateParams, $http);
                        $scope.$parent.pageType = "compelete";
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            } else if (flag == 3){
                                $scope.dateStatus.opened3 = true;
                            } else if (flag == 4){
                                $scope.dateStatus.opened4 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false,
                            opened3: false,
                            opened4: false
                        };
                        $scope.paramsSearchClick = function(){
                            $state.go('app.uc_task_new_song_tag.compelete',{cid: $scope.params.cid, catalogSongName: $scope.params.catalogSongName, catalogAlbumName: $scope.params.catalogAlbumName, catalogArtistName: $scope.params.catalogArtistName, songId: $scope.params.songId, newOrFirst: $scope.params.newOrFirst, degree: $scope.params.degree, projectName: $scope.params.projectName, distributionTimeStart: formatDate(Date.parse($scope.params.distributionTimeStart),$filter), distributionTimeEnd: formatDate(Date.parse($scope.params.distributionTimeEnd),$filter), compeleteTimeStart: formatDate(Date.parse($scope.params.compeleteTimeStart),$filter), compeleteTimeEnd: formatDate(Date.parse($scope.params.compeleteTimeEnd),$filter)});
                        };
                        $scope.reset = function () {
                            $scope.params = {};
                        };
                    }]
                }
            }
        })
}]);

function fillSearchCondition($stateParams, $scope){
    if($stateParams.productSongName != undefined && $stateParams.productSongName != ''){
        $scope.$parent.params.productSongName = $stateParams.productSongName;
    }
    if($stateParams.productAlbumName != undefined && $stateParams.productAlbumName != ''){
        $scope.$parent.params.productAlbumName = $stateParams.productAlbumName;
    }
    if($stateParams.productArtistName != undefined && $stateParams.productArtistName != ''){
        $scope.$parent.params.productArtistName = $stateParams.productArtistName;
    }
    if($stateParams.cid != undefined && $stateParams.cid != ''){
        $scope.$parent.params.cid = $stateParams.cid;
    }
    if($stateParams.catalogSongName != undefined && $stateParams.catalogSongName != ''){
        $scope.$parent.params.catalogSongName = $stateParams.catalogSongName;
    }
    if($stateParams.catalogAlbumName != undefined && $stateParams.catalogAlbumName != ''){
        $scope.$parent.params.catalogAlbumName = $stateParams.catalogAlbumName;
    }
    if($stateParams.catalogArtistName != undefined && $stateParams.catalogArtistName != ''){
        $scope.$parent.params.catalogArtistName = $stateParams.catalogArtistName;
    }
    if($stateParams.filterCondition != undefined && $stateParams.filterCondition != ''){
        $scope.$parent.params.filterCondition = $stateParams.filterCondition;
    }
    if($stateParams.songId != undefined && $stateParams.songId != ''){
        $scope.$parent.params.songId = $stateParams.songId;
    }
    if($stateParams.creatTimeStart != undefined && $stateParams.creatTimeStart != ''){
        $scope.$parent.params.creatTimeStart = $stateParams.creatTimeStart;
    }
    if($stateParams.creatTimeEnd != undefined && $stateParams.creatTimeEnd != ''){
        $scope.$parent.params.creatTimeEnd = $stateParams.creatTimeEnd;
    }
    if($stateParams.projectName != undefined && $stateParams.projectName != ''){
        $scope.$parent.params.projectName = $stateParams.projectName;
    }
    if($stateParams.newOrFirst != undefined && $stateParams.newOrFirst != ''){
        $scope.$parent.params.newOrFirst = $stateParams.newOrFirst;
    }
    if($stateParams.degree != undefined && $stateParams.degree != ''){
        $scope.$parent.params.degree = $stateParams.degree;
    }
    if($stateParams.dataState != undefined && $stateParams.dataState != ''){
        $scope.$parent.params.dataState = $stateParams.dataState;
        //$("select.uc_tagStatus").val($stateParams.dataState);
    }
    if($stateParams.tagStatus != undefined && $stateParams.tagStatus != ''){
        $scope.$parent.params.tagStatus = $stateParams.tagStatus;
        //$("select.uc_tagStatus").val($stateParams.dataState);
    }
    if($stateParams.degree != undefined && $stateParams.degree != ''){
        $scope.$parent.params.degree = $stateParams.degree;
    }
    if($stateParams.uId != undefined && $stateParams.uId != ''){
        //var user = filterUserById($scope.$parent.users, $stateParams.uId);
        //if(user != undefined){
        //    $("select.uc_user").find("option[text='余春灼']").attr("selected",true);
        //    //$scope.$parent.params.user = user.uName;
        //}
    }
    if($stateParams.errorTypeTag != undefined && $stateParams.errorTypeTag != ''){
        $scope.$parent.params.errorTypeTag = $stateParams.errorTypeTag;
        //$("select.uc_auth").val($stateParams.auth);
    }
    if($stateParams.auth != undefined && $stateParams.auth != ''){
        $scope.$parent.params.auth = $stateParams.auth;
        //$("select.uc_auth").val($stateParams.auth);
    }
    if($stateParams.distributionTimeStart != undefined && $stateParams.distributionTimeStart != ''){
        $scope.$parent.params.distributionTimeStart = $stateParams.distributionTimeStart;
    }
    if($stateParams.distributionTimeEnd != undefined && $stateParams.distributionTimeEnd != ''){
        $scope.$parent.params.distributionTimeEnd = $stateParams.distributionTimeEnd;
    }
    if($stateParams.compeleteTimeStart != undefined && $stateParams.compeleteTimeStart != ''){
        $scope.$parent.params.compeleteTimeStart = $stateParams.compeleteTimeStart;
    }
    if($stateParams.compeleteTimeEnd != undefined && $stateParams.compeleteTimeEnd != ''){
        $scope.$parent.params.compeleteTimeEnd = $stateParams.compeleteTimeEnd;
    }
}

//根据用户id选出用户
function filterUserById(users, id){
    return filterElemByProperty(users, 'uId', id);
}

//根据元素的某个属性从列表中选出某个元素
function filterElemByProperty(array, propertyName, propertyValue){
    //var sss = new Array();
    for(var i = 0; i < array.length; i++){
        var elem = array[i];
        if(elem[propertyName] == propertyValue){
            return elem;
        }
    }
}
/**
 * Created by YuChunzhuo on 2016/1/5.
 * Reconstruction by YuChunzhuo on 2016/8/22.
 */

(function(){
    'use strict';
    angular.module('app.routes').config(SongTaskConfig);
    SongTaskConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
    function SongTaskConfig($stateProvider, helper){
        $stateProvider
            .state('app.songTask', {
                url: '/task',
                templateUrl: helper.basepath('partials/container-tpl.html'),
                controller: 'TaskSongHeadController'
            })
            .state('app.songTask.module', {
                url: '/song?:module&:projectId&:pageNo&:pageSize&:artistName&:albumName&:lyricser&:composer&:urgentDegree&:mscoreMin&:mscoreMax&:hotScoreMin&:hotScoreMax&:tags&:' +
                'status&:createStartTime&:createEndTime&:uid&:lastEditSearch&:distributionStartTime&:distributionEndTime&:completeStartTime&:completeEndTime&:copyrightId&:songIds' +
                '&:songName&:taskStatus&:tagBeans',
                views: {
                    'condition': {
                        templateUrl: helper.basepath('uc/song/song-condition.html')
                    },
                    'data-list': {
                        templateUrl: helper.basepath('uc/song/song-list.html'),
                        controller: 'TaskSongListController'
                    }
                }
            })
    }

    angular.module('app.routes').controller('TaskSongHeadController', ["$scope", "$state", "$stateParams", "$http", "$cookies", "SweetAlert", function($scope, $state, $stateParams, $http, $cookies, SweetAlert){
        $scope.container = new Container('工单/歌曲存量工单');
        $scope.taskSwitch = function (module, projectId) {
            taskSwitch(module, projectId, $scope, $state);
        };
        getTagList(3,$scope,$stateParams,$http,$cookies,SweetAlert,1);
    }]);
    angular.module('app.routes').controller('TaskSongListController', ["$scope", "$state", "$http", "TaskService", "$stateParams", "SweetAlert", function ($scope, $state, $http, TaskService, $stateParams, SweetAlert) {
        taskListService($stateParams, $scope, TaskService);
        taskLoadSearch('song', $scope, TaskService);
        $scope.edit = function (data, jump) {
            editJump($http, 'song', data, $state, SweetAlert, jump);
        }
    }])
})();
/**
 * Created by hao.cheng on 2016/7/25.
 */
(function () {
    'use strict';

    angular.module('app.routes').config(PreCatalogConfig);
    PreCatalogConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
    function PreCatalogConfig($stateProvider, helper) {
        $stateProvider
            .state('app.preCatalog',{
                url: '/preCatalog',
                views: {
                    '': {
                        templateUrl: helper.basepath('precatalog/precatalog-head.html'),
                        controller: 'PreCatalogHeadCtrl'
                    }
                }
            })
            .state('app.preCatalog.list',{
                url: '/list?:copyrightId&:catalogStatus&:songStatus&:istag&:startTime&:endTime&:uid&:lastEditSearch&:pageNo&:pageSize',
                views: {
                    'data-list': {
                        templateUrl: helper.basepath('precatalog/precatalog-list.html'),
                        controller: 'PreCatalogListCtrl'
                    }
                }
            })
    }

    /*预编目controller*/
    angular.module('app.routes').controller('PreCatalogHeadCtrl',["$scope", "$state", "$stateParams", "BaseService", "SweetAlert", function ($scope,$state,$stateParams,BaseService,SweetAlert) {
        $scope.form = {};
        $scope.submit = function () { //查询按钮
            if(!$scope.form.pageNo) $scope.form.pageNo = 1;
            if(!$scope.form.pageSize) $scope.form.pageSize = 100;
            $state.go('app.preCatalog.list',$scope.form);
        };
        $scope.new = function(type){    //新建歌曲
            addNewMaterial(type,$state,$stateParams);
        };
        $scope.reset = function () {
            for(var p in $scope.form) $scope.form[p] = '';
            var promise = BaseService.service.clearExcelSearch(3);
            if(promise) promise.then(function (res) {
                if(res.code != '000000') sweetAlertCommon(SweetAlert, '清空excel查询失败', 'error');
            })
        }
    }]);
    angular.module('app.routes').controller('PreCatalogListCtrl',["$stateParams", "$scope", "PreCatalogService", "BaseService", "SweetAlert", "$state", function ($stateParams,$scope,PreCatalogService,BaseService,SweetAlert,$state ) {
        $scope.$parent.form = inherit($stateParams);
        console.log($scope.$parent.form);
        activate();
        function activate() { //获取预编目数据
            var _param = excludeProperties($stateParams,['PreCatalogService']);
            if($stateParams)
                var promise = PreCatalogService.service.preCatalogSearch(encodeURIComponent(angular.toJson(_param)));
            if(promise)
                var listPromise = promise.then(function (res) {
                    console.log(res);
                    $scope.$parent.datas = res.body.list;
                });
            _param.isQueryCount = 1;        //异步count
            PreCatalogService.service.preCatalogSearch(encodeURIComponent(angular.toJson(_param))).then(function (res) {
                paginationDiscreteness($scope,5,res.body.pageSize,res.body.totalCount,res.body.pageTotal,res.body.pageNo);
            })
        }
        $scope.delete = function (copyId) { //删除按钮
            sweetAlertConfirm(SweetAlert,function () {
                var _promise = PreCatalogService.service.deleteCatalog(copyId);
                if(_promise) _promise.then(function (res) {
                    if(res.status == 1) return sweetAlertCommon(SweetAlert, res.msg, 'success'),activate();
                    else return sweetAlertCommon(SweetAlert, res.msg, 'error');
                });
            },'warning');
        };
        $scope.tagging = function (data, blank) {  //打标签操作
            taggingAloneCheck(data.songId, blank, 'song', data.taskId, $state, SweetAlert);
        };
        $scope.dataConfirm = function (copyId) {      //确认按钮
            PreCatalogService.service.preCatalogConfirm(copyId).then(function (res) {
                if(res.status == 1) return sweetAlertCommon(SweetAlert, res.msg, 'success'),activate();
                else return sweetAlertCommon(SweetAlert, res.msg, 'error');
            });
        }
    }]);
    angular.module('app.routes').controller('PreCatalogModal',["$scope", "$uibModalInstance", "datas", "SweetAlert", "$stateParams", "form", "PreCatalogService", function ($scope,$uibModalInstance,datas,SweetAlert,$stateParams,form,PreCatalogService) {
        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        $scope.export = function () {
            var _data = {};
            if(checkEmpty(datas))
                return sweetAlertCommon(SweetAlert, '暂无数据', 'warning');
            if(checkEmpty($scope.export.type))
                return sweetAlertCommon(SweetAlert, '请选择导出操作类型', 'warning');
            switch($scope.export.type){
                case '1':
                    var ids = [];
                    datas.forEach(function (val) {
                        if(val.isCheck) ids.push(val['copyrightId']);
                    });
                    if(ids.length == 0){
                        return sweetAlertCommon(SweetAlert, '请选择要导出的数据', 'warning');
                    }
                    _data.copyrightIds = ids;
                    break;
                case '2':
                    if(checkEmpty($scope.export.startNo) || checkEmpty($scope.export.endNo)) return sweetAlertCommon(SweetAlert, '请填写完整的序号起止数目', 'warning');
                    _data = excludeProperties(form,['pageSize','pageNo']);
                    _data.startNo = $scope.export.startNo - 1,_data.endNo = $scope.export.endNo - 1;
                    break;
                case '3':
                    if(checkEmpty($scope.export.pageStart) || checkEmpty($scope.export.pageEnd)) return sweetAlertCommon(SweetAlert, '请填写完整的起止页数', 'warning');
                    _data = excludeProperties(form,['pageSize','pageNo']);
                    _data.startNo = ($scope.export.pageStart - 1) * form.pageSize;
                    _data.endNo = ($scope.export.pageEnd) * form.pageSize - 1;
                    break;
            }
            window.open(CATALOG_EXPORT + '?' + CALLBACK + '&data=' + JSON.stringify(_data), '_blank');
        };
        $scope.import = function () {
            var _filename = $('#excelFile').val();
            if(checkEmpty(_filename))
                return sweetAlertCommon(SweetAlert,'请选择上传的excel文件','warning');
            else
                ajaxFileUpload(CATALOG_IMPORT, $scope, '', $uibModalInstance, SweetAlert,'excelFile',$stateParams,undefined);
        };
        $scope.emergImport = function (flag) { //紧急歌曲导入
            var _filename = $('#file').val();
            if(checkEmpty(_filename)){
                return sweetAlertCommon(SweetAlert,'请选择上传的excel文件','warning');
            }else{
                var _data;
                if(flag) _data = {isNeedRelated: true};
                else _data = {isNeedRelated: false};
                ajaxFileUpload(CATALOG_EMERGIMPORT, $scope, _data, $uibModalInstance, SweetAlert,'file',$stateParams,undefined);
            }
        };
        $scope.downloadTpl = function () { //导入查询模板下载
            window.open(environment+ '/cmssearch/resources/excel/song.xls','_blank');
        };
        $scope.downloadEmergTpl = function () { //紧急歌曲导入模板下载
            window.open(CATALOG_EMERGTPL, '_blank');
        }
    }]);
})();
/**
 * Created by hao.cheng on 2016/7/25.
 */
(function () {
    'use strict';

    angular.module('app.routes').service('PreCatalogService',PreCatalogService);
    PreCatalogService.$inject = ['$http','SweetAlert'];
    function PreCatalogService($http,SweetAlert) {
        var _self = this;
        _self.service = {
            'preCatalogSearch': preCatalogSearch,
            'deleteCatalog': deleteCatalog,
            'preCatalogExport': preCatalogExport,
            'preCatalogConfirm': preCatalogConfirm
        };
        function preCatalogSearch(data) {   //预编目工单搜索
            return $http.jsonp(SEARCH_PRECATALOG + '?' + CALLBACK + '&data=' + data).then(function (res) {
                return res.data;
            },function () {
               sweetAlertCommon(SweetAlert,'预编目搜索接口请求异常','warning');
            });
        }
        function deleteCatalog(copyrightIds) {  //删除编目记录
            return $http.jsonp(CATALOG_DELETE + '?' + CALLBACK + '&copyrightIds=' + copyrightIds).then(function (res) {
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert,'编目删除接口请求异常','warning');
            });
        }
        function preCatalogExport(data) { //预编目导出
            return $http.jsonp(CATALOG_EXPORT + '?' + CALLBACK + '&data=' + data).then(function (res) {
                return res.data;
            },function () {
                sweetAlertCommon(SweetAlert, '预编目导出接口请求异常', 'warning');
            });
        }
        function preCatalogConfirm(copyIds) { //预编目数据强制确认完成
            return $http(new PostSetup(CATALOG_CONFIRM, 'copyrightIds=' + copyIds)).then(function (res) {
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '预编目强制确认接口请求异常', 'warning');
            })
        }
    }
}());
/**
 * Created by YuChunzhuo-Dev on 2016/8/22.
 */
(function(){
    'use strict';
    angular.module('app.routes').config(RegularConfig);
    RegularConfig.$inject = ['$stateProvider','RouteHelpersProvider'];
    function RegularConfig($stateProvider, helper){
        $stateProvider
            .state('app.regular', {
                url:'/regular',
                templateUrl: helper.basepath('uc/regular/regular.html')
            })
            .state('app.regular.list', {
                url:'/list?:triggerName&:pageSize&:pageNo',
                views:{
                    'page':{
                        templateUrl: helper.basepath('uc/regular/regular-list.html')
                    }
                }
            })
            .state('app.regular.edit', {
                url:'/edit?:taskId&:readonly',
                views:{
                    'page':{
                        templateUrl: helper.basepath('uc/regular/regular-edit.html')
                    }
                }
            })
    }

    angular.module('app.routes').controller('RegularListController', ["$scope", "$stateParams", "RegularService", "SweetAlert", function($scope, $stateParams, RegularService, SweetAlert){
        $scope.form = inherit($stateParams);
        RegularService.method.getDatas($scope, $stateParams);
        $scope.deleteData = function(data){
            if(!!data.taskId){
                sweetAlertConfirm(SweetAlert, function () {
                    RegularService.method.deleteData(data.taskId);
                }, "", "是否确定删除该条数据");
            }
        };
        $scope.enableOrDisable = function(data){
            if(!!data && !!data.taskId){
                var option = {0: "启用", 1: "禁用"}[data.state];
                sweetAlertConfirm(SweetAlert, function () {
                    RegularService.method.enableOrDisable(data.state ^ 1, data.taskId);
                }, "", "是否确定" + option + "此后台任务")
            }
        }
    }]);

    angular.module('app.routes').controller('RegularEditController', ["$scope", "$state", "$stateParams", "RegularService", "SweetAlert", function($scope, $state, $stateParams, RegularService, SweetAlert){
        $scope.readonly = $stateParams.readonly;
        $scope.dataSources = [{key: "1", value: "统一CMS"},{key: "2", value: "媒资库运营"},{key: "3", value: "产品库"}];
        if($stateParams.taskId){
            RegularService.method.detailData($scope, $stateParams.taskId);
        }
        $scope.submit = function(data){
            sweetAlertConfirm(SweetAlert, function() {
                RegularService.method.saveData(data, $state);
            });
        };
    }])
})();
/**
 * Created by YuChunzhuo-Dev on 2016/8/22.
 */
(function() {
    'use strict';
    angular.module('app.routes').service('RegularService', RegularService);
    RegularService.$inject = ['$http', 'SweetAlert', '$timeout'];
    function RegularService($http, SweetAlert, $timeout){
        var vm = this;

        vm.service = {
            'query':query,
            'save':save,
            'remove':remove,
            'info':info,
            'resumeTask':resumeTask,    //禁用一个任务
            'pauseTask':pauseTask           //启用一个后台任务
        };
        vm.method = {
            'getDatas':getDatas,
            'deleteData':deleteData,
            'saveData':saveData,
            'detailData':detailData,
            'enableOrDisable':enableOrDisable
        };

        function query(params){
            var url = REGULAR_URL + "getTaskList.action?" + formatObject4Url(params);
            return HttpGET(url);
        }
        function save(data){
            var url = REGULAR_URL + "saveTask.action";
            return HttpPost(url, data);
        }
        function remove(key){
            var url = REGULAR_URL + "deleteTask.action";
            return HttpPost(url, "taskId=" + key);
        }
        function info(key){
            var url = REGULAR_URL + "getTask.action?taskId=" + key;
            return HttpGET(url);
        }
        function resumeTask(key){
            var url = REGULAR_URL + "resumeTask.action";
            return HttpPost(url, "taskId=" + key);
        }
        function pauseTask(key){
            var url = REGULAR_URL + "pauseTask.action";
            return HttpPost(url, "taskId=" + key);
        }

        function getDatas($scope, $stateParams){
            var params = cloneOneObject($stateParams);
            var _promise = vm.service.query(params);
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1){
                        $scope.datas = res.data.list;
                        paginationDiscreteness($scope, 5, res.data.pageSize, res.data.totalCount, res.data.pageTotal, res.data.pageNo);
                    } else{
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                });
            }
        }
        function deleteData(key){
            var _promise = vm.service.remove(key);
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1){
                        sweetAlertCommon(SweetAlert);
                        $timeout(function () {
                            location.reload();
                        }, 1000);
                    } else {
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                });
            }
        }
        function saveData(data, $state){
            console.log(encodeURI(formatObject4Url(data)));
            var _promise = vm.service.save(encodeURI(formatObject4Url(data)));
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1){
                        sweetAlertCommon(SweetAlert, res.msg);
                        $timeout(function () {
                            $state.go('app.regular.list');
                        }, 1000);
                    } else {
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                })
            }
        }
        function detailData($scope, key){
            var _promise = vm.service.info(key);
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1){
                        $scope.data = res.data;
                    } else {
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                });
            }
        }
        function enableOrDisable(flag, key){
            var _promise = (flag === 0 && vm.service.pauseTask(key)) || (flag === 1 && vm.service.resumeTask(key));
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1){
                        sweetAlertCommon(SweetAlert);
                        $timeout(function () {
                            location.reload();
                        }, 1000);
                    } else {
                        sweetAlertCommon(SweetAlert, res.msg, 'warning');
                    }
                });
            }
        }

        function HttpGET(url){
            return $http.get(url).then(function(res){
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '定时任务接口请求异常', 'warning');
            });
        }
        function HttpPost(url, params){
            return $http(new PostSetup(url, params)).then(function(res){
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '定时任务接口请求异常', 'warning');
            });
        }

    }
})();
/**
 * Created by YuChunzhuo on 2016/1/5.
 */
angular.module('app.routes').config(["$stateProvider", function($stateProvider){
    $stateProvider
        .state('app.uc_task_tag',{
            url: '/uc_atask_tag?:pId&:status',
            templateUrl: 'app/views/uc/tag/uc_task_tag.html',
            controller: ["$scope", "$http", "$stateParams", function($scope,$http,$stateParams){
                $scope.tabs = [{name:'未分配',type:0},{name:'已分配',type:1},{name:'未完成',type:2},{name:'已完成',type:3}];
                $scope.params = new Object();
                $scope.datas = [];
                if($stateParams.status == 0){
                    $scope.show = true;
                }else{
                    $scope.show = false;
                }
                $scope.pId = $stateParams.pId;
                $scope.uId = _session.id;
                var param = {};
                param.pId = $stateParams.pId;
                //param.uId = -1;
                param.status = $stateParams.status;
                var p_param= {};
                p_param.id = $stateParams.pId;
                var p_type = '';
                //获取项目的流程
                $http.jsonp(uc_find_p+'.json?callback=JSON_CALLBACK&data='+ JSON.stringify(p_param)).success(function(res){
                    $scope.p_type = res.list[0].type;
                    $scope.cyr_list = [];
                    for(var i = 0; i < res.list[0].cyrList.length;i++){
                        $scope.cyr_list.push(res.list[0].cyrList[i]);
                    }
                    for(var i = 0; i < res.list[0].fzrList.length;i ++){
                        $scope.cyr_list.push(res.list[0].fzrList[i]);
                    }
                    //console.log($scope.cyr_list);
                    p_type = $scope.p_type;
                    if( $scope.p_type == 1){    //新歌流程
                        reflectData('song','歌曲',$scope,$http,param)
                    }
                    if($scope.p_type == 3){ //艺人流程
                        reflectData('artist','艺人',$scope,$http,param);
                    }
                    if($scope.p_type == 4){ //专辑流程
                        reflectData('album','专辑',$scope,$http,param);
                    }
                    if($scope.p_type == 5){ //歌曲流程
                        reflectData('song','歌曲',$scope,$http,param);
                    }
                });
                $scope.user = undefined;
                $scope.selectUser = function(v){
                    $scope.user = {};
                    $scope.user.name = v.name;
                    $scope.user.id = v.uId;
                };
                $scope.removeUser = function(){ //去除分配人的方法
                    console.log($scope.user);
                    $scope.user = undefined;
                };
                $scope.selectCyr = function(v){ //select选择参与人分配任务的方法
                    $scope.user = {};
                    $scope.user.name = v.uName;
                    $scope.user.id = v.uId;
                    console.log(v);
                };
                //复选框的单个选择
                var str = "";
                var unstr = "";
                var flag = '';
                var choseArr = [];
                $scope.checkb = false;
                $scope.choseArr = [];
                $scope.unchoseArr = [];
                $scope.chk = function(data, checkb){
                    if(flag == 'a'){//在全选的基础上操作
                        str = $scope.choseArr.join(',') + ',';
                    } else {
                        if($scope.unchoseArr.length != 1 && $scope.unchoseArr[0] != ""){
                            unstr = $scope.unchoseArr.join(',') + ',';
                        }
                    }
                    if(checkb != true){//选中
                        str = str + data.id + ',';
                        unstr = unstr.replace(data.id + ',', '');
                        data.isCheck = true;
                    } else {
                        str = str.replace(data.id + ',', '');//取消选中
                        unstr = unstr + data.id + ',';
                        data.isCheck = false;
                    }
                    if(str.length = 0){
                        $scope.choseArr = [];
                    } else {
                        $scope.choseArr = (str.substr(0,str.length-1)).split(',');
                    }
                    if(unstr.length = 0){
                        $scope.unchoseArr = [];
                    } else {
                        $scope.unchoseArr = (unstr.substr(0,unstr.length-1)).split(',');
                    }
                    $scope.unchoseArr = (unstr.substr(0,unstr.length-1)).split(',');
                    console.log($scope.choseArr);
                    console.log($scope.unchoseArr);
                };
                $scope.distributionTask = function(uId){
                    if($scope.choseArr.length < 1){
                        alert('请选择需要分配的数据');
                        return;
                    }
                    $http.jsonp(uc_assign_t + '.json?callback=JSON_CALLBACK&pId=' + $stateParams.pId + '&uId=' + uId + '&tId=' + $scope.choseArr.join(',')).success(function(res){
                        if(res.returnCode == 000000){
                            alert('分配成功',function(){
                                location.reload();
                            });
                        }else{
                            alert('分配失败');
                        }
                    });
                };
                $scope.export = function(){ //导出数据
                    console.log($scope.p_type);
                    var type = '';
                    if($scope.choseArr.length < 1){
                        alert('请选择要导出的数据');
                        return;
                    }
                    if($scope.p_type == 1)
                        type = 'song';
                    if($scope.p_type == 3)
                        type = 'artist';
                    if($scope.p_type == 4)
                        type = 'album';
                    if($scope.p_type == 5){
                        type = 'song';
                        console.log(type)
                    }
                    var url = '/mls/' + type + '/excel?ids=' +  $scope.choseArr.join(',');
                    location.href = url;
                };
                //复选框的全选
                $scope.checkAll = function(all, datas){
                    if(all==true){
                        $scope.allIsCheck = true;
                        $scope.choseArr = [];
                        $scope.unchoseArr = [];
                        for(var i=0; i < datas.length; i++){
                            var data = datas[i];
                            $scope.choseArr.push(data.id + "");
                            data.isCheck = true;
                        }
                        str = $scope.choseArr.join(',') + ',';
                        unstr = "";
                        //                                        $scope.choseArr = datas;
                        flag = 'a';
                        //                                        console.log("选中的数据:" + $scope.choseArr);
                    }else{
                        $scope.allIsCheck = false;
                        $scope.choseArr=[];
                        for(var i=0; i < datas.length; i++){
                            data = datas[i];
                            $scope.unchoseArr.push(data.id + "");
                            data.isCheck = false;
                        }
                        unstr = $scope.unchoseArr.join(',') + ',';
                        str = "";
                        flag = '';
                        //                                        console.log("未选中的数据" + $scope.unchoseArr);
                    }
                    console.log($scope.choseArr);
                    console.log($scope.unchoseArr);
                };
            }]
        })
        .state('app.uc_task_tag.unassigned',{
            url: '/uncompelete',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/tag/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", function($scope, $http, $stateParams){
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                    }]
                }
            }
        })
        .state('app.uc_task_tag.assigned',{
            url: '/uncompelete',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/tag/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", function($scope, $http, $stateParams){
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                    }]
                }
            }
        })
        .state('app.uc_task_tag.uncompelete',{
            url: '/uncompelete',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/tag/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", function($scope, $http, $stateParams){
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                    }]
                }
            }
        })
        .state('app.uc_task_tag.compelete',{
            url: '/uncompelete',
            views: {
                "condition": {
                    templateUrl: 'app/views/uc/tag/uncompelete.html',
                    controller: ["$scope", "$http", "$stateParams", function($scope, $http, $stateParams){
                        //打开日期框
                        $scope.open = function(flag) {
                            if(flag == 1){
                                $scope.dateStatus.opened1 = true;
                            } else if (flag == 2){
                                $scope.dateStatus.opened2 = true;
                            }
                        };
                        $scope.dateStatus = {
                            opened1: false,
                            opened2: false
                        };
                    }]
                }
            }
        })
}]);

/**
 * Created by hao.cheng on 2016/8/2.
 */
(function () {
    'use strict';

    angular.module('app.routes').config(CatalogTaskConfig);
    CatalogTaskConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
    function CatalogTaskConfig($stateProvider, helper) {
        $stateProvider
            .state('app.catalogTask',{
                url: '/catalogTask',
                views: {
                    '': {
                        templateUrl: helper.basepath('uc-catalogtask/catalogtask-head.html'),
                        controller: 'CatalogTaskHeadCtrl'
                    }
                }
            })
            .state('app.catalogTask.module', {
                url: '/module?:module&:projectId&:pageNo&:pageSize&:copyrightId&:cpSongName&:cpArtistName&:cpAlbumName&:createStartTime&:createEndTime&:distributionStartTime' +
                        '&:distributionEndTime&:urgentDegree&:newSong&:degree&:mscoreMin&:mscoreMax&:hotScoreMin&:hotScoreMax&:language&:karakalStatus&:tagStatus&:uid&:lastEditSearch&:taskStatus',
                views: {
                    'data-list': {
                        templateUrl: helper.basepath('uc-catalogtask/catalogtask-list.html'),
                        controller: 'CatalogTaskListCtrl'
                    }
                }
            })
    }

    /*手动编目工单系列controller*/
    angular.module('app.routes').controller('CatalogTaskHeadCtrl', ["$scope", "$state", "TaskService", "$http", "$stateParams", function ($scope, $state, TaskService, $http, $stateParams) {
        $scope.form = new Form();
        $scope.taskSwitch = function (module,projectId) {
            $scope.datas = [];  //清空数据
            var _param = inherit($scope.form);
            for(var p in _param){
                _param[p] = '';
            }
            _param.module = module,_param.projectId = projectId,_param.pageSize = 100,_param.pageNo = 1;
            $state.go($state.current.name, _param, {inherit: false});
        };
        $scope.submit = function () {
            console.log($scope.form);
            $state.go('app.catalogTask.module', $scope.form);
        };
        $scope.reset = function () {
            for(var p in $scope.form){
                if(p != 'projectId' && p != 'pageNo' && p != 'pageSize') $scope.form[p] = '';
            }

        };
    }]);
    angular.module('app.routes').controller('CatalogTaskListCtrl', ["$scope", "$state", "$stateParams", "TaskService", "SweetAlert", function ($scope, $state, $stateParams, TaskService, SweetAlert) {
        if($stateParams.module == '-1,1,2') $stateParams.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
        $scope.$parent.form = excludeProperties($stateParams, ['module']); //刷新页面回显
        if($stateParams.module) $scope.$parent.module = $stateParams.module,$scope.$parent.form.taskStatusList = $stateParams.module.split(',');
        var promise = TaskService.service.taskSearch('catalog', angular.toJson($scope.$parent.form));
        if(promise) promise.then(function (res) {
            $scope.$parent.datas = res.data.list;
            console.log(res);
        });
        var form = cloneOneObject($scope.$parent.form);form.isQueryCount = 1;   //异步count
        TaskService.service.taskSearch('catalog', angular.toJson(form)).then(function (res) {
            paginationDiscreteness($scope, 5, res.data.pageSize, res.data.totalCount, res.data.pageTotal, res.data.pageNo);
        })

        if(!$scope.$parent.userRole) getTaskFlowAndAuth(TaskService, $scope); //获取工单流程和权限
        $scope.tagging = function (data, blank) { //打标签操作
            taggingAloneCheck(data.songId, blank, 'song', data.taskId, $state, SweetAlert);
        }
    }]);
    angular.module('app.routes').controller('UnAssignModal', ["datas", "TaskService", "$scope", "$uibModalInstance", "CatalogService", "SweetAlert", function (datas, TaskService,$scope, $uibModalInstance, CatalogService, SweetAlert) {
        $scope.cancel = function () { //取消
            $uibModalInstance.dismiss('cancel');
        };
        $scope.export = function (startTime, endTime) { //确认
            if(!startTime || !endTime) return sweetAlertCommon(SweetAlert, '请填写完整的创建时间', 'warning');
            var _promise = CatalogService.service.createCatalogTask(startTime, endTime);
            if(_promise) _promise.then(function (res) {
                if(res.status != 1) return sweetAlertCommon(SweetAlert, res.msg, 'warning');
                sweetAlertCommon(SweetAlert, res.msg, 'success');
                location.reload();
            })
        }
    }]);
    function getTaskFlowAndAuth(TaskService, $scope){  //获取工单流程和权限
        var _promise1 = TaskService.service.getTaskFlow($scope.$parent.form.projectId);
        if(_promise1) _promise1.then(function (res) {
            $scope.$parent.p_type = res.data.list[0].flowType;
            $scope.$parent.distribution = res.data.list[0].distribution;
            $scope.$parent.cyr_list = res.data.list[0].cyrList;
            $scope.$parent.cyr_list = $scope.cyr_list.concat(res.data.list[0].fzrList);
            $scope.$parent.cyr_list.forEach(function (val) {
                val.uid += '';
                if(val.uid == JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid) $scope.$parent.userRole = 'fzr';
            });
        });
        var _promise2 = TaskService.service.getTaskAuth($scope.$parent.form.projectId);
        if(_promise2) _promise2.then(function (res) {
            if(res.returnCode == '000000') $scope.$parent.authoritySetting = res.list[0];
        })
    }

})();

function taskSwitch(module, projectId, $scope, $state) {
    $scope.datas = [];  //清空数据
    var _param = inherit($scope.form);
    for(var p in _param){
        _param[p] = '';
    }
    _param.module = module,_param.projectId = projectId,_param.pageSize = 100,_param.pageNo = 1;
    $state.go($state.current.name, _param, {inherit: false});
}


/**
 * Created by hao.cheng on 2016/8/8.
 */
(function () {
    'use strict';

    angular.module('app.routes').config(SongTagTaskConfig);
    SongTagTaskConfig.$inject = ['$stateProvider', 'RouteHelpersProvider'];
    function SongTagTaskConfig($stateProvider, helper) {
        $stateProvider
            .state('app.songtagTask', {
                url: '/songtagTask',
                views: {
                    '': {
                        templateUrl: helper.basepath('partials/container-tpl.html'),
                        controller: 'SongtagTaskHeadController'
                    }
                }
            })
            .state('app.songtagTask.module', {
                url: '/module?:module&:projectId&:pageNo&:pageSize&:copyrightId&:songIds&:songName&:artistName&:albumName&:projectName&:urgentDegree&:degree&:newSong&:status' +
                '&:mscoreMin&:mscoreMax&:hotScoreMax&:hotScoreMin&:taskStatus&:uid&:lastEditSearch&:distributionStartTime&:distributionEndTime&:completeStartTime&:completeEndTime',
                views: {
                    'condition': {
                        templateUrl: helper.basepath('uc-songtagtask/songtagtask-condition.html'),
                        controller: 'SongtagTaskHeadController'
                    },
                    'data-list': {
                        templateUrl: helper.basepath('uc-songtagtask/songtagtask-list.html'),
                        controller: 'SongtagTaskListController'
                    }
                }
            })
            .state('app.songtagTaskFeedback', {
                url: '/task/feedback?:pid&:uid&:type&:pageNo&:pageSize',
                templateUrl: helper.basepath('uc-songtagtask/songtagtask-feedback.html'),
                controller: 'SongtagTaskFeedbackController'
            })
            .state('app.songtagTaskFailed', {
                url: '/task/failed?:type&:fid',
                templateUrl: helper.basepath('uc-songtagtask/songtagtask-failed.html'),
                controller: 'SongtagTaskFaildController'
            })
    }

    /*歌曲标签工单系列controller*/
    angular.module('app.routes').controller('SongtagTaskHeadController', ["$scope", "TaskService", "$stateParams", "$state", function ($scope, TaskService, $stateParams, $state) {
        // $scope.container = {title: '歌曲标签工单'};
        $scope.container = new Container('歌曲标签工单');
        $scope.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
        console.log($scope.container);
        $scope.taskSwitch = function (module, projectId) {
            taskSwitch(module, projectId, $scope, $state);
        };
        $scope.submit = function () {
            $state.go($state.current.name, $scope.form);
        };
        $scope.reset = function () {
            for(var p in $scope.form){
                if(p != 'projectId' && p != 'pageNo' && p != 'pageSize') $scope.form[p] = '';
            }
        };
        $scope.state2feedback = function(type){
            var params = {type: type, pid: $stateParams.projectId, uid: JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid, pageSize: 20, pageNo: 1};
            var url = $state.href('app.songtagTaskFeedback', params);
            window.open(url, '_blank');
        }
    }]);
    angular.module('app.routes').controller('SongtagTaskListController', ["$scope", "TaskService", "$stateParams", "$state", "SweetAlert", function ($scope, TaskService, $stateParams, $state, SweetAlert) {
        taskListService($stateParams, $scope, TaskService);
        $scope.tagging = function (data, blank) {  //打标签操作
            taggingAloneCheck(data.songId, blank, 'song', data.taskId, $state, SweetAlert);
        };
        taskLoadSearch('song', $scope, TaskService);
    }]);
    angular.module('app.routes').controller('SongTagModal', ["datas", "form", "$uibModalInstance", "$scope", "SweetAlert", function (datas, form, $uibModalInstance, $scope, SweetAlert) {
        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        $scope.export = function () {
            exportCommon(datas, form, $scope, SONGTAG_EXPORT, SweetAlert);
        };
    }]);
    angular.module('app.routes').controller('SongTagImportModal', ["type", "$uibModalInstance", "$scope", "$stateParams", "SweetAlert", "$timeout", function (type, $uibModalInstance, $scope, $stateParams, SweetAlert, $timeout) {
        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        $scope.import = function(){
            var filename = $('#excelFile').val();
            if(filename == undefined || filename == '') return sweetAlertCommon(SweetAlert, '请选择上传的excel文件', 'warning');
            var datas = {pid: $stateParams.projectId};
            datas.type = (type == 'task' && 1) || (type == 'tag' && 2) || 1;     // 默认为1，第一个条件为task，第二个条件为tag
            if(type != 'task' && type != 'tag') datas.kind = (type == 'artist' && 'artist') || (type == 'album' && 'album') || (type == 'song' && 'song');
            ajaxFileUpload(SONGTAG_IMPORT, $scope, datas, $uibModalInstance,SweetAlert, 'excelFile', $stateParams, undefined, $timeout);
        };
        $scope.downloadTpl = function(){
            var _tplUrl = ((type == 'task' || type == 'song') && SONGTAG_TPL) ||
                (type == 'tag' && TAG_TPL) || (type == 'artist' && ARTIST_TPL) || (type == 'album' && ALBUM_TPL);
            window.open(_tplUrl);
        }
    }]);
    angular.module('app.routes').controller('SongtagTaskFeedbackController', ["$scope", "$stateParams", "SongTagTaskService", function($scope, $stateParams, SongTagTaskService){
        $scope.type = $stateParams.type;

        var obj = cloneOneObject($stateParams);
        if(obj.hasOwnProperty('type')){
            if(obj.type == 'tag'){
                obj.type = 2;
            } else{
                obj.type = 1;
            }
        }
        SongTagTaskService.method.getFeedbackDatas(obj, function(res){
            $scope.datas = res.data.list;
            paginationDiscreteness($scope, 5, res.data.pageSize, res.data.totalCount, res.data.pageTotal, res.data.pageNo);
        })
    }]);
    angular.module('app.routes').controller('SongtagTaskFaildController', ["$scope", "$stateParams", "SongTagTaskService", function($scope, $stateParams, SongTagTaskService){
        $scope.type = $stateParams.type;

        SongTagTaskService.method.getFailedDatas($stateParams.fid, function(res){
            $scope.datas = res.data;
            for(var i = 0; i < $scope.datas.length; i++){
                var tag = [];
                var arr = ['language', 'style', 'emotion', 'theme', 'scene', 'holiday', 'instrument', 'voice', 'ring'];
                getSpecialPropertiesByArray($scope.datas[i].data, arr, function(value){
                    if(!checkEmpty(value)){
                        tag.push(value);
                    }
                });
                if(tag.length > 0){
                    $scope.datas[i].tag = tag.join('、');
                }
            }
        });
        $scope.exportFaildExcel = function(){
            var type = $stateParams.type == 'tag' ? 'tag' : 'task';
            SongTagTaskService.method.exportFailedExcel(type, $stateParams.fid);
        }
    }]);
})();
function taskListService($stateParams, $scope, TaskService) {  //工单基本业务逻辑
    if($stateParams.module == '-1,1,2') $stateParams.uid = JSON.parse(localStorage.getItem('ngStorage-loginUserInfo')).uid;
    $scope.$parent.form = excludeProperties($stateParams, ['module']); //刷新页面回显
    if($scope.$parent.form.tagBeans) $scope.$parent.form.tagBeans = JSON.parse($scope.$parent.form.tagBeans);
    if($stateParams.module){
        $scope.$parent.module = $stateParams.module;
        if($stateParams.module == 1) $scope.$parent.form.taskStatusList = [-1,1,2];
        else $scope.$parent.form.taskStatusList = $stateParams.module.split(',');
    }
    if(!$scope.$parent.userRole && $stateParams.projectId) TaskService.method.getTaskFlowAndAuth($scope);  //获取项目流程和权限
}
function taskLoadSearch(type, $scope, TaskService){ //工单搜索加载数据
    if($scope.$parent.form[type + 'Ids']) $scope.$parent.form[type + 'Ids'] = $scope.$parent.form[type + 'Ids'].split(',');
    TaskService.method.taskSearchFromPage(type, $scope);
}
/**
 * Created by YuChunzhuo-Dev on 2016/8/9.
 */
(function(){
    'use strict';

    angular.module('app.routes').service('SongTagTaskService', SongTagTaskService);
    SongTagTaskService.$inject = ['$http', 'SweetAlert'];
    function SongTagTaskService($http, SweetAlert){
        var _self = this;
        _self.service = {
            'feedbackList': feedbackList,
            'failedList': failedList
        };
        _self.method = {
            'getFeedbackDatas': getFeedbackDatas,
            'getFailedDatas': getFailedDatas,
            'exportFailedExcel': exportFailedExcel
        };

        function feedbackList(str){
            var url = http_url + "/tag/task/" + "queryUpload.json?" + str;
            return $http.get(url).then(function(res){
                return res.data;
            }, function () {
                sweetAlertCommon(SweetAlert, '导入反馈接口请求异常', 'warning');
            });
        }

        function failedList(fid){
            var url = http_url + "/tag/task/" + "resolveFail.json?fid=" + fid;
            return $http.get(url).then(function(res){
                return res.data;
            }, function(){
                sweetAlertCommon(SweetAlert, '导入反馈接口请求异常', 'warning');
            });
        }

        function getFeedbackDatas(data, _method){
            var _promise = _self.service.feedbackList(formatObject4Url(data));
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1) _method(res);
                    else sweetAlertCommon(SweetAlert, res.msg, 'warning');
                });
            }
        }

        function getFailedDatas(fid, _method){
            var _promise = _self.service.failedList(fid);
            if(_promise){
                _promise.then(function(res){
                    if(res.status == 1) _method(res);
                    else sweetAlertCommon(SweetAlert, res.msg, 'warning');
                });
            }
        }

        function exportFailedExcel(type, fid){
            type = type[0].toUpperCase() + type.substring(1, type.length);
            var url = http_url + "/tag/task/" + "export" + type + "ResolveFail.do?fid=" + fid;
            window.open(url);
        }
    }
})();